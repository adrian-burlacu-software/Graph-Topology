
/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2020-01-28T22:27:50.651-05:00
  3.24.0.5
  
  Standalone prediction code with sample test data for GBMModel named SearchMethod

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://192.168.0.103:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://192.168.0.103:54321/3/Models.java/SearchMethod > SearchMethod.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m SearchMethod.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="SearchMethod", algorithm="gbm")
public class SearchMethod extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 1; }
  public int nclasses() { return 7; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_SearchMethod.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 7;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* currentStateIn */ SearchMethod_ColInfo_0.VALUES,
    /* methodOut */ SearchMethod_ColInfo_1.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.14285714285714285,0.14285714285714285,0.14285714285714285,0.14285714285714285,0.14285714285714285,0.14285714285714285,0.14285714285714285};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {0.14285714285714285,0.14285714285714285,0.14285714285714285,0.14285714285714285,0.14285714285714285,0.14285714285714285,0.14285714285714285};

  public SearchMethod() { super(NAMES,DOMAINS,"methodOut"); }
  public String getUUID() { return Long.toString(2553660544847726888L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    SearchMethod_Forest_0.score0(data,preds);
    SearchMethod_Forest_1.score0(data,preds);
    SearchMethod_Forest_2.score0(data,preds);
    SearchMethod_Forest_3.score0(data,preds);
    SearchMethod_Forest_4.score0(data,preds);
    SearchMethod_Forest_5.score0(data,preds);
    SearchMethod_Forest_6.score0(data,preds);
    SearchMethod_Forest_7.score0(data,preds);
    SearchMethod_Forest_8.score0(data,preds);
    SearchMethod_Forest_9.score0(data,preds);
    SearchMethod_Forest_10.score0(data,preds);
    SearchMethod_Forest_11.score0(data,preds);
    SearchMethod_Forest_12.score0(data,preds);
    SearchMethod_Forest_13.score0(data,preds);
    SearchMethod_Forest_14.score0(data,preds);
    SearchMethod_Forest_15.score0(data,preds);
    SearchMethod_Forest_16.score0(data,preds);
    SearchMethod_Forest_17.score0(data,preds);
    SearchMethod_Forest_18.score0(data,preds);
    SearchMethod_Forest_19.score0(data,preds);
    SearchMethod_Forest_20.score0(data,preds);
    SearchMethod_Forest_21.score0(data,preds);
    SearchMethod_Forest_22.score0(data,preds);
    SearchMethod_Forest_23.score0(data,preds);
    SearchMethod_Forest_24.score0(data,preds);
    SearchMethod_Forest_25.score0(data,preds);
    SearchMethod_Forest_26.score0(data,preds);
    SearchMethod_Forest_27.score0(data,preds);
    SearchMethod_Forest_28.score0(data,preds);
    SearchMethod_Forest_29.score0(data,preds);
    hex.genmodel.GenModel.GBM_rescale(preds);
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_SearchMethod implements java.io.Serializable {
  public static final String[] VALUES = new String[1];
  static {
    NamesHolder_SearchMethod_0.fill(VALUES);
  }
  static final class NamesHolder_SearchMethod_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "currentStateIn";
    }
  }
}
// The class representing column currentStateIn
class SearchMethod_ColInfo_0 implements java.io.Serializable {
  public static final String[] VALUES = new String[7];
  static {
    SearchMethod_ColInfo_0_0.fill(VALUES);
  }
  static final class SearchMethod_ColInfo_0_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "-1";
      sa[1] = "0";
      sa[2] = "1";
      sa[3] = "2";
      sa[4] = "3";
      sa[5] = "4";
      sa[6] = "5";
    }
  }
}
// The class representing column methodOut
class SearchMethod_ColInfo_1 implements java.io.Serializable {
  public static final String[] VALUES = new String[7];
  static {
    SearchMethod_ColInfo_1_0.fill(VALUES);
  }
  static final class SearchMethod_ColInfo_1_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "end";
      sa[1] = "getCheckFalse";
      sa[2] = "getNodeEndCheck";
      sa[3] = "getSearchLoop";
      sa[4] = "getTrue";
      sa[5] = "getWordInit";
      sa[6] = "init";
    }
  }
}

class SearchMethod_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchMethod_Tree_0_class_0.score0(fdata);
    preds[2] += SearchMethod_Tree_0_class_1.score0(fdata);
    preds[3] += SearchMethod_Tree_0_class_2.score0(fdata);
    preds[4] += SearchMethod_Tree_0_class_3.score0(fdata);
    preds[5] += SearchMethod_Tree_0_class_4.score0(fdata);
    preds[6] += SearchMethod_Tree_0_class_5.score0(fdata);
    preds[7] += SearchMethod_Tree_0_class_6.score0(fdata);
  }
}
class SearchMethod_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.1f : 
        0.6f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class SearchMethod_Tree_0_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.1f : 
        0.6f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchMethod_Tree_0_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.1f : 
        0.6f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}

class SearchMethod_Tree_0_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.1f : 
        0.6f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchMethod_Tree_0_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.1f : 
        0.6f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 0, 0};
}

class SearchMethod_Tree_0_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.1f : 
        0.6f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchMethod_Tree_0_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.1f : 
        0.6f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class SearchMethod_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchMethod_Tree_1_class_0.score0(fdata);
    preds[2] += SearchMethod_Tree_1_class_1.score0(fdata);
    preds[3] += SearchMethod_Tree_1_class_2.score0(fdata);
    preds[4] += SearchMethod_Tree_1_class_3.score0(fdata);
    preds[5] += SearchMethod_Tree_1_class_4.score0(fdata);
    preds[6] += SearchMethod_Tree_1_class_5.score0(fdata);
    preds[7] += SearchMethod_Tree_1_class_6.score0(fdata);
  }
}
class SearchMethod_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09793517f : 
        0.34110102f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class SearchMethod_Tree_1_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09793517f : 
        0.34110102f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchMethod_Tree_1_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09793517f : 
        0.34110102f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}

class SearchMethod_Tree_1_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09793517f : 
        0.34110102f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchMethod_Tree_1_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09793517f : 
        0.34110102f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 0, 0};
}

class SearchMethod_Tree_1_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09793517f : 
        0.34110102f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchMethod_Tree_1_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09793517f : 
        0.34110102f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class SearchMethod_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchMethod_Tree_2_class_0.score0(fdata);
    preds[2] += SearchMethod_Tree_2_class_1.score0(fdata);
    preds[3] += SearchMethod_Tree_2_class_2.score0(fdata);
    preds[4] += SearchMethod_Tree_2_class_3.score0(fdata);
    preds[5] += SearchMethod_Tree_2_class_4.score0(fdata);
    preds[6] += SearchMethod_Tree_2_class_5.score0(fdata);
    preds[7] += SearchMethod_Tree_2_class_6.score0(fdata);
  }
}
class SearchMethod_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09626535f : 
        0.25035125f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class SearchMethod_Tree_2_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09626535f : 
        0.25035125f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchMethod_Tree_2_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09626535f : 
        0.25035125f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}

class SearchMethod_Tree_2_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09626535f : 
        0.25035125f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchMethod_Tree_2_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09626535f : 
        0.25035125f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 0, 0};
}

class SearchMethod_Tree_2_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09626535f : 
        0.25035125f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchMethod_Tree_2_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09626535f : 
        0.25035125f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class SearchMethod_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchMethod_Tree_3_class_0.score0(fdata);
    preds[2] += SearchMethod_Tree_3_class_1.score0(fdata);
    preds[3] += SearchMethod_Tree_3_class_2.score0(fdata);
    preds[4] += SearchMethod_Tree_3_class_3.score0(fdata);
    preds[5] += SearchMethod_Tree_3_class_4.score0(fdata);
    preds[6] += SearchMethod_Tree_3_class_5.score0(fdata);
    preds[7] += SearchMethod_Tree_3_class_6.score0(fdata);
  }
}
class SearchMethod_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.094815545f : 
        0.20212518f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class SearchMethod_Tree_3_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.094815545f : 
        0.20212518f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchMethod_Tree_3_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.094815545f : 
        0.20212518f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}

class SearchMethod_Tree_3_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.094815545f : 
        0.20212518f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchMethod_Tree_3_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.094815545f : 
        0.20212518f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 0, 0};
}

class SearchMethod_Tree_3_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.094815545f : 
        0.20212518f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchMethod_Tree_3_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.094815545f : 
        0.20212518f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class SearchMethod_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchMethod_Tree_4_class_0.score0(fdata);
    preds[2] += SearchMethod_Tree_4_class_1.score0(fdata);
    preds[3] += SearchMethod_Tree_4_class_2.score0(fdata);
    preds[4] += SearchMethod_Tree_4_class_3.score0(fdata);
    preds[5] += SearchMethod_Tree_4_class_4.score0(fdata);
    preds[6] += SearchMethod_Tree_4_class_5.score0(fdata);
    preds[7] += SearchMethod_Tree_4_class_6.score0(fdata);
  }
}
class SearchMethod_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09354547f : 
        0.17221783f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class SearchMethod_Tree_4_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09354547f : 
        0.17221783f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchMethod_Tree_4_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09354547f : 
        0.17221783f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}

class SearchMethod_Tree_4_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09354547f : 
        0.17221783f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchMethod_Tree_4_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09354547f : 
        0.17221783f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 0, 0};
}

class SearchMethod_Tree_4_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09354547f : 
        0.17221783f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchMethod_Tree_4_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09354547f : 
        0.17221783f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class SearchMethod_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchMethod_Tree_5_class_0.score0(fdata);
    preds[2] += SearchMethod_Tree_5_class_1.score0(fdata);
    preds[3] += SearchMethod_Tree_5_class_2.score0(fdata);
    preds[4] += SearchMethod_Tree_5_class_3.score0(fdata);
    preds[5] += SearchMethod_Tree_5_class_4.score0(fdata);
    preds[6] += SearchMethod_Tree_5_class_5.score0(fdata);
    preds[7] += SearchMethod_Tree_5_class_6.score0(fdata);
  }
}
class SearchMethod_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.092434265f : 
        0.15202968f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class SearchMethod_Tree_5_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.092434265f : 
        0.15202968f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchMethod_Tree_5_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.092434265f : 
        0.15202968f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}

class SearchMethod_Tree_5_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.092434265f : 
        0.15202968f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchMethod_Tree_5_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.092434265f : 
        0.15202968f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 0, 0};
}

class SearchMethod_Tree_5_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.092434265f : 
        0.15202968f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchMethod_Tree_5_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.092434265f : 
        0.15202968f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class SearchMethod_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchMethod_Tree_6_class_0.score0(fdata);
    preds[2] += SearchMethod_Tree_6_class_1.score0(fdata);
    preds[3] += SearchMethod_Tree_6_class_2.score0(fdata);
    preds[4] += SearchMethod_Tree_6_class_3.score0(fdata);
    preds[5] += SearchMethod_Tree_6_class_4.score0(fdata);
    preds[6] += SearchMethod_Tree_6_class_5.score0(fdata);
    preds[7] += SearchMethod_Tree_6_class_6.score0(fdata);
  }
}
class SearchMethod_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09146583f : 
        0.1376475f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class SearchMethod_Tree_6_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09146583f : 
        0.1376475f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchMethod_Tree_6_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09146583f : 
        0.1376475f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}

class SearchMethod_Tree_6_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09146583f : 
        0.1376475f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchMethod_Tree_6_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09146583f : 
        0.1376475f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 0, 0};
}

class SearchMethod_Tree_6_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09146583f : 
        0.1376475f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchMethod_Tree_6_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09146583f : 
        0.1376475f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class SearchMethod_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchMethod_Tree_7_class_0.score0(fdata);
    preds[2] += SearchMethod_Tree_7_class_1.score0(fdata);
    preds[3] += SearchMethod_Tree_7_class_2.score0(fdata);
    preds[4] += SearchMethod_Tree_7_class_3.score0(fdata);
    preds[5] += SearchMethod_Tree_7_class_4.score0(fdata);
    preds[6] += SearchMethod_Tree_7_class_5.score0(fdata);
    preds[7] += SearchMethod_Tree_7_class_6.score0(fdata);
  }
}
class SearchMethod_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09062553f : 
        0.12701355f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class SearchMethod_Tree_7_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09062553f : 
        0.12701355f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchMethod_Tree_7_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09062553f : 
        0.12701355f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}

class SearchMethod_Tree_7_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09062553f : 
        0.12701355f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchMethod_Tree_7_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09062553f : 
        0.12701355f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 0, 0};
}

class SearchMethod_Tree_7_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09062553f : 
        0.12701355f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchMethod_Tree_7_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09062553f : 
        0.12701355f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class SearchMethod_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchMethod_Tree_8_class_0.score0(fdata);
    preds[2] += SearchMethod_Tree_8_class_1.score0(fdata);
    preds[3] += SearchMethod_Tree_8_class_2.score0(fdata);
    preds[4] += SearchMethod_Tree_8_class_3.score0(fdata);
    preds[5] += SearchMethod_Tree_8_class_4.score0(fdata);
    preds[6] += SearchMethod_Tree_8_class_5.score0(fdata);
    preds[7] += SearchMethod_Tree_8_class_6.score0(fdata);
  }
}
class SearchMethod_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08989947f : 
        0.11893607f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class SearchMethod_Tree_8_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08989947f : 
        0.11893607f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchMethod_Tree_8_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08989947f : 
        0.11893607f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}

class SearchMethod_Tree_8_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08989947f : 
        0.11893607f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchMethod_Tree_8_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08989947f : 
        0.11893607f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 0, 0};
}

class SearchMethod_Tree_8_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08989947f : 
        0.11893607f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchMethod_Tree_8_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08989947f : 
        0.11893607f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class SearchMethod_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchMethod_Tree_9_class_0.score0(fdata);
    preds[2] += SearchMethod_Tree_9_class_1.score0(fdata);
    preds[3] += SearchMethod_Tree_9_class_2.score0(fdata);
    preds[4] += SearchMethod_Tree_9_class_3.score0(fdata);
    preds[5] += SearchMethod_Tree_9_class_4.score0(fdata);
    preds[6] += SearchMethod_Tree_9_class_5.score0(fdata);
    preds[7] += SearchMethod_Tree_9_class_6.score0(fdata);
  }
}
class SearchMethod_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0892745f : 
        0.11267471f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class SearchMethod_Tree_9_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0892745f : 
        0.11267471f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchMethod_Tree_9_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0892745f : 
        0.11267471f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}

class SearchMethod_Tree_9_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0892745f : 
        0.11267471f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchMethod_Tree_9_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0892745f : 
        0.11267471f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 0, 0};
}

class SearchMethod_Tree_9_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0892745f : 
        0.11267471f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchMethod_Tree_9_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0892745f : 
        0.11267471f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class SearchMethod_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchMethod_Tree_10_class_0.score0(fdata);
    preds[2] += SearchMethod_Tree_10_class_1.score0(fdata);
    preds[3] += SearchMethod_Tree_10_class_2.score0(fdata);
    preds[4] += SearchMethod_Tree_10_class_3.score0(fdata);
    preds[5] += SearchMethod_Tree_10_class_4.score0(fdata);
    preds[6] += SearchMethod_Tree_10_class_5.score0(fdata);
    preds[7] += SearchMethod_Tree_10_class_6.score0(fdata);
  }
}
class SearchMethod_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.088738315f : 
        0.107744634f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class SearchMethod_Tree_10_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.088738315f : 
        0.107744634f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchMethod_Tree_10_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.088738315f : 
        0.107744634f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}

class SearchMethod_Tree_10_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.088738315f : 
        0.107744634f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchMethod_Tree_10_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.088738315f : 
        0.107744634f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 0, 0};
}

class SearchMethod_Tree_10_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.088738315f : 
        0.107744634f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchMethod_Tree_10_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.088738315f : 
        0.107744634f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class SearchMethod_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchMethod_Tree_11_class_0.score0(fdata);
    preds[2] += SearchMethod_Tree_11_class_1.score0(fdata);
    preds[3] += SearchMethod_Tree_11_class_2.score0(fdata);
    preds[4] += SearchMethod_Tree_11_class_3.score0(fdata);
    preds[5] += SearchMethod_Tree_11_class_4.score0(fdata);
    preds[6] += SearchMethod_Tree_11_class_5.score0(fdata);
    preds[7] += SearchMethod_Tree_11_class_6.score0(fdata);
  }
}
class SearchMethod_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0882796f : 
        0.10381476f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class SearchMethod_Tree_11_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0882796f : 
        0.10381476f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchMethod_Tree_11_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0882796f : 
        0.10381476f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}

class SearchMethod_Tree_11_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0882796f : 
        0.10381476f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchMethod_Tree_11_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0882796f : 
        0.10381476f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 0, 0};
}

class SearchMethod_Tree_11_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0882796f : 
        0.10381476f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchMethod_Tree_11_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0882796f : 
        0.10381476f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class SearchMethod_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchMethod_Tree_12_class_0.score0(fdata);
    preds[2] += SearchMethod_Tree_12_class_1.score0(fdata);
    preds[3] += SearchMethod_Tree_12_class_2.score0(fdata);
    preds[4] += SearchMethod_Tree_12_class_3.score0(fdata);
    preds[5] += SearchMethod_Tree_12_class_4.score0(fdata);
    preds[6] += SearchMethod_Tree_12_class_5.score0(fdata);
    preds[7] += SearchMethod_Tree_12_class_6.score0(fdata);
  }
}
class SearchMethod_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08788811f : 
        0.100651324f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class SearchMethod_Tree_12_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08788811f : 
        0.100651324f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchMethod_Tree_12_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08788811f : 
        0.100651324f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}

class SearchMethod_Tree_12_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08788811f : 
        0.100651324f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchMethod_Tree_12_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08788811f : 
        0.100651324f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 0, 0};
}

class SearchMethod_Tree_12_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08788811f : 
        0.100651324f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchMethod_Tree_12_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08788811f : 
        0.100651324f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class SearchMethod_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchMethod_Tree_13_class_0.score0(fdata);
    preds[2] += SearchMethod_Tree_13_class_1.score0(fdata);
    preds[3] += SearchMethod_Tree_13_class_2.score0(fdata);
    preds[4] += SearchMethod_Tree_13_class_3.score0(fdata);
    preds[5] += SearchMethod_Tree_13_class_4.score0(fdata);
    preds[6] += SearchMethod_Tree_13_class_5.score0(fdata);
    preds[7] += SearchMethod_Tree_13_class_6.score0(fdata);
  }
}
class SearchMethod_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08755468f : 
        0.09808466f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class SearchMethod_Tree_13_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08755468f : 
        0.09808466f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchMethod_Tree_13_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08755468f : 
        0.09808466f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}

class SearchMethod_Tree_13_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08755468f : 
        0.09808466f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchMethod_Tree_13_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08755468f : 
        0.09808466f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 0, 0};
}

class SearchMethod_Tree_13_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08755468f : 
        0.09808466f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchMethod_Tree_13_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08755468f : 
        0.09808466f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class SearchMethod_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchMethod_Tree_14_class_0.score0(fdata);
    preds[2] += SearchMethod_Tree_14_class_1.score0(fdata);
    preds[3] += SearchMethod_Tree_14_class_2.score0(fdata);
    preds[4] += SearchMethod_Tree_14_class_3.score0(fdata);
    preds[5] += SearchMethod_Tree_14_class_4.score0(fdata);
    preds[6] += SearchMethod_Tree_14_class_5.score0(fdata);
    preds[7] += SearchMethod_Tree_14_class_6.score0(fdata);
  }
}
class SearchMethod_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.087271184f : 
        0.09598878f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class SearchMethod_Tree_14_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.087271184f : 
        0.09598878f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchMethod_Tree_14_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.087271184f : 
        0.09598878f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}

class SearchMethod_Tree_14_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.087271184f : 
        0.09598878f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchMethod_Tree_14_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.087271184f : 
        0.09598878f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 0, 0};
}

class SearchMethod_Tree_14_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.087271184f : 
        0.09598878f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchMethod_Tree_14_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.087271184f : 
        0.09598878f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class SearchMethod_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchMethod_Tree_15_class_0.score0(fdata);
    preds[2] += SearchMethod_Tree_15_class_1.score0(fdata);
    preds[3] += SearchMethod_Tree_15_class_2.score0(fdata);
    preds[4] += SearchMethod_Tree_15_class_3.score0(fdata);
    preds[5] += SearchMethod_Tree_15_class_4.score0(fdata);
    preds[6] += SearchMethod_Tree_15_class_5.score0(fdata);
    preds[7] += SearchMethod_Tree_15_class_6.score0(fdata);
  }
}
class SearchMethod_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0870305f : 
        0.09426834f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class SearchMethod_Tree_15_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0870305f : 
        0.09426834f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchMethod_Tree_15_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0870305f : 
        0.09426834f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}

class SearchMethod_Tree_15_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0870305f : 
        0.09426834f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchMethod_Tree_15_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0870305f : 
        0.09426834f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 0, 0};
}

class SearchMethod_Tree_15_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0870305f : 
        0.09426834f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchMethod_Tree_15_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0870305f : 
        0.09426834f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class SearchMethod_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchMethod_Tree_16_class_0.score0(fdata);
    preds[2] += SearchMethod_Tree_16_class_1.score0(fdata);
    preds[3] += SearchMethod_Tree_16_class_2.score0(fdata);
    preds[4] += SearchMethod_Tree_16_class_3.score0(fdata);
    preds[5] += SearchMethod_Tree_16_class_4.score0(fdata);
    preds[6] += SearchMethod_Tree_16_class_5.score0(fdata);
    preds[7] += SearchMethod_Tree_16_class_6.score0(fdata);
  }
}
class SearchMethod_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086826414f : 
        0.092849955f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class SearchMethod_Tree_16_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086826414f : 
        0.092849955f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchMethod_Tree_16_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086826414f : 
        0.092849955f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}

class SearchMethod_Tree_16_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086826414f : 
        0.092849955f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchMethod_Tree_16_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086826414f : 
        0.092849955f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 0, 0};
}

class SearchMethod_Tree_16_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086826414f : 
        0.092849955f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchMethod_Tree_16_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086826414f : 
        0.092849955f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class SearchMethod_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchMethod_Tree_17_class_0.score0(fdata);
    preds[2] += SearchMethod_Tree_17_class_1.score0(fdata);
    preds[3] += SearchMethod_Tree_17_class_2.score0(fdata);
    preds[4] += SearchMethod_Tree_17_class_3.score0(fdata);
    preds[5] += SearchMethod_Tree_17_class_4.score0(fdata);
    preds[6] += SearchMethod_Tree_17_class_5.score0(fdata);
    preds[7] += SearchMethod_Tree_17_class_6.score0(fdata);
  }
}
class SearchMethod_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08665353f : 
        0.09167643f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class SearchMethod_Tree_17_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08665353f : 
        0.09167643f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchMethod_Tree_17_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08665353f : 
        0.09167643f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}

class SearchMethod_Tree_17_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08665353f : 
        0.09167643f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchMethod_Tree_17_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08665353f : 
        0.09167643f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 0, 0};
}

class SearchMethod_Tree_17_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08665353f : 
        0.09167643f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchMethod_Tree_17_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08665353f : 
        0.09167643f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class SearchMethod_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchMethod_Tree_18_class_0.score0(fdata);
    preds[2] += SearchMethod_Tree_18_class_1.score0(fdata);
    preds[3] += SearchMethod_Tree_18_class_2.score0(fdata);
    preds[4] += SearchMethod_Tree_18_class_3.score0(fdata);
    preds[5] += SearchMethod_Tree_18_class_4.score0(fdata);
    preds[6] += SearchMethod_Tree_18_class_5.score0(fdata);
    preds[7] += SearchMethod_Tree_18_class_6.score0(fdata);
  }
}
class SearchMethod_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086507216f : 
        0.09070261f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class SearchMethod_Tree_18_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086507216f : 
        0.09070261f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchMethod_Tree_18_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086507216f : 
        0.09070261f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}

class SearchMethod_Tree_18_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086507216f : 
        0.09070261f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchMethod_Tree_18_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086507216f : 
        0.09070261f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 0, 0};
}

class SearchMethod_Tree_18_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086507216f : 
        0.09070261f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchMethod_Tree_18_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086507216f : 
        0.09070261f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class SearchMethod_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchMethod_Tree_19_class_0.score0(fdata);
    preds[2] += SearchMethod_Tree_19_class_1.score0(fdata);
    preds[3] += SearchMethod_Tree_19_class_2.score0(fdata);
    preds[4] += SearchMethod_Tree_19_class_3.score0(fdata);
    preds[5] += SearchMethod_Tree_19_class_4.score0(fdata);
    preds[6] += SearchMethod_Tree_19_class_5.score0(fdata);
    preds[7] += SearchMethod_Tree_19_class_6.score0(fdata);
  }
}
class SearchMethod_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08638348f : 
        0.08989252f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class SearchMethod_Tree_19_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08638348f : 
        0.08989252f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchMethod_Tree_19_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08638348f : 
        0.08989252f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}

class SearchMethod_Tree_19_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08638348f : 
        0.08989252f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchMethod_Tree_19_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08638348f : 
        0.08989252f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 0, 0};
}

class SearchMethod_Tree_19_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08638348f : 
        0.08989252f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchMethod_Tree_19_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08638348f : 
        0.08989252f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class SearchMethod_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchMethod_Tree_20_class_0.score0(fdata);
    preds[2] += SearchMethod_Tree_20_class_1.score0(fdata);
    preds[3] += SearchMethod_Tree_20_class_2.score0(fdata);
    preds[4] += SearchMethod_Tree_20_class_3.score0(fdata);
    preds[5] += SearchMethod_Tree_20_class_4.score0(fdata);
    preds[6] += SearchMethod_Tree_20_class_5.score0(fdata);
    preds[7] += SearchMethod_Tree_20_class_6.score0(fdata);
  }
}
class SearchMethod_Tree_20_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086278886f : 
        0.08921727f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class SearchMethod_Tree_20_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086278886f : 
        0.08921727f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchMethod_Tree_20_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086278886f : 
        0.08921727f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}

class SearchMethod_Tree_20_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086278886f : 
        0.08921727f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchMethod_Tree_20_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086278886f : 
        0.08921727f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 0, 0};
}

class SearchMethod_Tree_20_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086278886f : 
        0.08921727f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchMethod_Tree_20_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086278886f : 
        0.08921727f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class SearchMethod_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchMethod_Tree_21_class_0.score0(fdata);
    preds[2] += SearchMethod_Tree_21_class_1.score0(fdata);
    preds[3] += SearchMethod_Tree_21_class_2.score0(fdata);
    preds[4] += SearchMethod_Tree_21_class_3.score0(fdata);
    preds[5] += SearchMethod_Tree_21_class_4.score0(fdata);
    preds[6] += SearchMethod_Tree_21_class_5.score0(fdata);
    preds[7] += SearchMethod_Tree_21_class_6.score0(fdata);
  }
}
class SearchMethod_Tree_21_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08619054f : 
        0.08865343f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class SearchMethod_Tree_21_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08619054f : 
        0.08865343f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchMethod_Tree_21_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08619054f : 
        0.08865343f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}

class SearchMethod_Tree_21_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08619054f : 
        0.08865343f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchMethod_Tree_21_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08619054f : 
        0.08865343f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 0, 0};
}

class SearchMethod_Tree_21_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08619054f : 
        0.08865343f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchMethod_Tree_21_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08619054f : 
        0.08865343f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class SearchMethod_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchMethod_Tree_22_class_0.score0(fdata);
    preds[2] += SearchMethod_Tree_22_class_1.score0(fdata);
    preds[3] += SearchMethod_Tree_22_class_2.score0(fdata);
    preds[4] += SearchMethod_Tree_22_class_3.score0(fdata);
    preds[5] += SearchMethod_Tree_22_class_4.score0(fdata);
    preds[6] += SearchMethod_Tree_22_class_5.score0(fdata);
    preds[7] += SearchMethod_Tree_22_class_6.score0(fdata);
  }
}
class SearchMethod_Tree_22_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08611593f : 
        0.08818196f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class SearchMethod_Tree_22_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08611593f : 
        0.08818196f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchMethod_Tree_22_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08611593f : 
        0.08818196f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}

class SearchMethod_Tree_22_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08611593f : 
        0.08818196f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchMethod_Tree_22_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08611593f : 
        0.08818196f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 0, 0};
}

class SearchMethod_Tree_22_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08611593f : 
        0.08818196f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchMethod_Tree_22_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08611593f : 
        0.08818196f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class SearchMethod_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchMethod_Tree_23_class_0.score0(fdata);
    preds[2] += SearchMethod_Tree_23_class_1.score0(fdata);
    preds[3] += SearchMethod_Tree_23_class_2.score0(fdata);
    preds[4] += SearchMethod_Tree_23_class_3.score0(fdata);
    preds[5] += SearchMethod_Tree_23_class_4.score0(fdata);
    preds[6] += SearchMethod_Tree_23_class_5.score0(fdata);
    preds[7] += SearchMethod_Tree_23_class_6.score0(fdata);
  }
}
class SearchMethod_Tree_23_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086052954f : 
        0.08778724f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class SearchMethod_Tree_23_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086052954f : 
        0.08778724f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchMethod_Tree_23_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086052954f : 
        0.08778724f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}

class SearchMethod_Tree_23_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086052954f : 
        0.08778724f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchMethod_Tree_23_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086052954f : 
        0.08778724f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 0, 0};
}

class SearchMethod_Tree_23_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086052954f : 
        0.08778724f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchMethod_Tree_23_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086052954f : 
        0.08778724f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class SearchMethod_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchMethod_Tree_24_class_0.score0(fdata);
    preds[2] += SearchMethod_Tree_24_class_1.score0(fdata);
    preds[3] += SearchMethod_Tree_24_class_2.score0(fdata);
    preds[4] += SearchMethod_Tree_24_class_3.score0(fdata);
    preds[5] += SearchMethod_Tree_24_class_4.score0(fdata);
    preds[6] += SearchMethod_Tree_24_class_5.score0(fdata);
    preds[7] += SearchMethod_Tree_24_class_6.score0(fdata);
  }
}
class SearchMethod_Tree_24_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08599981f : 
        0.087456465f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class SearchMethod_Tree_24_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08599981f : 
        0.087456465f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchMethod_Tree_24_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08599981f : 
        0.087456465f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}

class SearchMethod_Tree_24_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08599981f : 
        0.087456465f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchMethod_Tree_24_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08599981f : 
        0.087456465f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 0, 0};
}

class SearchMethod_Tree_24_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08599981f : 
        0.087456465f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchMethod_Tree_24_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08599981f : 
        0.087456465f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class SearchMethod_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchMethod_Tree_25_class_0.score0(fdata);
    preds[2] += SearchMethod_Tree_25_class_1.score0(fdata);
    preds[3] += SearchMethod_Tree_25_class_2.score0(fdata);
    preds[4] += SearchMethod_Tree_25_class_3.score0(fdata);
    preds[5] += SearchMethod_Tree_25_class_4.score0(fdata);
    preds[6] += SearchMethod_Tree_25_class_5.score0(fdata);
    preds[7] += SearchMethod_Tree_25_class_6.score0(fdata);
  }
}
class SearchMethod_Tree_25_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08595498f : 
        0.08717903f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class SearchMethod_Tree_25_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08595498f : 
        0.08717903f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchMethod_Tree_25_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08595498f : 
        0.08717903f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}

class SearchMethod_Tree_25_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08595498f : 
        0.08717903f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchMethod_Tree_25_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08595498f : 
        0.08717903f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 0, 0};
}

class SearchMethod_Tree_25_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08595498f : 
        0.08717903f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchMethod_Tree_25_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08595498f : 
        0.08717903f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class SearchMethod_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchMethod_Tree_26_class_0.score0(fdata);
    preds[2] += SearchMethod_Tree_26_class_1.score0(fdata);
    preds[3] += SearchMethod_Tree_26_class_2.score0(fdata);
    preds[4] += SearchMethod_Tree_26_class_3.score0(fdata);
    preds[5] += SearchMethod_Tree_26_class_4.score0(fdata);
    preds[6] += SearchMethod_Tree_26_class_5.score0(fdata);
    preds[7] += SearchMethod_Tree_26_class_6.score0(fdata);
  }
}
class SearchMethod_Tree_26_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08591717f : 
        0.086946175f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class SearchMethod_Tree_26_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08591717f : 
        0.086946175f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchMethod_Tree_26_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08591717f : 
        0.086946175f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}

class SearchMethod_Tree_26_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08591717f : 
        0.086946175f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchMethod_Tree_26_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08591717f : 
        0.086946175f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 0, 0};
}

class SearchMethod_Tree_26_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08591717f : 
        0.086946175f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchMethod_Tree_26_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08591717f : 
        0.086946175f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class SearchMethod_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchMethod_Tree_27_class_0.score0(fdata);
    preds[2] += SearchMethod_Tree_27_class_1.score0(fdata);
    preds[3] += SearchMethod_Tree_27_class_2.score0(fdata);
    preds[4] += SearchMethod_Tree_27_class_3.score0(fdata);
    preds[5] += SearchMethod_Tree_27_class_4.score0(fdata);
    preds[6] += SearchMethod_Tree_27_class_5.score0(fdata);
    preds[7] += SearchMethod_Tree_27_class_6.score0(fdata);
  }
}
class SearchMethod_Tree_27_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08588529f : 
        0.08675061f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class SearchMethod_Tree_27_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08588529f : 
        0.08675061f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchMethod_Tree_27_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08588529f : 
        0.08675061f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}

class SearchMethod_Tree_27_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08588529f : 
        0.08675061f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchMethod_Tree_27_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08588529f : 
        0.08675061f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 0, 0};
}

class SearchMethod_Tree_27_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08588529f : 
        0.08675061f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchMethod_Tree_27_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08588529f : 
        0.08675061f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class SearchMethod_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchMethod_Tree_28_class_0.score0(fdata);
    preds[2] += SearchMethod_Tree_28_class_1.score0(fdata);
    preds[3] += SearchMethod_Tree_28_class_2.score0(fdata);
    preds[4] += SearchMethod_Tree_28_class_3.score0(fdata);
    preds[5] += SearchMethod_Tree_28_class_4.score0(fdata);
    preds[6] += SearchMethod_Tree_28_class_5.score0(fdata);
    preds[7] += SearchMethod_Tree_28_class_6.score0(fdata);
  }
}
class SearchMethod_Tree_28_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0858584f : 
        0.0865863f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class SearchMethod_Tree_28_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0858584f : 
        0.0865863f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchMethod_Tree_28_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0858584f : 
        0.0865863f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}

class SearchMethod_Tree_28_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0858584f : 
        0.0865863f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchMethod_Tree_28_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0858584f : 
        0.0865863f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 0, 0};
}

class SearchMethod_Tree_28_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0858584f : 
        0.0865863f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchMethod_Tree_28_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0858584f : 
        0.0865863f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class SearchMethod_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchMethod_Tree_29_class_0.score0(fdata);
    preds[2] += SearchMethod_Tree_29_class_1.score0(fdata);
    preds[3] += SearchMethod_Tree_29_class_2.score0(fdata);
    preds[4] += SearchMethod_Tree_29_class_3.score0(fdata);
    preds[5] += SearchMethod_Tree_29_class_4.score0(fdata);
    preds[6] += SearchMethod_Tree_29_class_5.score0(fdata);
    preds[7] += SearchMethod_Tree_29_class_6.score0(fdata);
  }
}
class SearchMethod_Tree_29_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08583573f : 
        0.08644818f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class SearchMethod_Tree_29_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08583573f : 
        0.08644818f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchMethod_Tree_29_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08583573f : 
        0.08644818f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}

class SearchMethod_Tree_29_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08583573f : 
        0.08644818f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchMethod_Tree_29_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08583573f : 
        0.08644818f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 0, 0};
}

class SearchMethod_Tree_29_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08583573f : 
        0.08644818f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchMethod_Tree_29_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08583573f : 
        0.08644818f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


