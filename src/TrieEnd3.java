/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2020-10-07T19:07:21.369-04:00
  3.24.0.5
  
  Standalone prediction code with sample test data for GBMModel named TrieEnd3

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://10.0.0.38:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://10.0.0.38:54321/3/Models.java/TrieEnd3 > TrieEnd3.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m TrieEnd3.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="TrieEnd3", algorithm="gbm")
public class TrieEnd3 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Binomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 1; }
  public int nclasses() { return 2; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_TrieEnd3.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 2;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* nodeIdIn */ TrieEnd3_ColInfo_0.VALUES,
    /* isEndOfWordOut */ TrieEnd3_ColInfo_1.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.30997304582210244,0.6900269541778976};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {0.30997304582210244,0.6900269541778976};

  public TrieEnd3() { super(NAMES,DOMAINS,"isEndOfWordOut"); }
  public String getUUID() { return Long.toString(8661118568273618504L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    TrieEnd3_Forest_0.score0(data,preds);
    TrieEnd3_Forest_1.score0(data,preds);
    TrieEnd3_Forest_2.score0(data,preds);
    TrieEnd3_Forest_3.score0(data,preds);
    TrieEnd3_Forest_4.score0(data,preds);
    TrieEnd3_Forest_5.score0(data,preds);
    TrieEnd3_Forest_6.score0(data,preds);
    TrieEnd3_Forest_7.score0(data,preds);
    TrieEnd3_Forest_8.score0(data,preds);
    TrieEnd3_Forest_9.score0(data,preds);
    TrieEnd3_Forest_10.score0(data,preds);
    TrieEnd3_Forest_11.score0(data,preds);
    TrieEnd3_Forest_12.score0(data,preds);
    TrieEnd3_Forest_13.score0(data,preds);
    TrieEnd3_Forest_14.score0(data,preds);
    TrieEnd3_Forest_15.score0(data,preds);
    TrieEnd3_Forest_16.score0(data,preds);
    TrieEnd3_Forest_17.score0(data,preds);
    TrieEnd3_Forest_18.score0(data,preds);
    TrieEnd3_Forest_19.score0(data,preds);
    TrieEnd3_Forest_20.score0(data,preds);
    TrieEnd3_Forest_21.score0(data,preds);
    TrieEnd3_Forest_22.score0(data,preds);
    TrieEnd3_Forest_23.score0(data,preds);
    TrieEnd3_Forest_24.score0(data,preds);
    TrieEnd3_Forest_25.score0(data,preds);
    TrieEnd3_Forest_26.score0(data,preds);
    TrieEnd3_Forest_27.score0(data,preds);
    TrieEnd3_Forest_28.score0(data,preds);
    TrieEnd3_Forest_29.score0(data,preds);
    preds[2] = preds[1] + 0.8002453161163127;
    preds[2] = 1./(1. + Math.min(1e19, Math.exp(-(preds[2]))));
    preds[1] = 1.0-preds[2];
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.9848460455408908);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_TrieEnd3 implements java.io.Serializable {
  public static final String[] VALUES = new String[1];
  static {
    NamesHolder_TrieEnd3_0.fill(VALUES);
  }
  static final class NamesHolder_TrieEnd3_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "nodeIdIn";
    }
  }
}
// The class representing column nodeIdIn
class TrieEnd3_ColInfo_0 implements java.io.Serializable {
  public static final String[] VALUES = new String[371];
  static {
    TrieEnd3_ColInfo_0_0.fill(VALUES);
  }
  static final class TrieEnd3_ColInfo_0_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "10";
      sa[2] = "100";
      sa[3] = "102";
      sa[4] = "104";
      sa[5] = "106";
      sa[6] = "108";
      sa[7] = "110";
      sa[8] = "112";
      sa[9] = "114";
      sa[10] = "116";
      sa[11] = "118";
      sa[12] = "12";
      sa[13] = "120";
      sa[14] = "122";
      sa[15] = "124";
      sa[16] = "126";
      sa[17] = "128";
      sa[18] = "130";
      sa[19] = "132";
      sa[20] = "134";
      sa[21] = "136";
      sa[22] = "138";
      sa[23] = "14";
      sa[24] = "140";
      sa[25] = "142";
      sa[26] = "144";
      sa[27] = "146";
      sa[28] = "148";
      sa[29] = "150";
      sa[30] = "152";
      sa[31] = "154";
      sa[32] = "156";
      sa[33] = "158";
      sa[34] = "16";
      sa[35] = "160";
      sa[36] = "162";
      sa[37] = "164";
      sa[38] = "166";
      sa[39] = "168";
      sa[40] = "170";
      sa[41] = "172";
      sa[42] = "174";
      sa[43] = "176";
      sa[44] = "178";
      sa[45] = "18";
      sa[46] = "180";
      sa[47] = "182";
      sa[48] = "184";
      sa[49] = "186";
      sa[50] = "188";
      sa[51] = "190";
      sa[52] = "192";
      sa[53] = "194";
      sa[54] = "196";
      sa[55] = "198";
      sa[56] = "2";
      sa[57] = "20";
      sa[58] = "200";
      sa[59] = "202";
      sa[60] = "204";
      sa[61] = "206";
      sa[62] = "208";
      sa[63] = "210";
      sa[64] = "212";
      sa[65] = "214";
      sa[66] = "216";
      sa[67] = "218";
      sa[68] = "22";
      sa[69] = "220";
      sa[70] = "222";
      sa[71] = "224";
      sa[72] = "226";
      sa[73] = "228";
      sa[74] = "230";
      sa[75] = "232";
      sa[76] = "234";
      sa[77] = "236";
      sa[78] = "238";
      sa[79] = "24";
      sa[80] = "240";
      sa[81] = "242";
      sa[82] = "244";
      sa[83] = "246";
      sa[84] = "248";
      sa[85] = "250";
      sa[86] = "252";
      sa[87] = "254";
      sa[88] = "256";
      sa[89] = "258";
      sa[90] = "26";
      sa[91] = "260";
      sa[92] = "262";
      sa[93] = "264";
      sa[94] = "266";
      sa[95] = "268";
      sa[96] = "270";
      sa[97] = "272";
      sa[98] = "274";
      sa[99] = "276";
      sa[100] = "278";
      sa[101] = "28";
      sa[102] = "280";
      sa[103] = "282";
      sa[104] = "284";
      sa[105] = "286";
      sa[106] = "288";
      sa[107] = "290";
      sa[108] = "292";
      sa[109] = "294";
      sa[110] = "296";
      sa[111] = "298";
      sa[112] = "30";
      sa[113] = "300";
      sa[114] = "302";
      sa[115] = "304";
      sa[116] = "306";
      sa[117] = "308";
      sa[118] = "310";
      sa[119] = "312";
      sa[120] = "314";
      sa[121] = "316";
      sa[122] = "318";
      sa[123] = "32";
      sa[124] = "320";
      sa[125] = "322";
      sa[126] = "324";
      sa[127] = "326";
      sa[128] = "328";
      sa[129] = "330";
      sa[130] = "332";
      sa[131] = "334";
      sa[132] = "336";
      sa[133] = "338";
      sa[134] = "34";
      sa[135] = "340";
      sa[136] = "342";
      sa[137] = "344";
      sa[138] = "346";
      sa[139] = "348";
      sa[140] = "350";
      sa[141] = "352";
      sa[142] = "354";
      sa[143] = "356";
      sa[144] = "358";
      sa[145] = "36";
      sa[146] = "360";
      sa[147] = "362";
      sa[148] = "364";
      sa[149] = "366";
      sa[150] = "368";
      sa[151] = "370";
      sa[152] = "372";
      sa[153] = "374";
      sa[154] = "376";
      sa[155] = "378";
      sa[156] = "38";
      sa[157] = "380";
      sa[158] = "382";
      sa[159] = "384";
      sa[160] = "386";
      sa[161] = "388";
      sa[162] = "390";
      sa[163] = "392";
      sa[164] = "394";
      sa[165] = "396";
      sa[166] = "398";
      sa[167] = "4";
      sa[168] = "40";
      sa[169] = "400";
      sa[170] = "402";
      sa[171] = "404";
      sa[172] = "406";
      sa[173] = "408";
      sa[174] = "410";
      sa[175] = "412";
      sa[176] = "414";
      sa[177] = "416";
      sa[178] = "418";
      sa[179] = "42";
      sa[180] = "420";
      sa[181] = "422";
      sa[182] = "424";
      sa[183] = "426";
      sa[184] = "428";
      sa[185] = "430";
      sa[186] = "432";
      sa[187] = "434";
      sa[188] = "436";
      sa[189] = "438";
      sa[190] = "44";
      sa[191] = "440";
      sa[192] = "442";
      sa[193] = "444";
      sa[194] = "446";
      sa[195] = "448";
      sa[196] = "450";
      sa[197] = "452";
      sa[198] = "454";
      sa[199] = "456";
      sa[200] = "458";
      sa[201] = "46";
      sa[202] = "460";
      sa[203] = "462";
      sa[204] = "464";
      sa[205] = "466";
      sa[206] = "468";
      sa[207] = "470";
      sa[208] = "472";
      sa[209] = "474";
      sa[210] = "476";
      sa[211] = "478";
      sa[212] = "48";
      sa[213] = "480";
      sa[214] = "482";
      sa[215] = "484";
      sa[216] = "486";
      sa[217] = "488";
      sa[218] = "490";
      sa[219] = "492";
      sa[220] = "494";
      sa[221] = "496";
      sa[222] = "498";
      sa[223] = "50";
      sa[224] = "500";
      sa[225] = "502";
      sa[226] = "504";
      sa[227] = "506";
      sa[228] = "508";
      sa[229] = "510";
      sa[230] = "512";
      sa[231] = "514";
      sa[232] = "516";
      sa[233] = "518";
      sa[234] = "52";
      sa[235] = "520";
      sa[236] = "522";
      sa[237] = "524";
      sa[238] = "526";
      sa[239] = "528";
      sa[240] = "530";
      sa[241] = "532";
      sa[242] = "534";
      sa[243] = "536";
      sa[244] = "538";
      sa[245] = "54";
      sa[246] = "540";
      sa[247] = "542";
      sa[248] = "544";
      sa[249] = "546";
      sa[250] = "548";
      sa[251] = "550";
      sa[252] = "552";
      sa[253] = "554";
      sa[254] = "556";
      sa[255] = "558";
      sa[256] = "56";
      sa[257] = "560";
      sa[258] = "562";
      sa[259] = "564";
      sa[260] = "566";
      sa[261] = "568";
      sa[262] = "570";
      sa[263] = "572";
      sa[264] = "574";
      sa[265] = "576";
      sa[266] = "578";
      sa[267] = "58";
      sa[268] = "580";
      sa[269] = "582";
      sa[270] = "584";
      sa[271] = "586";
      sa[272] = "588";
      sa[273] = "590";
      sa[274] = "592";
      sa[275] = "594";
      sa[276] = "596";
      sa[277] = "598";
      sa[278] = "6";
      sa[279] = "60";
      sa[280] = "600";
      sa[281] = "602";
      sa[282] = "604";
      sa[283] = "606";
      sa[284] = "608";
      sa[285] = "610";
      sa[286] = "612";
      sa[287] = "614";
      sa[288] = "616";
      sa[289] = "618";
      sa[290] = "62";
      sa[291] = "620";
      sa[292] = "622";
      sa[293] = "624";
      sa[294] = "626";
      sa[295] = "628";
      sa[296] = "630";
      sa[297] = "632";
      sa[298] = "634";
      sa[299] = "636";
      sa[300] = "638";
      sa[301] = "64";
      sa[302] = "640";
      sa[303] = "642";
      sa[304] = "644";
      sa[305] = "646";
      sa[306] = "648";
      sa[307] = "650";
      sa[308] = "652";
      sa[309] = "654";
      sa[310] = "656";
      sa[311] = "658";
      sa[312] = "66";
      sa[313] = "660";
      sa[314] = "662";
      sa[315] = "664";
      sa[316] = "666";
      sa[317] = "668";
      sa[318] = "670";
      sa[319] = "672";
      sa[320] = "674";
      sa[321] = "676";
      sa[322] = "678";
      sa[323] = "68";
      sa[324] = "680";
      sa[325] = "682";
      sa[326] = "684";
      sa[327] = "686";
      sa[328] = "688";
      sa[329] = "690";
      sa[330] = "692";
      sa[331] = "694";
      sa[332] = "696";
      sa[333] = "698";
      sa[334] = "70";
      sa[335] = "700";
      sa[336] = "702";
      sa[337] = "704";
      sa[338] = "706";
      sa[339] = "708";
      sa[340] = "710";
      sa[341] = "712";
      sa[342] = "714";
      sa[343] = "716";
      sa[344] = "718";
      sa[345] = "72";
      sa[346] = "720";
      sa[347] = "722";
      sa[348] = "724";
      sa[349] = "726";
      sa[350] = "728";
      sa[351] = "730";
      sa[352] = "732";
      sa[353] = "734";
      sa[354] = "736";
      sa[355] = "738";
      sa[356] = "74";
      sa[357] = "76";
      sa[358] = "78";
      sa[359] = "8";
      sa[360] = "80";
      sa[361] = "82";
      sa[362] = "84";
      sa[363] = "86";
      sa[364] = "88";
      sa[365] = "90";
      sa[366] = "92";
      sa[367] = "94";
      sa[368] = "96";
      sa[369] = "98";
      sa[370] = "null";
    }
  }
}
// The class representing column isEndOfWordOut
class TrieEnd3_ColInfo_1 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    TrieEnd3_ColInfo_1_0.fill(VALUES);
  }
  static final class TrieEnd3_ColInfo_1_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "FALSE";
      sa[1] = "TRUE";
    }
  }
}

class TrieEnd3_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd3_Tree_0_class_0.score0(fdata);
  }
}
class TrieEnd3_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(371, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 371, 0, data[0])) ? 
        -0.32260868f : 
        0.14492187f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 1, static init size = 288B
  // {01110111 01001110 10101000 11010101 01100110 10011011 11101110 11111110 01000100 11011011 00111101 10101111 11111001 11101101 10010101 01010101 00110111 01011110 11101101 11011101 01110011 01011010 01001011 01111011 01101110 11110111 01011010 11101011 11011101 10011110 01111101 11111010 01111101 11110111 10111111 01111111 11011101 11011110 11110110 11111111 01111111 11111111 10111011 11111101 10110010 11101011 000}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 114, 21, -85, 102, -39, 119, 127, 34, -37, -68, -11, -97, -73, -87, -86, -20, 122, -73, -69, -50, 90, -46, -34, 118, -17, 90, -41, -69, 121, -66, 95, -66, -17, -3, -2, -69, 123, 111, -1, -2, -1, -35, -65, 77, -41, 0};
}


class TrieEnd3_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd3_Tree_1_class_0.score0(fdata);
  }
}
class TrieEnd3_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(371, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 371, 0, data[0])) ? 
        -0.26122597f : 
        0.13886146f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 1, static init size = 288B
  // {01110111 01001110 10101000 11010101 01100110 10011011 11101110 11111110 01000100 11011011 00111101 10101111 11111001 11101101 10010101 01010101 00110111 01011110 11101101 11011101 01110011 01011010 01001011 01111011 01101110 11110111 01011010 11101011 11011101 10011110 01111101 11111010 01111101 11110111 10111111 01111111 11011101 11011110 11110110 11111111 01111111 11111111 10111011 11111101 10110010 11101011 000}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 114, 21, -85, 102, -39, 119, 127, 34, -37, -68, -11, -97, -73, -87, -86, -20, 122, -73, -69, -50, 90, -46, -34, 118, -17, 90, -41, -69, 121, -66, 95, -66, -17, -3, -2, -69, 123, 111, -1, -2, -1, -35, -65, 77, -41, 0};
}


class TrieEnd3_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd3_Tree_2_class_0.score0(fdata);
  }
}
class TrieEnd3_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(371, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 371, 0, data[0])) ? 
        -0.22416121f : 
        0.13382302f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 1, static init size = 288B
  // {01110111 01001110 10101000 11010101 01100110 10011011 11101110 11111110 01000100 11011011 00111101 10101111 11111001 11101101 10010101 01010101 00110111 01011110 11101101 11011101 01110011 01011010 01001011 01111011 01101110 11110111 01011010 11101011 11011101 10011110 01111101 11111010 01111101 11110111 10111111 01111111 11011101 11011110 11110110 11111111 01111111 11111111 10111011 11111101 10110010 11101011 000}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 114, 21, -85, 102, -39, 119, 127, 34, -37, -68, -11, -97, -73, -87, -86, -20, 122, -73, -69, -50, 90, -46, -34, 118, -17, 90, -41, -69, 121, -66, 95, -66, -17, -3, -2, -69, 123, 111, -1, -2, -1, -35, -65, 77, -41, 0};
}


class TrieEnd3_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd3_Tree_3_class_0.score0(fdata);
  }
}
class TrieEnd3_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(371, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 371, 0, data[0])) ? 
        -0.19922794f : 
        0.12958652f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 1, static init size = 288B
  // {01110111 01001110 10101000 11010101 01100110 10011011 11101110 11111110 01000100 11011011 00111101 10101111 11111001 11101101 10010101 01010101 00110111 01011110 11101101 11011101 01110011 01011010 01001011 01111011 01101110 11110111 01011010 11101011 11011101 10011110 01111101 11111010 01111101 11110111 10111111 01111111 11011101 11011110 11110110 11111111 01111111 11111111 10111011 11111101 10110010 11101011 000}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 114, 21, -85, 102, -39, 119, 127, 34, -37, -68, -11, -97, -73, -87, -86, -20, 122, -73, -69, -50, 90, -46, -34, 118, -17, 90, -41, -69, 121, -66, 95, -66, -17, -3, -2, -69, 123, 111, -1, -2, -1, -35, -65, 77, -41, 0};
}


class TrieEnd3_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd3_Tree_4_class_0.score0(fdata);
  }
}
class TrieEnd3_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(371, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 371, 0, data[0])) ? 
        -0.18130372f : 
        0.12599052f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 1, static init size = 288B
  // {01110111 01001110 10101000 11010101 01100110 10011011 11101110 11111110 01000100 11011011 00111101 10101111 11111001 11101101 10010101 01010101 00110111 01011110 11101101 11011101 01110011 01011010 01001011 01111011 01101110 11110111 01011010 11101011 11011101 10011110 01111101 11111010 01111101 11110111 10111111 01111111 11011101 11011110 11110110 11111111 01111111 11111111 10111011 11111101 10110010 11101011 000}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 114, 21, -85, 102, -39, 119, 127, 34, -37, -68, -11, -97, -73, -87, -86, -20, 122, -73, -69, -50, 90, -46, -34, 118, -17, 90, -41, -69, 121, -66, 95, -66, -17, -3, -2, -69, 123, 111, -1, -2, -1, -35, -65, 77, -41, 0};
}


class TrieEnd3_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd3_Tree_5_class_0.score0(fdata);
  }
}
class TrieEnd3_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(371, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 371, 0, data[0])) ? 
        -0.1678221f : 
        0.12291385f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 1, static init size = 288B
  // {01110111 01001110 10101000 11010101 01100110 10011011 11101110 11111110 01000100 11011011 00111101 10101111 11111001 11101101 10010101 01010101 00110111 01011110 11101101 11011101 01110011 01011010 01001011 01111011 01101110 11110111 01011010 11101011 11011101 10011110 01111101 11111010 01111101 11110111 10111111 01111111 11011101 11011110 11110110 11111111 01111111 11111111 10111011 11111101 10110010 11101011 000}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 114, 21, -85, 102, -39, 119, 127, 34, -37, -68, -11, -97, -73, -87, -86, -20, 122, -73, -69, -50, 90, -46, -34, 118, -17, 90, -41, -69, 121, -66, 95, -66, -17, -3, -2, -69, 123, 111, -1, -2, -1, -35, -65, 77, -41, 0};
}


class TrieEnd3_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd3_Tree_6_class_0.score0(fdata);
  }
}
class TrieEnd3_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(371, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 371, 0, data[0])) ? 
        -0.15734386f : 
        0.120263636f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 1, static init size = 288B
  // {01110111 01001110 10101000 11010101 01100110 10011011 11101110 11111110 01000100 11011011 00111101 10101111 11111001 11101101 10010101 01010101 00110111 01011110 11101101 11011101 01110011 01011010 01001011 01111011 01101110 11110111 01011010 11101011 11011101 10011110 01111101 11111010 01111101 11110111 10111111 01111111 11011101 11011110 11110110 11111111 01111111 11111111 10111011 11111101 10110010 11101011 000}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 114, 21, -85, 102, -39, 119, 127, 34, -37, -68, -11, -97, -73, -87, -86, -20, 122, -73, -69, -50, 90, -46, -34, 118, -17, 90, -41, -69, 121, -66, 95, -66, -17, -3, -2, -69, 123, 111, -1, -2, -1, -35, -65, 77, -41, 0};
}


class TrieEnd3_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd3_Tree_7_class_0.score0(fdata);
  }
}
class TrieEnd3_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(371, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 371, 0, data[0])) ? 
        -0.14899519f : 
        0.117967494f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 1, static init size = 288B
  // {01110111 01001110 10101000 11010101 01100110 10011011 11101110 11111110 01000100 11011011 00111101 10101111 11111001 11101101 10010101 01010101 00110111 01011110 11101101 11011101 01110011 01011010 01001011 01111011 01101110 11110111 01011010 11101011 11011101 10011110 01111101 11111010 01111101 11110111 10111111 01111111 11011101 11011110 11110110 11111111 01111111 11111111 10111011 11111101 10110010 11101011 000}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 114, 21, -85, 102, -39, 119, 127, 34, -37, -68, -11, -97, -73, -87, -86, -20, 122, -73, -69, -50, 90, -46, -34, 118, -17, 90, -41, -69, 121, -66, 95, -66, -17, -3, -2, -69, 123, 111, -1, -2, -1, -35, -65, 77, -41, 0};
}


class TrieEnd3_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd3_Tree_8_class_0.score0(fdata);
  }
}
class TrieEnd3_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(371, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 371, 0, data[0])) ? 
        -0.14221294f : 
        0.11596816f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 1, static init size = 288B
  // {01110111 01001110 10101000 11010101 01100110 10011011 11101110 11111110 01000100 11011011 00111101 10101111 11111001 11101101 10010101 01010101 00110111 01011110 11101101 11011101 01110011 01011010 01001011 01111011 01101110 11110111 01011010 11101011 11011101 10011110 01111101 11111010 01111101 11110111 10111111 01111111 11011101 11011110 11110110 11111111 01111111 11111111 10111011 11111101 10110010 11101011 000}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 114, 21, -85, 102, -39, 119, 127, 34, -37, -68, -11, -97, -73, -87, -86, -20, 122, -73, -69, -50, 90, -46, -34, 118, -17, 90, -41, -69, 121, -66, 95, -66, -17, -3, -2, -69, 123, 111, -1, -2, -1, -35, -65, 77, -41, 0};
}


class TrieEnd3_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd3_Tree_9_class_0.score0(fdata);
  }
}
class TrieEnd3_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(371, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 371, 0, data[0])) ? 
        -0.13661705f : 
        0.1142197f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 1, static init size = 288B
  // {01110111 01001110 10101000 11010101 01100110 10011011 11101110 11111110 01000100 11011011 00111101 10101111 11111001 11101101 10010101 01010101 00110111 01011110 11101101 11011101 01110011 01011010 01001011 01111011 01101110 11110111 01011010 11101011 11011101 10011110 01111101 11111010 01111101 11110111 10111111 01111111 11011101 11011110 11110110 11111111 01111111 11111111 10111011 11111101 10110010 11101011 000}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 114, 21, -85, 102, -39, 119, 127, 34, -37, -68, -11, -97, -73, -87, -86, -20, 122, -73, -69, -50, 90, -46, -34, 118, -17, 90, -41, -69, 121, -66, 95, -66, -17, -3, -2, -69, 123, 111, -1, -2, -1, -35, -65, 77, -41, 0};
}


class TrieEnd3_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd3_Tree_10_class_0.score0(fdata);
  }
}
class TrieEnd3_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(371, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 371, 0, data[0])) ? 
        -0.1319412f : 
        0.11268485f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 1, static init size = 288B
  // {01110111 01001110 10101000 11010101 01100110 10011011 11101110 11111110 01000100 11011011 00111101 10101111 11111001 11101101 10010101 01010101 00110111 01011110 11101101 11011101 01110011 01011010 01001011 01111011 01101110 11110111 01011010 11101011 11011101 10011110 01111101 11111010 01111101 11110111 10111111 01111111 11011101 11011110 11110110 11111111 01111111 11111111 10111011 11111101 10110010 11101011 000}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 114, 21, -85, 102, -39, 119, 127, 34, -37, -68, -11, -97, -73, -87, -86, -20, 122, -73, -69, -50, 90, -46, -34, 118, -17, 90, -41, -69, 121, -66, 95, -66, -17, -3, -2, -69, 123, 111, -1, -2, -1, -35, -65, 77, -41, 0};
}


class TrieEnd3_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd3_Tree_11_class_0.score0(fdata);
  }
}
class TrieEnd3_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(371, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 371, 0, data[0])) ? 
        -0.12799303f : 
        0.11133306f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 1, static init size = 288B
  // {01110111 01001110 10101000 11010101 01100110 10011011 11101110 11111110 01000100 11011011 00111101 10101111 11111001 11101101 10010101 01010101 00110111 01011110 11101101 11011101 01110011 01011010 01001011 01111011 01101110 11110111 01011010 11101011 11011101 10011110 01111101 11111010 01111101 11110111 10111111 01111111 11011101 11011110 11110110 11111111 01111111 11111111 10111011 11111101 10110010 11101011 000}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 114, 21, -85, 102, -39, 119, 127, 34, -37, -68, -11, -97, -73, -87, -86, -20, 122, -73, -69, -50, 90, -46, -34, 118, -17, 90, -41, -69, 121, -66, 95, -66, -17, -3, -2, -69, 123, 111, -1, -2, -1, -35, -65, 77, -41, 0};
}


class TrieEnd3_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd3_Tree_12_class_0.score0(fdata);
  }
}
class TrieEnd3_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(371, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 371, 0, data[0])) ? 
        -0.12462994f : 
        0.11013901f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 1, static init size = 288B
  // {01110111 01001110 10101000 11010101 01100110 10011011 11101110 11111110 01000100 11011011 00111101 10101111 11111001 11101101 10010101 01010101 00110111 01011110 11101101 11011101 01110011 01011010 01001011 01111011 01101110 11110111 01011010 11101011 11011101 10011110 01111101 11111010 01111101 11110111 10111111 01111111 11011101 11011110 11110110 11111111 01111111 11111111 10111011 11111101 10110010 11101011 000}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 114, 21, -85, 102, -39, 119, 127, 34, -37, -68, -11, -97, -73, -87, -86, -20, 122, -73, -69, -50, 90, -46, -34, 118, -17, 90, -41, -69, 121, -66, 95, -66, -17, -3, -2, -69, 123, 111, -1, -2, -1, -35, -65, 77, -41, 0};
}


class TrieEnd3_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd3_Tree_13_class_0.score0(fdata);
  }
}
class TrieEnd3_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(371, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 371, 0, data[0])) ? 
        -0.12174389f : 
        0.10908161f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 1, static init size = 288B
  // {01110111 01001110 10101000 11010101 01100110 10011011 11101110 11111110 01000100 11011011 00111101 10101111 11111001 11101101 10010101 01010101 00110111 01011110 11101101 11011101 01110011 01011010 01001011 01111011 01101110 11110111 01011010 11101011 11011101 10011110 01111101 11111010 01111101 11110111 10111111 01111111 11011101 11011110 11110110 11111111 01111111 11111111 10111011 11111101 10110010 11101011 000}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 114, 21, -85, 102, -39, 119, 127, 34, -37, -68, -11, -97, -73, -87, -86, -20, 122, -73, -69, -50, 90, -46, -34, 118, -17, 90, -41, -69, 121, -66, 95, -66, -17, -3, -2, -69, 123, 111, -1, -2, -1, -35, -65, 77, -41, 0};
}


class TrieEnd3_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd3_Tree_14_class_0.score0(fdata);
  }
}
class TrieEnd3_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(371, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 371, 0, data[0])) ? 
        -0.1192515f : 
        0.10814309f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 1, static init size = 288B
  // {01110111 01001110 10101000 11010101 01100110 10011011 11101110 11111110 01000100 11011011 00111101 10101111 11111001 11101101 10010101 01010101 00110111 01011110 11101101 11011101 01110011 01011010 01001011 01111011 01101110 11110111 01011010 11101011 11011101 10011110 01111101 11111010 01111101 11110111 10111111 01111111 11011101 11011110 11110110 11111111 01111111 11111111 10111011 11111101 10110010 11101011 000}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 114, 21, -85, 102, -39, 119, 127, 34, -37, -68, -11, -97, -73, -87, -86, -20, 122, -73, -69, -50, 90, -46, -34, 118, -17, 90, -41, -69, 121, -66, 95, -66, -17, -3, -2, -69, 123, 111, -1, -2, -1, -35, -65, 77, -41, 0};
}


class TrieEnd3_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd3_Tree_15_class_0.score0(fdata);
  }
}
class TrieEnd3_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(371, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 371, 0, data[0])) ? 
        -0.11708733f : 
        0.10730842f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 1, static init size = 288B
  // {01110111 01001110 10101000 11010101 01100110 10011011 11101110 11111110 01000100 11011011 00111101 10101111 11111001 11101101 10010101 01010101 00110111 01011110 11101101 11011101 01110011 01011010 01001011 01111011 01101110 11110111 01011010 11101011 11011101 10011110 01111101 11111010 01111101 11110111 10111111 01111111 11011101 11011110 11110110 11111111 01111111 11111111 10111011 11111101 10110010 11101011 000}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 114, 21, -85, 102, -39, 119, 127, 34, -37, -68, -11, -97, -73, -87, -86, -20, 122, -73, -69, -50, 90, -46, -34, 118, -17, 90, -41, -69, 121, -66, 95, -66, -17, -3, -2, -69, 123, 111, -1, -2, -1, -35, -65, 77, -41, 0};
}


class TrieEnd3_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd3_Tree_16_class_0.score0(fdata);
  }
}
class TrieEnd3_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(371, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 371, 0, data[0])) ? 
        -0.115199305f : 
        0.106564775f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 1, static init size = 288B
  // {01110111 01001110 10101000 11010101 01100110 10011011 11101110 11111110 01000100 11011011 00111101 10101111 11111001 11101101 10010101 01010101 00110111 01011110 11101101 11011101 01110011 01011010 01001011 01111011 01101110 11110111 01011010 11101011 11011101 10011110 01111101 11111010 01111101 11110111 10111111 01111111 11011101 11011110 11110110 11111111 01111111 11111111 10111011 11111101 10110010 11101011 000}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 114, 21, -85, 102, -39, 119, 127, 34, -37, -68, -11, -97, -73, -87, -86, -20, 122, -73, -69, -50, 90, -46, -34, 118, -17, 90, -41, -69, 121, -66, 95, -66, -17, -3, -2, -69, 123, 111, -1, -2, -1, -35, -65, 77, -41, 0};
}


class TrieEnd3_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd3_Tree_17_class_0.score0(fdata);
  }
}
class TrieEnd3_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(371, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 371, 0, data[0])) ? 
        -0.11354545f : 
        0.10590119f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 1, static init size = 288B
  // {01110111 01001110 10101000 11010101 01100110 10011011 11101110 11111110 01000100 11011011 00111101 10101111 11111001 11101101 10010101 01010101 00110111 01011110 11101101 11011101 01110011 01011010 01001011 01111011 01101110 11110111 01011010 11101011 11011101 10011110 01111101 11111010 01111101 11110111 10111111 01111111 11011101 11011110 11110110 11111111 01111111 11111111 10111011 11111101 10110010 11101011 000}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 114, 21, -85, 102, -39, 119, 127, 34, -37, -68, -11, -97, -73, -87, -86, -20, 122, -73, -69, -50, 90, -46, -34, 118, -17, 90, -41, -69, 121, -66, 95, -66, -17, -3, -2, -69, 123, 111, -1, -2, -1, -35, -65, 77, -41, 0};
}


class TrieEnd3_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd3_Tree_18_class_0.score0(fdata);
  }
}
class TrieEnd3_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(371, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 371, 0, data[0])) ? 
        -0.11209153f : 
        0.1053082f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 1, static init size = 288B
  // {01110111 01001110 10101000 11010101 01100110 10011011 11101110 11111110 01000100 11011011 00111101 10101111 11111001 11101101 10010101 01010101 00110111 01011110 11101101 11011101 01110011 01011010 01001011 01111011 01101110 11110111 01011010 11101011 11011101 10011110 01111101 11111010 01111101 11110111 10111111 01111111 11011101 11011110 11110110 11111111 01111111 11111111 10111011 11111101 10110010 11101011 000}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 114, 21, -85, 102, -39, 119, 127, 34, -37, -68, -11, -97, -73, -87, -86, -20, 122, -73, -69, -50, 90, -46, -34, 118, -17, 90, -41, -69, 121, -66, 95, -66, -17, -3, -2, -69, 123, 111, -1, -2, -1, -35, -65, 77, -41, 0};
}


class TrieEnd3_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd3_Tree_19_class_0.score0(fdata);
  }
}
class TrieEnd3_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(371, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 371, 0, data[0])) ? 
        -0.11080937f : 
        0.10477763f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 1, static init size = 288B
  // {01110111 01001110 10101000 11010101 01100110 10011011 11101110 11111110 01000100 11011011 00111101 10101111 11111001 11101101 10010101 01010101 00110111 01011110 11101101 11011101 01110011 01011010 01001011 01111011 01101110 11110111 01011010 11101011 11011101 10011110 01111101 11111010 01111101 11110111 10111111 01111111 11011101 11011110 11110110 11111111 01111111 11111111 10111011 11111101 10110010 11101011 000}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 114, 21, -85, 102, -39, 119, 127, 34, -37, -68, -11, -97, -73, -87, -86, -20, 122, -73, -69, -50, 90, -46, -34, 118, -17, 90, -41, -69, 121, -66, 95, -66, -17, -3, -2, -69, 123, 111, -1, -2, -1, -35, -65, 77, -41, 0};
}


class TrieEnd3_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd3_Tree_20_class_0.score0(fdata);
  }
}
class TrieEnd3_Tree_20_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(371, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 371, 0, data[0])) ? 
        -0.10967557f : 
        0.10430238f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 1, static init size = 288B
  // {01110111 01001110 10101000 11010101 01100110 10011011 11101110 11111110 01000100 11011011 00111101 10101111 11111001 11101101 10010101 01010101 00110111 01011110 11101101 11011101 01110011 01011010 01001011 01111011 01101110 11110111 01011010 11101011 11011101 10011110 01111101 11111010 01111101 11110111 10111111 01111111 11011101 11011110 11110110 11111111 01111111 11111111 10111011 11111101 10110010 11101011 000}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 114, 21, -85, 102, -39, 119, 127, 34, -37, -68, -11, -97, -73, -87, -86, -20, 122, -73, -69, -50, 90, -46, -34, 118, -17, 90, -41, -69, 121, -66, 95, -66, -17, -3, -2, -69, 123, 111, -1, -2, -1, -35, -65, 77, -41, 0};
}


class TrieEnd3_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd3_Tree_21_class_0.score0(fdata);
  }
}
class TrieEnd3_Tree_21_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(371, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 371, 0, data[0])) ? 
        -0.10867052f : 
        0.10387623f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 1, static init size = 288B
  // {01110111 01001110 10101000 11010101 01100110 10011011 11101110 11111110 01000100 11011011 00111101 10101111 11111001 11101101 10010101 01010101 00110111 01011110 11101101 11011101 01110011 01011010 01001011 01111011 01101110 11110111 01011010 11101011 11011101 10011110 01111101 11111010 01111101 11110111 10111111 01111111 11011101 11011110 11110110 11111111 01111111 11111111 10111011 11111101 10110010 11101011 000}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 114, 21, -85, 102, -39, 119, 127, 34, -37, -68, -11, -97, -73, -87, -86, -20, 122, -73, -69, -50, 90, -46, -34, 118, -17, 90, -41, -69, 121, -66, 95, -66, -17, -3, -2, -69, 123, 111, -1, -2, -1, -35, -65, 77, -41, 0};
}


class TrieEnd3_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd3_Tree_22_class_0.score0(fdata);
  }
}
class TrieEnd3_Tree_22_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(371, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 371, 0, data[0])) ? 
        -0.10777768f : 
        0.103493795f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 1, static init size = 288B
  // {01110111 01001110 10101000 11010101 01100110 10011011 11101110 11111110 01000100 11011011 00111101 10101111 11111001 11101101 10010101 01010101 00110111 01011110 11101101 11011101 01110011 01011010 01001011 01111011 01101110 11110111 01011010 11101011 11011101 10011110 01111101 11111010 01111101 11110111 10111111 01111111 11011101 11011110 11110110 11111111 01111111 11111111 10111011 11111101 10110010 11101011 000}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 114, 21, -85, 102, -39, 119, 127, 34, -37, -68, -11, -97, -73, -87, -86, -20, 122, -73, -69, -50, 90, -46, -34, 118, -17, 90, -41, -69, 121, -66, 95, -66, -17, -3, -2, -69, 123, 111, -1, -2, -1, -35, -65, 77, -41, 0};
}


class TrieEnd3_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd3_Tree_23_class_0.score0(fdata);
  }
}
class TrieEnd3_Tree_23_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(371, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 371, 0, data[0])) ? 
        -0.10698301f : 
        0.103150286f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 1, static init size = 288B
  // {01110111 01001110 10101000 11010101 01100110 10011011 11101110 11111110 01000100 11011011 00111101 10101111 11111001 11101101 10010101 01010101 00110111 01011110 11101101 11011101 01110011 01011010 01001011 01111011 01101110 11110111 01011010 11101011 11011101 10011110 01111101 11111010 01111101 11110111 10111111 01111111 11011101 11011110 11110110 11111111 01111111 11111111 10111011 11111101 10110010 11101011 000}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 114, 21, -85, 102, -39, 119, 127, 34, -37, -68, -11, -97, -73, -87, -86, -20, 122, -73, -69, -50, 90, -46, -34, 118, -17, 90, -41, -69, 121, -66, 95, -66, -17, -3, -2, -69, 123, 111, -1, -2, -1, -35, -65, 77, -41, 0};
}


class TrieEnd3_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd3_Tree_24_class_0.score0(fdata);
  }
}
class TrieEnd3_Tree_24_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(371, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 371, 0, data[0])) ? 
        -0.10627452f : 
        0.10284153f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 1, static init size = 288B
  // {01110111 01001110 10101000 11010101 01100110 10011011 11101110 11111110 01000100 11011011 00111101 10101111 11111001 11101101 10010101 01010101 00110111 01011110 11101101 11011101 01110011 01011010 01001011 01111011 01101110 11110111 01011010 11101011 11011101 10011110 01111101 11111010 01111101 11110111 10111111 01111111 11011101 11011110 11110110 11111111 01111111 11111111 10111011 11111101 10110010 11101011 000}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 114, 21, -85, 102, -39, 119, 127, 34, -37, -68, -11, -97, -73, -87, -86, -20, 122, -73, -69, -50, 90, -46, -34, 118, -17, 90, -41, -69, 121, -66, 95, -66, -17, -3, -2, -69, 123, 111, -1, -2, -1, -35, -65, 77, -41, 0};
}


class TrieEnd3_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd3_Tree_25_class_0.score0(fdata);
  }
}
class TrieEnd3_Tree_25_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(371, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 371, 0, data[0])) ? 
        -0.10564191f : 
        0.10256383f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 1, static init size = 288B
  // {01110111 01001110 10101000 11010101 01100110 10011011 11101110 11111110 01000100 11011011 00111101 10101111 11111001 11101101 10010101 01010101 00110111 01011110 11101101 11011101 01110011 01011010 01001011 01111011 01101110 11110111 01011010 11101011 11011101 10011110 01111101 11111010 01111101 11110111 10111111 01111111 11011101 11011110 11110110 11111111 01111111 11111111 10111011 11111101 10110010 11101011 000}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 114, 21, -85, 102, -39, 119, 127, 34, -37, -68, -11, -97, -73, -87, -86, -20, 122, -73, -69, -50, 90, -46, -34, 118, -17, 90, -41, -69, 121, -66, 95, -66, -17, -3, -2, -69, 123, 111, -1, -2, -1, -35, -65, 77, -41, 0};
}


class TrieEnd3_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd3_Tree_26_class_0.score0(fdata);
  }
}
class TrieEnd3_Tree_26_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(371, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 371, 0, data[0])) ? 
        -0.10507629f : 
        0.102313906f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 1, static init size = 288B
  // {01110111 01001110 10101000 11010101 01100110 10011011 11101110 11111110 01000100 11011011 00111101 10101111 11111001 11101101 10010101 01010101 00110111 01011110 11101101 11011101 01110011 01011010 01001011 01111011 01101110 11110111 01011010 11101011 11011101 10011110 01111101 11111010 01111101 11110111 10111111 01111111 11011101 11011110 11110110 11111111 01111111 11111111 10111011 11111101 10110010 11101011 000}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 114, 21, -85, 102, -39, 119, 127, 34, -37, -68, -11, -97, -73, -87, -86, -20, 122, -73, -69, -50, 90, -46, -34, 118, -17, 90, -41, -69, 121, -66, 95, -66, -17, -3, -2, -69, 123, 111, -1, -2, -1, -35, -65, 77, -41, 0};
}


class TrieEnd3_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd3_Tree_27_class_0.score0(fdata);
  }
}
class TrieEnd3_Tree_27_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(371, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 371, 0, data[0])) ? 
        -0.104569964f : 
        0.102088876f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 1, static init size = 288B
  // {01110111 01001110 10101000 11010101 01100110 10011011 11101110 11111110 01000100 11011011 00111101 10101111 11111001 11101101 10010101 01010101 00110111 01011110 11101101 11011101 01110011 01011010 01001011 01111011 01101110 11110111 01011010 11101011 11011101 10011110 01111101 11111010 01111101 11110111 10111111 01111111 11011101 11011110 11110110 11111111 01111111 11111111 10111011 11111101 10110010 11101011 000}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 114, 21, -85, 102, -39, 119, 127, 34, -37, -68, -11, -97, -73, -87, -86, -20, 122, -73, -69, -50, 90, -46, -34, 118, -17, 90, -41, -69, 121, -66, 95, -66, -17, -3, -2, -69, 123, 111, -1, -2, -1, -35, -65, 77, -41, 0};
}


class TrieEnd3_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd3_Tree_28_class_0.score0(fdata);
  }
}
class TrieEnd3_Tree_28_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(371, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 371, 0, data[0])) ? 
        -0.10411622f : 
        0.101886146f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 1, static init size = 288B
  // {01110111 01001110 10101000 11010101 01100110 10011011 11101110 11111110 01000100 11011011 00111101 10101111 11111001 11101101 10010101 01010101 00110111 01011110 11101101 11011101 01110011 01011010 01001011 01111011 01101110 11110111 01011010 11101011 11011101 10011110 01111101 11111010 01111101 11110111 10111111 01111111 11011101 11011110 11110110 11111111 01111111 11111111 10111011 11111101 10110010 11101011 000}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 114, 21, -85, 102, -39, 119, 127, 34, -37, -68, -11, -97, -73, -87, -86, -20, 122, -73, -69, -50, 90, -46, -34, 118, -17, 90, -41, -69, 121, -66, 95, -66, -17, -3, -2, -69, 123, 111, -1, -2, -1, -35, -65, 77, -41, 0};
}


class TrieEnd3_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd3_Tree_29_class_0.score0(fdata);
  }
}
class TrieEnd3_Tree_29_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(371, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 371, 0, data[0])) ? 
        -0.103709206f : 
        0.10170344f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 1, static init size = 288B
  // {01110111 01001110 10101000 11010101 01100110 10011011 11101110 11111110 01000100 11011011 00111101 10101111 11111001 11101101 10010101 01010101 00110111 01011110 11101101 11011101 01110011 01011010 01001011 01111011 01101110 11110111 01011010 11101011 11011101 10011110 01111101 11111010 01111101 11110111 10111111 01111111 11011101 11011110 11110110 11111111 01111111 11111111 10111011 11111101 10110010 11101011 000}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 114, 21, -85, 102, -39, 119, 127, 34, -37, -68, -11, -97, -73, -87, -86, -20, 122, -73, -69, -50, 90, -46, -34, 118, -17, 90, -41, -69, 121, -66, 95, -66, -17, -3, -2, -69, 123, 111, -1, -2, -1, -35, -65, 77, -41, 0};
}


