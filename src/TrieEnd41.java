

/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2020-01-21T23:23:21.990-05:00
  3.24.0.5
  
  Standalone prediction code with sample test data for GBMModel named TrieEnd41

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://192.168.0.103:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://192.168.0.103:54321/3/Models.java/TrieEnd41 > TrieEnd41.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m TrieEnd41.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="TrieEnd41", algorithm="gbm")
public class TrieEnd41 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Binomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 1; }
  public int nclasses() { return 2; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_TrieEnd41.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 2;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* nodeIdIn */ TrieEnd41_ColInfo_0.VALUES,
    /* isEndOfWordOut */ TrieEnd41_ColInfo_1.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.386,0.614};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {0.386,0.614};

  public TrieEnd41() { super(NAMES,DOMAINS,"isEndOfWordOut"); }
  public String getUUID() { return Long.toString(-8665416139703840956L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    TrieEnd41_Forest_0.score0(data,preds);
    TrieEnd41_Forest_1.score0(data,preds);
    TrieEnd41_Forest_2.score0(data,preds);
    TrieEnd41_Forest_3.score0(data,preds);
    TrieEnd41_Forest_4.score0(data,preds);
    TrieEnd41_Forest_5.score0(data,preds);
    TrieEnd41_Forest_6.score0(data,preds);
    TrieEnd41_Forest_7.score0(data,preds);
    TrieEnd41_Forest_8.score0(data,preds);
    TrieEnd41_Forest_9.score0(data,preds);
    TrieEnd41_Forest_10.score0(data,preds);
    TrieEnd41_Forest_11.score0(data,preds);
    TrieEnd41_Forest_12.score0(data,preds);
    TrieEnd41_Forest_13.score0(data,preds);
    TrieEnd41_Forest_14.score0(data,preds);
    TrieEnd41_Forest_15.score0(data,preds);
    TrieEnd41_Forest_16.score0(data,preds);
    TrieEnd41_Forest_17.score0(data,preds);
    TrieEnd41_Forest_18.score0(data,preds);
    TrieEnd41_Forest_19.score0(data,preds);
    TrieEnd41_Forest_20.score0(data,preds);
    TrieEnd41_Forest_21.score0(data,preds);
    TrieEnd41_Forest_22.score0(data,preds);
    TrieEnd41_Forest_23.score0(data,preds);
    TrieEnd41_Forest_24.score0(data,preds);
    TrieEnd41_Forest_25.score0(data,preds);
    TrieEnd41_Forest_26.score0(data,preds);
    TrieEnd41_Forest_27.score0(data,preds);
    TrieEnd41_Forest_28.score0(data,preds);
    TrieEnd41_Forest_29.score0(data,preds);
    preds[2] = preds[1] + 0.4641575586823115;
    preds[2] = 1./(1. + Math.min(1e19, Math.exp(-(preds[2]))));
    preds[1] = 1.0-preds[2];
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.981239535825771);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_TrieEnd41 implements java.io.Serializable {
  public static final String[] VALUES = new String[1];
  static {
    NamesHolder_TrieEnd41_0.fill(VALUES);
  }
  static final class NamesHolder_TrieEnd41_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "nodeIdIn";
    }
  }
}
// The class representing column nodeIdIn
class TrieEnd41_ColInfo_0 implements java.io.Serializable {
  public static final String[] VALUES = new String[500];
  static {
    TrieEnd41_ColInfo_0_0.fill(VALUES);
  }
  static final class TrieEnd41_ColInfo_0_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1000";
      sa[1] = "1002";
      sa[2] = "1004";
      sa[3] = "1006";
      sa[4] = "1008";
      sa[5] = "1010";
      sa[6] = "1012";
      sa[7] = "1014";
      sa[8] = "1016";
      sa[9] = "1018";
      sa[10] = "1020";
      sa[11] = "1022";
      sa[12] = "1024";
      sa[13] = "1026";
      sa[14] = "1028";
      sa[15] = "1030";
      sa[16] = "1032";
      sa[17] = "1034";
      sa[18] = "1036";
      sa[19] = "1038";
      sa[20] = "1040";
      sa[21] = "1042";
      sa[22] = "1044";
      sa[23] = "1046";
      sa[24] = "1048";
      sa[25] = "1050";
      sa[26] = "1052";
      sa[27] = "1054";
      sa[28] = "1056";
      sa[29] = "1058";
      sa[30] = "1060";
      sa[31] = "1062";
      sa[32] = "1064";
      sa[33] = "1066";
      sa[34] = "1068";
      sa[35] = "1070";
      sa[36] = "1072";
      sa[37] = "1074";
      sa[38] = "1076";
      sa[39] = "1078";
      sa[40] = "1080";
      sa[41] = "1082";
      sa[42] = "1084";
      sa[43] = "1086";
      sa[44] = "1088";
      sa[45] = "1090";
      sa[46] = "1092";
      sa[47] = "1094";
      sa[48] = "1096";
      sa[49] = "1098";
      sa[50] = "1100";
      sa[51] = "1102";
      sa[52] = "1104";
      sa[53] = "1106";
      sa[54] = "1108";
      sa[55] = "1110";
      sa[56] = "1112";
      sa[57] = "1114";
      sa[58] = "1116";
      sa[59] = "1118";
      sa[60] = "1120";
      sa[61] = "1122";
      sa[62] = "1124";
      sa[63] = "1126";
      sa[64] = "1128";
      sa[65] = "1130";
      sa[66] = "1132";
      sa[67] = "1134";
      sa[68] = "1136";
      sa[69] = "1138";
      sa[70] = "1140";
      sa[71] = "1142";
      sa[72] = "1144";
      sa[73] = "1146";
      sa[74] = "1148";
      sa[75] = "1150";
      sa[76] = "1152";
      sa[77] = "1154";
      sa[78] = "1156";
      sa[79] = "1158";
      sa[80] = "1160";
      sa[81] = "1162";
      sa[82] = "1164";
      sa[83] = "1166";
      sa[84] = "1168";
      sa[85] = "1170";
      sa[86] = "1172";
      sa[87] = "1174";
      sa[88] = "1176";
      sa[89] = "1178";
      sa[90] = "1180";
      sa[91] = "1182";
      sa[92] = "1184";
      sa[93] = "1186";
      sa[94] = "1188";
      sa[95] = "1190";
      sa[96] = "1192";
      sa[97] = "1194";
      sa[98] = "1196";
      sa[99] = "1198";
      sa[100] = "1200";
      sa[101] = "1202";
      sa[102] = "1204";
      sa[103] = "1206";
      sa[104] = "1208";
      sa[105] = "1210";
      sa[106] = "1212";
      sa[107] = "1214";
      sa[108] = "1216";
      sa[109] = "1218";
      sa[110] = "1220";
      sa[111] = "1222";
      sa[112] = "1224";
      sa[113] = "1226";
      sa[114] = "1228";
      sa[115] = "1230";
      sa[116] = "1232";
      sa[117] = "1234";
      sa[118] = "1236";
      sa[119] = "1238";
      sa[120] = "1240";
      sa[121] = "1242";
      sa[122] = "1244";
      sa[123] = "1246";
      sa[124] = "1248";
      sa[125] = "1250";
      sa[126] = "1252";
      sa[127] = "1254";
      sa[128] = "1256";
      sa[129] = "1258";
      sa[130] = "1260";
      sa[131] = "1262";
      sa[132] = "1264";
      sa[133] = "1266";
      sa[134] = "1268";
      sa[135] = "1270";
      sa[136] = "1272";
      sa[137] = "1274";
      sa[138] = "1276";
      sa[139] = "1278";
      sa[140] = "1280";
      sa[141] = "1282";
      sa[142] = "1284";
      sa[143] = "1286";
      sa[144] = "1288";
      sa[145] = "1290";
      sa[146] = "1292";
      sa[147] = "1294";
      sa[148] = "1296";
      sa[149] = "1298";
      sa[150] = "1300";
      sa[151] = "1302";
      sa[152] = "1304";
      sa[153] = "1306";
      sa[154] = "1308";
      sa[155] = "1310";
      sa[156] = "1312";
      sa[157] = "1314";
      sa[158] = "1316";
      sa[159] = "1318";
      sa[160] = "1320";
      sa[161] = "1322";
      sa[162] = "1324";
      sa[163] = "1326";
      sa[164] = "1328";
      sa[165] = "1330";
      sa[166] = "1332";
      sa[167] = "1334";
      sa[168] = "1336";
      sa[169] = "1338";
      sa[170] = "1340";
      sa[171] = "1342";
      sa[172] = "1344";
      sa[173] = "1346";
      sa[174] = "1348";
      sa[175] = "1350";
      sa[176] = "1352";
      sa[177] = "1354";
      sa[178] = "1356";
      sa[179] = "1358";
      sa[180] = "1360";
      sa[181] = "1362";
      sa[182] = "1364";
      sa[183] = "1366";
      sa[184] = "1368";
      sa[185] = "1370";
      sa[186] = "1372";
      sa[187] = "1374";
      sa[188] = "1376";
      sa[189] = "1378";
      sa[190] = "1380";
      sa[191] = "1382";
      sa[192] = "1384";
      sa[193] = "1386";
      sa[194] = "1388";
      sa[195] = "1390";
      sa[196] = "1392";
      sa[197] = "1394";
      sa[198] = "1396";
      sa[199] = "1398";
      sa[200] = "1400";
      sa[201] = "1402";
      sa[202] = "1404";
      sa[203] = "1406";
      sa[204] = "1408";
      sa[205] = "1410";
      sa[206] = "1412";
      sa[207] = "1414";
      sa[208] = "1416";
      sa[209] = "1418";
      sa[210] = "1420";
      sa[211] = "1422";
      sa[212] = "1424";
      sa[213] = "1426";
      sa[214] = "1428";
      sa[215] = "1430";
      sa[216] = "1432";
      sa[217] = "1434";
      sa[218] = "1436";
      sa[219] = "1438";
      sa[220] = "1440";
      sa[221] = "1442";
      sa[222] = "1444";
      sa[223] = "1446";
      sa[224] = "1448";
      sa[225] = "1450";
      sa[226] = "1452";
      sa[227] = "1454";
      sa[228] = "1456";
      sa[229] = "1458";
      sa[230] = "1460";
      sa[231] = "1462";
      sa[232] = "1464";
      sa[233] = "1466";
      sa[234] = "1468";
      sa[235] = "1470";
      sa[236] = "1472";
      sa[237] = "1474";
      sa[238] = "1476";
      sa[239] = "1478";
      sa[240] = "1480";
      sa[241] = "1482";
      sa[242] = "1484";
      sa[243] = "1486";
      sa[244] = "1488";
      sa[245] = "1490";
      sa[246] = "1492";
      sa[247] = "1494";
      sa[248] = "1496";
      sa[249] = "1498";
      sa[250] = "1500";
      sa[251] = "1502";
      sa[252] = "1504";
      sa[253] = "1506";
      sa[254] = "1508";
      sa[255] = "1510";
      sa[256] = "1512";
      sa[257] = "1514";
      sa[258] = "1516";
      sa[259] = "1518";
      sa[260] = "1520";
      sa[261] = "1522";
      sa[262] = "1524";
      sa[263] = "1526";
      sa[264] = "1528";
      sa[265] = "1530";
      sa[266] = "1532";
      sa[267] = "1534";
      sa[268] = "1536";
      sa[269] = "1538";
      sa[270] = "1540";
      sa[271] = "1542";
      sa[272] = "1544";
      sa[273] = "1546";
      sa[274] = "1548";
      sa[275] = "1550";
      sa[276] = "1552";
      sa[277] = "1554";
      sa[278] = "1556";
      sa[279] = "1558";
      sa[280] = "1560";
      sa[281] = "1562";
      sa[282] = "1564";
      sa[283] = "1566";
      sa[284] = "1568";
      sa[285] = "1570";
      sa[286] = "1572";
      sa[287] = "1574";
      sa[288] = "1576";
      sa[289] = "1578";
      sa[290] = "1580";
      sa[291] = "1582";
      sa[292] = "1584";
      sa[293] = "1586";
      sa[294] = "1588";
      sa[295] = "1590";
      sa[296] = "1592";
      sa[297] = "1594";
      sa[298] = "1596";
      sa[299] = "1598";
      sa[300] = "1600";
      sa[301] = "1602";
      sa[302] = "1604";
      sa[303] = "1606";
      sa[304] = "1608";
      sa[305] = "1610";
      sa[306] = "1612";
      sa[307] = "1614";
      sa[308] = "1616";
      sa[309] = "1618";
      sa[310] = "1620";
      sa[311] = "1622";
      sa[312] = "1624";
      sa[313] = "1626";
      sa[314] = "1628";
      sa[315] = "1630";
      sa[316] = "1632";
      sa[317] = "1634";
      sa[318] = "1636";
      sa[319] = "1638";
      sa[320] = "1640";
      sa[321] = "1642";
      sa[322] = "1644";
      sa[323] = "1646";
      sa[324] = "1648";
      sa[325] = "1650";
      sa[326] = "1652";
      sa[327] = "1654";
      sa[328] = "1656";
      sa[329] = "1658";
      sa[330] = "1660";
      sa[331] = "1662";
      sa[332] = "1664";
      sa[333] = "1666";
      sa[334] = "1668";
      sa[335] = "1670";
      sa[336] = "1672";
      sa[337] = "1674";
      sa[338] = "1676";
      sa[339] = "1678";
      sa[340] = "1680";
      sa[341] = "1682";
      sa[342] = "1684";
      sa[343] = "1686";
      sa[344] = "1688";
      sa[345] = "1690";
      sa[346] = "1692";
      sa[347] = "1694";
      sa[348] = "1696";
      sa[349] = "1698";
      sa[350] = "1700";
      sa[351] = "1702";
      sa[352] = "1704";
      sa[353] = "1706";
      sa[354] = "1708";
      sa[355] = "1710";
      sa[356] = "1712";
      sa[357] = "1714";
      sa[358] = "1716";
      sa[359] = "1718";
      sa[360] = "1720";
      sa[361] = "1722";
      sa[362] = "1724";
      sa[363] = "1726";
      sa[364] = "1728";
      sa[365] = "1730";
      sa[366] = "1732";
      sa[367] = "1734";
      sa[368] = "1736";
      sa[369] = "1738";
      sa[370] = "1740";
      sa[371] = "1742";
      sa[372] = "1744";
      sa[373] = "1746";
      sa[374] = "1748";
      sa[375] = "1750";
      sa[376] = "1752";
      sa[377] = "1754";
      sa[378] = "1756";
      sa[379] = "1758";
      sa[380] = "1760";
      sa[381] = "1762";
      sa[382] = "1764";
      sa[383] = "1766";
      sa[384] = "1768";
      sa[385] = "1770";
      sa[386] = "1772";
      sa[387] = "1774";
      sa[388] = "1776";
      sa[389] = "1778";
      sa[390] = "1780";
      sa[391] = "1782";
      sa[392] = "1784";
      sa[393] = "1786";
      sa[394] = "1788";
      sa[395] = "1790";
      sa[396] = "1792";
      sa[397] = "1794";
      sa[398] = "1796";
      sa[399] = "1798";
      sa[400] = "1800";
      sa[401] = "1802";
      sa[402] = "1804";
      sa[403] = "1806";
      sa[404] = "1808";
      sa[405] = "1810";
      sa[406] = "1812";
      sa[407] = "1814";
      sa[408] = "1816";
      sa[409] = "1818";
      sa[410] = "1820";
      sa[411] = "1822";
      sa[412] = "1824";
      sa[413] = "1826";
      sa[414] = "1828";
      sa[415] = "1830";
      sa[416] = "1832";
      sa[417] = "1834";
      sa[418] = "1836";
      sa[419] = "1838";
      sa[420] = "1840";
      sa[421] = "1842";
      sa[422] = "1844";
      sa[423] = "1846";
      sa[424] = "1848";
      sa[425] = "1850";
      sa[426] = "1852";
      sa[427] = "1854";
      sa[428] = "1856";
      sa[429] = "1858";
      sa[430] = "1860";
      sa[431] = "1862";
      sa[432] = "1864";
      sa[433] = "1866";
      sa[434] = "1868";
      sa[435] = "1870";
      sa[436] = "1872";
      sa[437] = "1874";
      sa[438] = "1876";
      sa[439] = "1878";
      sa[440] = "1880";
      sa[441] = "1882";
      sa[442] = "1884";
      sa[443] = "1886";
      sa[444] = "1888";
      sa[445] = "1890";
      sa[446] = "1892";
      sa[447] = "1894";
      sa[448] = "1896";
      sa[449] = "1898";
      sa[450] = "1900";
      sa[451] = "1902";
      sa[452] = "1904";
      sa[453] = "1906";
      sa[454] = "1908";
      sa[455] = "1910";
      sa[456] = "1912";
      sa[457] = "1914";
      sa[458] = "1916";
      sa[459] = "1918";
      sa[460] = "1920";
      sa[461] = "1922";
      sa[462] = "1924";
      sa[463] = "1926";
      sa[464] = "1928";
      sa[465] = "1930";
      sa[466] = "1932";
      sa[467] = "1934";
      sa[468] = "1936";
      sa[469] = "1938";
      sa[470] = "1940";
      sa[471] = "1942";
      sa[472] = "1944";
      sa[473] = "1946";
      sa[474] = "1948";
      sa[475] = "1950";
      sa[476] = "1952";
      sa[477] = "1954";
      sa[478] = "1956";
      sa[479] = "1958";
      sa[480] = "1960";
      sa[481] = "1962";
      sa[482] = "1964";
      sa[483] = "1966";
      sa[484] = "1968";
      sa[485] = "1970";
      sa[486] = "1972";
      sa[487] = "1974";
      sa[488] = "1976";
      sa[489] = "1978";
      sa[490] = "1980";
      sa[491] = "1982";
      sa[492] = "1984";
      sa[493] = "1986";
      sa[494] = "1988";
      sa[495] = "1990";
      sa[496] = "1992";
      sa[497] = "1994";
      sa[498] = "996";
      sa[499] = "998";
    }
  }
}
// The class representing column isEndOfWordOut
class TrieEnd41_ColInfo_1 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    TrieEnd41_ColInfo_1_0.fill(VALUES);
  }
  static final class TrieEnd41_ColInfo_1_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "FALSE";
      sa[1] = "TRUE";
    }
  }
}

class TrieEnd41_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd41_Tree_0_class_0.score0(fdata);
  }
}
class TrieEnd41_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(500, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 500, 0, data[0])) ? 
        -0.2590674f : 
        0.16286646f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {01100101 01101101 01010111 00111110 01001101 11010100 11010101 00110010 11110110 11010100 11111101 00111010 01010110 01101001 01110001 00010101 10111011 10101010 10010111 00101111 10011000 11101100 10110111 01111011 11010101 11010110 11001010 10111011 11010101 11011101 11111111 01010110 11011111 10101101 10010101 01010101 01101101 11101011 01010101 11011011 00110101 01101011 10101011 01111101 11010101 11010101 01011010 10110111 01010101 11010111 01010101 01010101 01101111 10110100 11101001 01111011 10101110 00111010 11011011 11110101 10101010 01110101 1110}
  public static final byte[] GRPSPLIT0 = new byte[] {-90, -74, -22, 124, -78, 43, -85, 76, 111, 43, -65, 92, 106, -106, -114, -88, -35, 85, -23, -12, 25, 55, -19, -34, -85, 107, 83, -35, -85, -69, -1, 106, -5, -75, -87, -86, -74, -41, -86, -37, -84, -42, -43, -66, -85, -85, 90, -19, -86, -21, -86, -86, -10, 45, -105, -34, 117, 92, -37, -81, 85, -82, 7};
}


class TrieEnd41_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd41_Tree_1_class_0.score0(fdata);
  }
}
class TrieEnd41_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(500, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 500, 0, data[0])) ? 
        -0.22276358f : 
        0.15341792f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-90, -74, -22, 124, -78, 43, -85, 76, 111, 43, -65, 92, 106, -106, -114, -88, -35, 85, -23, -12, 25, 55, -19, -34, -85, 107, 83, -35, -85, -69, -1, 106, -5, -75, -87, -86, -74, -41, -86, -37, -84, -42, -43, -66, -85, -85, 90, -19, -86, -21, -86, -86, -10, 45, -105, -34, 117, 92, -37, -81, 85, -82, 7};
}


class TrieEnd41_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd41_Tree_2_class_0.score0(fdata);
  }
}
class TrieEnd41_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(500, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 500, 0, data[0])) ? 
        -0.19824818f : 
        0.14582035f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-90, -74, -22, 124, -78, 43, -85, 76, 111, 43, -65, 92, 106, -106, -114, -88, -35, 85, -23, -12, 25, 55, -19, -34, -85, 107, 83, -35, -85, -69, -1, 106, -5, -75, -87, -86, -74, -41, -86, -37, -84, -42, -43, -66, -85, -85, 90, -19, -86, -21, -86, -86, -10, 45, -105, -34, 117, 92, -37, -81, 85, -82, 7};
}


class TrieEnd41_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd41_Tree_3_class_0.score0(fdata);
  }
}
class TrieEnd41_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(500, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 500, 0, data[0])) ? 
        -0.18057986f : 
        0.13960312f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-90, -74, -22, 124, -78, 43, -85, 76, 111, 43, -65, 92, 106, -106, -114, -88, -35, 85, -23, -12, 25, 55, -19, -34, -85, 107, 83, -35, -85, -69, -1, 106, -5, -75, -87, -86, -74, -41, -86, -37, -84, -42, -43, -66, -85, -85, 90, -19, -86, -21, -86, -86, -10, 45, -105, -34, 117, 92, -37, -81, 85, -82, 7};
}


class TrieEnd41_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd41_Tree_4_class_0.score0(fdata);
  }
}
class TrieEnd41_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(500, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 500, 0, data[0])) ? 
        -0.16726694f : 
        0.13444297f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-90, -74, -22, 124, -78, 43, -85, 76, 111, 43, -65, 92, 106, -106, -114, -88, -35, 85, -23, -12, 25, 55, -19, -34, -85, 107, 83, -35, -85, -69, -1, 106, -5, -75, -87, -86, -74, -41, -86, -37, -84, -42, -43, -66, -85, -85, 90, -19, -86, -21, -86, -86, -10, 45, -105, -34, 117, 92, -37, -81, 85, -82, 7};
}


class TrieEnd41_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd41_Tree_5_class_0.score0(fdata);
  }
}
class TrieEnd41_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(500, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 500, 0, data[0])) ? 
        -0.15690605f : 
        0.13011013f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-90, -74, -22, 124, -78, 43, -85, 76, 111, 43, -65, 92, 106, -106, -114, -88, -35, 85, -23, -12, 25, 55, -19, -34, -85, 107, 83, -35, -85, -69, -1, 106, -5, -75, -87, -86, -74, -41, -86, -37, -84, -42, -43, -66, -85, -85, 90, -19, -86, -21, -86, -86, -10, 45, -105, -34, 117, 92, -37, -81, 85, -82, 7};
}


class TrieEnd41_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd41_Tree_6_class_0.score0(fdata);
  }
}
class TrieEnd41_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(500, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 500, 0, data[0])) ? 
        -0.1486424f : 
        0.12643667f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-90, -74, -22, 124, -78, 43, -85, 76, 111, 43, -65, 92, 106, -106, -114, -88, -35, 85, -23, -12, 25, 55, -19, -34, -85, 107, 83, -35, -85, -69, -1, 106, -5, -75, -87, -86, -74, -41, -86, -37, -84, -42, -43, -66, -85, -85, 90, -19, -86, -21, -86, -86, -10, 45, -105, -34, 117, 92, -37, -81, 85, -82, 7};
}


class TrieEnd41_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd41_Tree_7_class_0.score0(fdata);
  }
}
class TrieEnd41_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(500, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 500, 0, data[0])) ? 
        -0.14192379f : 
        0.123296775f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-90, -74, -22, 124, -78, 43, -85, 76, 111, 43, -65, 92, 106, -106, -114, -88, -35, 85, -23, -12, 25, 55, -19, -34, -85, 107, 83, -35, -85, -69, -1, 106, -5, -75, -87, -86, -74, -41, -86, -37, -84, -42, -43, -66, -85, -85, 90, -19, -86, -21, -86, -86, -10, 45, -105, -34, 117, 92, -37, -81, 85, -82, 7};
}


class TrieEnd41_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd41_Tree_8_class_0.score0(fdata);
  }
}
class TrieEnd41_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(500, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 500, 0, data[0])) ? 
        -0.13637674f : 
        0.12059438f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-90, -74, -22, 124, -78, 43, -85, 76, 111, 43, -65, 92, 106, -106, -114, -88, -35, 85, -23, -12, 25, 55, -19, -34, -85, 107, 83, -35, -85, -69, -1, 106, -5, -75, -87, -86, -74, -41, -86, -37, -84, -42, -43, -66, -85, -85, 90, -19, -86, -21, -86, -86, -10, 45, -105, -34, 117, 92, -37, -81, 85, -82, 7};
}


class TrieEnd41_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd41_Tree_9_class_0.score0(fdata);
  }
}
class TrieEnd41_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(500, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 500, 0, data[0])) ? 
        -0.13173921f : 
        0.11825472f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-90, -74, -22, 124, -78, 43, -85, 76, 111, 43, -65, 92, 106, -106, -114, -88, -35, 85, -23, -12, 25, 55, -19, -34, -85, 107, 83, -35, -85, -69, -1, 106, -5, -75, -87, -86, -74, -41, -86, -37, -84, -42, -43, -66, -85, -85, 90, -19, -86, -21, -86, -86, -10, 45, -105, -34, 117, 92, -37, -81, 85, -82, 7};
}


class TrieEnd41_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd41_Tree_10_class_0.score0(fdata);
  }
}
class TrieEnd41_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(500, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 500, 0, data[0])) ? 
        -0.12782162f : 
        0.11621877f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-90, -74, -22, 124, -78, 43, -85, 76, 111, 43, -65, 92, 106, -106, -114, -88, -35, 85, -23, -12, 25, 55, -19, -34, -85, 107, 83, -35, -85, -69, -1, 106, -5, -75, -87, -86, -74, -41, -86, -37, -84, -42, -43, -66, -85, -85, 90, -19, -86, -21, -86, -86, -10, 45, -105, -34, 117, 92, -37, -81, 85, -82, 7};
}


class TrieEnd41_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd41_Tree_11_class_0.score0(fdata);
  }
}
class TrieEnd41_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(500, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 500, 0, data[0])) ? 
        -0.12448331f : 
        0.11443926f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-90, -74, -22, 124, -78, 43, -85, 76, 111, 43, -65, 92, 106, -106, -114, -88, -35, 85, -23, -12, 25, 55, -19, -34, -85, 107, 83, -35, -85, -69, -1, 106, -5, -75, -87, -86, -74, -41, -86, -37, -84, -42, -43, -66, -85, -85, 90, -19, -86, -21, -86, -86, -10, 45, -105, -34, 117, 92, -37, -81, 85, -82, 7};
}


class TrieEnd41_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd41_Tree_12_class_0.score0(fdata);
  }
}
class TrieEnd41_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(500, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 500, 0, data[0])) ? 
        -0.121617615f : 
        0.11287788f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-90, -74, -22, 124, -78, 43, -85, 76, 111, 43, -65, 92, 106, -106, -114, -88, -35, 85, -23, -12, 25, 55, -19, -34, -85, 107, 83, -35, -85, -69, -1, 106, -5, -75, -87, -86, -74, -41, -86, -37, -84, -42, -43, -66, -85, -85, 90, -19, -86, -21, -86, -86, -10, 45, -105, -34, 117, 92, -37, -81, 85, -82, 7};
}


class TrieEnd41_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd41_Tree_13_class_0.score0(fdata);
  }
}
class TrieEnd41_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(500, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 500, 0, data[0])) ? 
        -0.119142115f : 
        0.111503296f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-90, -74, -22, 124, -78, 43, -85, 76, 111, 43, -65, 92, 106, -106, -114, -88, -35, 85, -23, -12, 25, 55, -19, -34, -85, 107, 83, -35, -85, -69, -1, 106, -5, -75, -87, -86, -74, -41, -86, -37, -84, -42, -43, -66, -85, -85, 90, -19, -86, -21, -86, -86, -10, 45, -105, -34, 117, 92, -37, -81, 85, -82, 7};
}


class TrieEnd41_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd41_Tree_14_class_0.score0(fdata);
  }
}
class TrieEnd41_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(500, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 500, 0, data[0])) ? 
        -0.11699211f : 
        0.11028956f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-90, -74, -22, 124, -78, 43, -85, 76, 111, 43, -65, 92, 106, -106, -114, -88, -35, 85, -23, -12, 25, 55, -19, -34, -85, 107, 83, -35, -85, -69, -1, 106, -5, -75, -87, -86, -74, -41, -86, -37, -84, -42, -43, -66, -85, -85, 90, -19, -86, -21, -86, -86, -10, 45, -105, -34, 117, 92, -37, -81, 85, -82, 7};
}


class TrieEnd41_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd41_Tree_15_class_0.score0(fdata);
  }
}
class TrieEnd41_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(500, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 500, 0, data[0])) ? 
        -0.115116045f : 
        0.10921507f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-90, -74, -22, 124, -78, 43, -85, 76, 111, 43, -65, 92, 106, -106, -114, -88, -35, 85, -23, -12, 25, 55, -19, -34, -85, 107, 83, -35, -85, -69, -1, 106, -5, -75, -87, -86, -74, -41, -86, -37, -84, -42, -43, -66, -85, -85, 90, -19, -86, -21, -86, -86, -10, 45, -105, -34, 117, 92, -37, -81, 85, -82, 7};
}


class TrieEnd41_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd41_Tree_16_class_0.score0(fdata);
  }
}
class TrieEnd41_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(500, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 500, 0, data[0])) ? 
        -0.113472365f : 
        0.10826166f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-90, -74, -22, 124, -78, 43, -85, 76, 111, 43, -65, 92, 106, -106, -114, -88, -35, 85, -23, -12, 25, 55, -19, -34, -85, 107, 83, -35, -85, -69, -1, 106, -5, -75, -87, -86, -74, -41, -86, -37, -84, -42, -43, -66, -85, -85, 90, -19, -86, -21, -86, -86, -10, 45, -105, -34, 117, 92, -37, -81, 85, -82, 7};
}


class TrieEnd41_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd41_Tree_17_class_0.score0(fdata);
  }
}
class TrieEnd41_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(500, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 500, 0, data[0])) ? 
        -0.11202717f : 
        0.107413955f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-90, -74, -22, 124, -78, 43, -85, 76, 111, 43, -65, 92, 106, -106, -114, -88, -35, 85, -23, -12, 25, 55, -19, -34, -85, 107, 83, -35, -85, -69, -1, 106, -5, -75, -87, -86, -74, -41, -86, -37, -84, -42, -43, -66, -85, -85, 90, -19, -86, -21, -86, -86, -10, 45, -105, -34, 117, 92, -37, -81, 85, -82, 7};
}


class TrieEnd41_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd41_Tree_18_class_0.score0(fdata);
  }
}
class TrieEnd41_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(500, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 500, 0, data[0])) ? 
        -0.11075253f : 
        0.10665887f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-90, -74, -22, 124, -78, 43, -85, 76, 111, 43, -65, 92, 106, -106, -114, -88, -35, 85, -23, -12, 25, 55, -19, -34, -85, 107, 83, -35, -85, -69, -1, 106, -5, -75, -87, -86, -74, -41, -86, -37, -84, -42, -43, -66, -85, -85, 90, -19, -86, -21, -86, -86, -10, 45, -105, -34, 117, 92, -37, -81, 85, -82, 7};
}


class TrieEnd41_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd41_Tree_19_class_0.score0(fdata);
  }
}
class TrieEnd41_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(500, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 500, 0, data[0])) ? 
        -0.109625235f : 
        0.10598521f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-90, -74, -22, 124, -78, 43, -85, 76, 111, 43, -65, 92, 106, -106, -114, -88, -35, 85, -23, -12, 25, 55, -19, -34, -85, 107, 83, -35, -85, -69, -1, 106, -5, -75, -87, -86, -74, -41, -86, -37, -84, -42, -43, -66, -85, -85, 90, -19, -86, -21, -86, -86, -10, 45, -105, -34, 117, 92, -37, -81, 85, -82, 7};
}


class TrieEnd41_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd41_Tree_20_class_0.score0(fdata);
  }
}
class TrieEnd41_Tree_20_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(500, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 500, 0, data[0])) ? 
        -0.108625844f : 
        0.10538332f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-90, -74, -22, 124, -78, 43, -85, 76, 111, 43, -65, 92, 106, -106, -114, -88, -35, 85, -23, -12, 25, 55, -19, -34, -85, 107, 83, -35, -85, -69, -1, 106, -5, -75, -87, -86, -74, -41, -86, -37, -84, -42, -43, -66, -85, -85, 90, -19, -86, -21, -86, -86, -10, 45, -105, -34, 117, 92, -37, -81, 85, -82, 7};
}


class TrieEnd41_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd41_Tree_21_class_0.score0(fdata);
  }
}
class TrieEnd41_Tree_21_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(500, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 500, 0, data[0])) ? 
        -0.10773795f : 
        0.104844876f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-90, -74, -22, 124, -78, 43, -85, 76, 111, 43, -65, 92, 106, -106, -114, -88, -35, 85, -23, -12, 25, 55, -19, -34, -85, 107, 83, -35, -85, -69, -1, 106, -5, -75, -87, -86, -74, -41, -86, -37, -84, -42, -43, -66, -85, -85, 90, -19, -86, -21, -86, -86, -10, 45, -105, -34, 117, 92, -37, -81, 85, -82, 7};
}


class TrieEnd41_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd41_Tree_22_class_0.score0(fdata);
  }
}
class TrieEnd41_Tree_22_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(500, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 500, 0, data[0])) ? 
        -0.10694762f : 
        0.10436264f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-90, -74, -22, 124, -78, 43, -85, 76, 111, 43, -65, 92, 106, -106, -114, -88, -35, 85, -23, -12, 25, 55, -19, -34, -85, 107, 83, -35, -85, -69, -1, 106, -5, -75, -87, -86, -74, -41, -86, -37, -84, -42, -43, -66, -85, -85, 90, -19, -86, -21, -86, -86, -10, 45, -105, -34, 117, 92, -37, -81, 85, -82, 7};
}


class TrieEnd41_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd41_Tree_23_class_0.score0(fdata);
  }
}
class TrieEnd41_Tree_23_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(500, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 500, 0, data[0])) ? 
        -0.10624294f : 
        0.103930295f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-90, -74, -22, 124, -78, 43, -85, 76, 111, 43, -65, 92, 106, -106, -114, -88, -35, 85, -23, -12, 25, 55, -19, -34, -85, 107, 83, -35, -85, -69, -1, 106, -5, -75, -87, -86, -74, -41, -86, -37, -84, -42, -43, -66, -85, -85, 90, -19, -86, -21, -86, -86, -10, 45, -105, -34, 117, 92, -37, -81, 85, -82, 7};
}


class TrieEnd41_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd41_Tree_24_class_0.score0(fdata);
  }
}
class TrieEnd41_Tree_24_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(500, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 500, 0, data[0])) ? 
        -0.10561369f : 
        0.10354233f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-90, -74, -22, 124, -78, 43, -85, 76, 111, 43, -65, 92, 106, -106, -114, -88, -35, 85, -23, -12, 25, 55, -19, -34, -85, 107, 83, -35, -85, -69, -1, 106, -5, -75, -87, -86, -74, -41, -86, -37, -84, -42, -43, -66, -85, -85, 90, -19, -86, -21, -86, -86, -10, 45, -105, -34, 117, 92, -37, -81, 85, -82, 7};
}


class TrieEnd41_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd41_Tree_25_class_0.score0(fdata);
  }
}
class TrieEnd41_Tree_25_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(500, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 500, 0, data[0])) ? 
        -0.10505104f : 
        0.1031939f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-90, -74, -22, 124, -78, 43, -85, 76, 111, 43, -65, 92, 106, -106, -114, -88, -35, 85, -23, -12, 25, 55, -19, -34, -85, 107, 83, -35, -85, -69, -1, 106, -5, -75, -87, -86, -74, -41, -86, -37, -84, -42, -43, -66, -85, -85, 90, -19, -86, -21, -86, -86, -10, 45, -105, -34, 117, 92, -37, -81, 85, -82, 7};
}


class TrieEnd41_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd41_Tree_26_class_0.score0(fdata);
  }
}
class TrieEnd41_Tree_26_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(500, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 500, 0, data[0])) ? 
        -0.104547344f : 
        0.102880746f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-90, -74, -22, 124, -78, 43, -85, 76, 111, 43, -65, 92, 106, -106, -114, -88, -35, 85, -23, -12, 25, 55, -19, -34, -85, 107, 83, -35, -85, -69, -1, 106, -5, -75, -87, -86, -74, -41, -86, -37, -84, -42, -43, -66, -85, -85, 90, -19, -86, -21, -86, -86, -10, 45, -105, -34, 117, 92, -37, -81, 85, -82, 7};
}


class TrieEnd41_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd41_Tree_27_class_0.score0(fdata);
  }
}
class TrieEnd41_Tree_27_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(500, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 500, 0, data[0])) ? 
        -0.10409594f : 
        0.10259911f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-90, -74, -22, 124, -78, 43, -85, 76, 111, 43, -65, 92, 106, -106, -114, -88, -35, 85, -23, -12, 25, 55, -19, -34, -85, 107, 83, -35, -85, -69, -1, 106, -5, -75, -87, -86, -74, -41, -86, -37, -84, -42, -43, -66, -85, -85, 90, -19, -86, -21, -86, -86, -10, 45, -105, -34, 117, 92, -37, -81, 85, -82, 7};
}


class TrieEnd41_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd41_Tree_28_class_0.score0(fdata);
  }
}
class TrieEnd41_Tree_28_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(500, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 500, 0, data[0])) ? 
        -0.10369101f : 
        0.10234566f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-90, -74, -22, 124, -78, 43, -85, 76, 111, 43, -65, 92, 106, -106, -114, -88, -35, 85, -23, -12, 25, 55, -19, -34, -85, 107, 83, -35, -85, -69, -1, 106, -5, -75, -87, -86, -74, -41, -86, -37, -84, -42, -43, -66, -85, -85, 90, -19, -86, -21, -86, -86, -10, 45, -105, -34, 117, 92, -37, -81, 85, -82, 7};
}


class TrieEnd41_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd41_Tree_29_class_0.score0(fdata);
  }
}
class TrieEnd41_Tree_29_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(500, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 500, 0, data[0])) ? 
        -0.10332746f : 
        0.10211747f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-90, -74, -22, 124, -78, 43, -85, 76, 111, 43, -65, 92, 106, -106, -114, -88, -35, 85, -23, -12, 25, 55, -19, -34, -85, 107, 83, -35, -85, -69, -1, 106, -5, -75, -87, -86, -74, -41, -86, -37, -84, -42, -43, -66, -85, -85, 90, -19, -86, -21, -86, -86, -10, 45, -105, -34, 117, 92, -37, -81, 85, -82, 7};
}


