
/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2020-01-28T22:29:28.893-05:00
  3.24.0.5
  
  Standalone prediction code with sample test data for GBMModel named SearchSequence

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://192.168.0.103:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://192.168.0.103:54321/3/Models.java/SearchSequence > SearchSequence.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m SearchSequence.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="SearchSequence", algorithm="gbm")
public class SearchSequence extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 2; }
  public int nclasses() { return 6; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_SearchSequence.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* currentStateIn */ SearchSequence_ColInfo_0.VALUES,
    /* errorStateIn */ SearchSequence_ColInfo_1.VALUES,
    /* nextStateOut */ SearchSequence_ColInfo_2.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.6428571428571429,0.07142857142857142,0.07142857142857142,0.07142857142857142,0.07142857142857142,0.07142857142857142};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {0.6428571428571429,0.07142857142857142,0.07142857142857142,0.07142857142857142,0.07142857142857142,0.07142857142857142};

  public SearchSequence() { super(NAMES,DOMAINS,"nextStateOut"); }
  public String getUUID() { return Long.toString(2532870929240595160L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    SearchSequence_Forest_0.score0(data,preds);
    SearchSequence_Forest_1.score0(data,preds);
    SearchSequence_Forest_2.score0(data,preds);
    SearchSequence_Forest_3.score0(data,preds);
    SearchSequence_Forest_4.score0(data,preds);
    SearchSequence_Forest_5.score0(data,preds);
    SearchSequence_Forest_6.score0(data,preds);
    SearchSequence_Forest_7.score0(data,preds);
    SearchSequence_Forest_8.score0(data,preds);
    SearchSequence_Forest_9.score0(data,preds);
    SearchSequence_Forest_10.score0(data,preds);
    SearchSequence_Forest_11.score0(data,preds);
    SearchSequence_Forest_12.score0(data,preds);
    SearchSequence_Forest_13.score0(data,preds);
    SearchSequence_Forest_14.score0(data,preds);
    SearchSequence_Forest_15.score0(data,preds);
    SearchSequence_Forest_16.score0(data,preds);
    SearchSequence_Forest_17.score0(data,preds);
    SearchSequence_Forest_18.score0(data,preds);
    SearchSequence_Forest_19.score0(data,preds);
    SearchSequence_Forest_20.score0(data,preds);
    SearchSequence_Forest_21.score0(data,preds);
    SearchSequence_Forest_22.score0(data,preds);
    SearchSequence_Forest_23.score0(data,preds);
    SearchSequence_Forest_24.score0(data,preds);
    SearchSequence_Forest_25.score0(data,preds);
    SearchSequence_Forest_26.score0(data,preds);
    SearchSequence_Forest_27.score0(data,preds);
    SearchSequence_Forest_28.score0(data,preds);
    SearchSequence_Forest_29.score0(data,preds);
    hex.genmodel.GenModel.GBM_rescale(preds);
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_SearchSequence implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    NamesHolder_SearchSequence_0.fill(VALUES);
  }
  static final class NamesHolder_SearchSequence_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "currentStateIn";
      sa[1] = "errorStateIn";
    }
  }
}
// The class representing column currentStateIn
class SearchSequence_ColInfo_0 implements java.io.Serializable {
  public static final String[] VALUES = new String[7];
  static {
    SearchSequence_ColInfo_0_0.fill(VALUES);
  }
  static final class SearchSequence_ColInfo_0_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "-1";
      sa[1] = "0";
      sa[2] = "1";
      sa[3] = "2";
      sa[4] = "3";
      sa[5] = "4";
      sa[6] = "5";
    }
  }
}
// The class representing column errorStateIn
class SearchSequence_ColInfo_1 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    SearchSequence_ColInfo_1_0.fill(VALUES);
  }
  static final class SearchSequence_ColInfo_1_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "FALSE";
      sa[1] = "TRUE";
    }
  }
}
// The class representing column nextStateOut
class SearchSequence_ColInfo_2 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    SearchSequence_ColInfo_2_0.fill(VALUES);
  }
  static final class SearchSequence_ColInfo_2_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "-1";
      sa[1] = "1";
      sa[2] = "2";
      sa[3] = "3";
      sa[4] = "4";
      sa[5] = "5";
    }
  }
}

class SearchSequence_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchSequence_Tree_0_class_0.score0(fdata);
    preds[2] += SearchSequence_Tree_0_class_1.score0(fdata);
    preds[3] += SearchSequence_Tree_0_class_2.score0(fdata);
    preds[4] += SearchSequence_Tree_0_class_3.score0(fdata);
    preds[5] += SearchSequence_Tree_0_class_4.score0(fdata);
    preds[6] += SearchSequence_Tree_0_class_5.score0(fdata);
  }
}
class SearchSequence_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        0.07142856f : 
        0.49999994f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_0_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.1f : 
        0.19999999f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_0_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.1f : 
        0.19999999f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchSequence_Tree_0_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.1f : 
        0.19999999f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchSequence_Tree_0_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.1f : 
        0.19999999f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchSequence_Tree_0_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.1f : 
        0.19999999f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}


class SearchSequence_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchSequence_Tree_1_class_0.score0(fdata);
    preds[2] += SearchSequence_Tree_1_class_1.score0(fdata);
    preds[3] += SearchSequence_Tree_1_class_2.score0(fdata);
    preds[4] += SearchSequence_Tree_1_class_3.score0(fdata);
    preds[5] += SearchSequence_Tree_1_class_4.score0(fdata);
    preds[6] += SearchSequence_Tree_1_class_5.score0(fdata);
  }
}
class SearchSequence_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        0.056051064f : 
        0.3233273f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_1_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09795441f : 
        0.1592964f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_1_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09795441f : 
        0.1592964f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchSequence_Tree_1_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09795441f : 
        0.1592964f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchSequence_Tree_1_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09795441f : 
        0.1592964f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchSequence_Tree_1_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09795441f : 
        0.1592964f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}


class SearchSequence_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchSequence_Tree_2_class_0.score0(fdata);
    preds[2] += SearchSequence_Tree_2_class_1.score0(fdata);
    preds[3] += SearchSequence_Tree_2_class_2.score0(fdata);
    preds[4] += SearchSequence_Tree_2_class_3.score0(fdata);
    preds[5] += SearchSequence_Tree_2_class_4.score0(fdata);
    preds[6] += SearchSequence_Tree_2_class_5.score0(fdata);
  }
}
class SearchSequence_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        0.0442148f : 
        0.24917404f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_2_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0963235f : 
        0.13186006f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_2_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0963235f : 
        0.13186006f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchSequence_Tree_2_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0963235f : 
        0.13186006f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchSequence_Tree_2_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0963235f : 
        0.13186006f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchSequence_Tree_2_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0963235f : 
        0.13186006f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}


class SearchSequence_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchSequence_Tree_3_class_0.score0(fdata);
    preds[2] += SearchSequence_Tree_3_class_1.score0(fdata);
    preds[3] += SearchSequence_Tree_3_class_2.score0(fdata);
    preds[4] += SearchSequence_Tree_3_class_3.score0(fdata);
    preds[5] += SearchSequence_Tree_3_class_4.score0(fdata);
    preds[6] += SearchSequence_Tree_3_class_5.score0(fdata);
  }
}
class SearchSequence_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        0.034833543f : 
        0.20746808f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_3_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09498181f : 
        0.11230221f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_3_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09498181f : 
        0.11230221f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchSequence_Tree_3_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09498181f : 
        0.11230221f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchSequence_Tree_3_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09498181f : 
        0.11230221f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchSequence_Tree_3_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09498181f : 
        0.11230221f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}


class SearchSequence_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchSequence_Tree_4_class_0.score0(fdata);
    preds[2] += SearchSequence_Tree_4_class_1.score0(fdata);
    preds[3] += SearchSequence_Tree_4_class_2.score0(fdata);
    preds[4] += SearchSequence_Tree_4_class_3.score0(fdata);
    preds[5] += SearchSequence_Tree_4_class_4.score0(fdata);
    preds[6] += SearchSequence_Tree_4_class_5.score0(fdata);
  }
}
class SearchSequence_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        0.027235935f : 
        0.18080865f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_4_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.093867846f : 
        0.097729504f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_4_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.093867846f : 
        0.097729504f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchSequence_Tree_4_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.093867846f : 
        0.097729504f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchSequence_Tree_4_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.093867846f : 
        0.097729504f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchSequence_Tree_4_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.093867846f : 
        0.097729504f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}


class SearchSequence_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchSequence_Tree_5_class_0.score0(fdata);
    preds[2] += SearchSequence_Tree_5_class_1.score0(fdata);
    preds[3] += SearchSequence_Tree_5_class_2.score0(fdata);
    preds[4] += SearchSequence_Tree_5_class_3.score0(fdata);
    preds[5] += SearchSequence_Tree_5_class_4.score0(fdata);
    preds[6] += SearchSequence_Tree_5_class_5.score0(fdata);
  }
}
class SearchSequence_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        0.020979125f : 
        0.1624555f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_5_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09293914f : 
        0.08651006f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_5_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09293914f : 
        0.08651006f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchSequence_Tree_5_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09293914f : 
        0.08651006f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchSequence_Tree_5_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09293914f : 
        0.08651006f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchSequence_Tree_5_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09293914f : 
        0.08651006f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}


class SearchSequence_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchSequence_Tree_6_class_0.score0(fdata);
    preds[2] += SearchSequence_Tree_6_class_1.score0(fdata);
    preds[3] += SearchSequence_Tree_6_class_2.score0(fdata);
    preds[4] += SearchSequence_Tree_6_class_3.score0(fdata);
    preds[5] += SearchSequence_Tree_6_class_4.score0(fdata);
    preds[6] += SearchSequence_Tree_6_class_5.score0(fdata);
  }
}
class SearchSequence_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        0.01575755f : 
        0.14918487f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_6_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09216266f : 
        0.07765666f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_6_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09216266f : 
        0.07765666f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchSequence_Tree_6_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09216266f : 
        0.07765666f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchSequence_Tree_6_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09216266f : 
        0.07765666f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchSequence_Tree_6_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09216266f : 
        0.07765666f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}


class SearchSequence_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchSequence_Tree_7_class_0.score0(fdata);
    preds[2] += SearchSequence_Tree_7_class_1.score0(fdata);
    preds[3] += SearchSequence_Tree_7_class_2.score0(fdata);
    preds[4] += SearchSequence_Tree_7_class_3.score0(fdata);
    preds[5] += SearchSequence_Tree_7_class_4.score0(fdata);
    preds[6] += SearchSequence_Tree_7_class_5.score0(fdata);
  }
}
class SearchSequence_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        0.011352604f : 
        0.1392421f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_7_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09151141f : 
        0.07053591f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_7_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09151141f : 
        0.07053591f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchSequence_Tree_7_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09151141f : 
        0.07053591f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchSequence_Tree_7_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09151141f : 
        0.07053591f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchSequence_Tree_7_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09151141f : 
        0.07053591f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}


class SearchSequence_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchSequence_Tree_8_class_0.score0(fdata);
    preds[2] += SearchSequence_Tree_8_class_1.score0(fdata);
    preds[3] += SearchSequence_Tree_8_class_2.score0(fdata);
    preds[4] += SearchSequence_Tree_8_class_3.score0(fdata);
    preds[5] += SearchSequence_Tree_8_class_4.score0(fdata);
    preds[6] += SearchSequence_Tree_8_class_5.score0(fdata);
  }
}
class SearchSequence_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        0.007603131f : 
        0.13158387f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_8_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09096279f : 
        0.064721785f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_8_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09096279f : 
        0.064721785f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchSequence_Tree_8_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09096279f : 
        0.064721785f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchSequence_Tree_8_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09096279f : 
        0.064721785f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchSequence_Tree_8_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09096279f : 
        0.064721785f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}


class SearchSequence_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchSequence_Tree_9_class_0.score0(fdata);
    preds[2] += SearchSequence_Tree_9_class_1.score0(fdata);
    preds[3] += SearchSequence_Tree_9_class_2.score0(fdata);
    preds[4] += SearchSequence_Tree_9_class_3.score0(fdata);
    preds[5] += SearchSequence_Tree_9_class_4.score0(fdata);
    preds[6] += SearchSequence_Tree_9_class_5.score0(fdata);
  }
}
class SearchSequence_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        0.027037334f : 
        0.1705549f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {65, 0, 0, 0};
}

class SearchSequence_Tree_9_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0904978f : 
        0.05991629f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_9_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0904978f : 
        0.05991629f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchSequence_Tree_9_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0904978f : 
        0.05991629f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchSequence_Tree_9_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0904978f : 
        0.05991629f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchSequence_Tree_9_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0904978f : 
        0.05991629f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}


class SearchSequence_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchSequence_Tree_10_class_0.score0(fdata);
    preds[2] += SearchSequence_Tree_10_class_1.score0(fdata);
    preds[3] += SearchSequence_Tree_10_class_2.score0(fdata);
    preds[4] += SearchSequence_Tree_10_class_3.score0(fdata);
    preds[5] += SearchSequence_Tree_10_class_4.score0(fdata);
    preds[6] += SearchSequence_Tree_10_class_5.score0(fdata);
  }
}
class SearchSequence_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.004481672f : 
        0.12426842f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_10_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.089720316f : 
        0.05256165f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_10_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.089720316f : 
        0.05256165f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchSequence_Tree_10_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.089720316f : 
        0.05256165f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchSequence_Tree_10_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.089720316f : 
        0.05256165f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchSequence_Tree_10_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.089720316f : 
        0.05256165f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}


class SearchSequence_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchSequence_Tree_11_class_0.score0(fdata);
    preds[2] += SearchSequence_Tree_11_class_1.score0(fdata);
    preds[3] += SearchSequence_Tree_11_class_2.score0(fdata);
    preds[4] += SearchSequence_Tree_11_class_3.score0(fdata);
    preds[5] += SearchSequence_Tree_11_class_4.score0(fdata);
    preds[6] += SearchSequence_Tree_11_class_5.score0(fdata);
  }
}
class SearchSequence_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.0065091704f : 
        0.11983415f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_11_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0893738f : 
        0.049480356f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_11_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0893738f : 
        0.049480356f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchSequence_Tree_11_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0893738f : 
        0.049480356f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchSequence_Tree_11_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0893738f : 
        0.049480356f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchSequence_Tree_11_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0893738f : 
        0.049480356f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}


class SearchSequence_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchSequence_Tree_12_class_0.score0(fdata);
    preds[2] += SearchSequence_Tree_12_class_1.score0(fdata);
    preds[3] += SearchSequence_Tree_12_class_2.score0(fdata);
    preds[4] += SearchSequence_Tree_12_class_3.score0(fdata);
    preds[5] += SearchSequence_Tree_12_class_4.score0(fdata);
    preds[6] += SearchSequence_Tree_12_class_5.score0(fdata);
  }
}
class SearchSequence_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.008276506f : 
        0.116144374f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_12_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08907195f : 
        0.04686694f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_12_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08907195f : 
        0.04686694f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchSequence_Tree_12_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08907195f : 
        0.04686694f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchSequence_Tree_12_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08907195f : 
        0.04686694f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchSequence_Tree_12_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08907195f : 
        0.04686694f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}


class SearchSequence_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchSequence_Tree_13_class_0.score0(fdata);
    preds[2] += SearchSequence_Tree_13_class_1.score0(fdata);
    preds[3] += SearchSequence_Tree_13_class_2.score0(fdata);
    preds[4] += SearchSequence_Tree_13_class_3.score0(fdata);
    preds[5] += SearchSequence_Tree_13_class_4.score0(fdata);
    preds[6] += SearchSequence_Tree_13_class_5.score0(fdata);
  }
}
class SearchSequence_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.009822576f : 
        0.11302738f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_13_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08880561f : 
        0.04463597f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_13_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08880561f : 
        0.04463597f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchSequence_Tree_13_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08880561f : 
        0.04463597f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchSequence_Tree_13_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08880561f : 
        0.04463597f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchSequence_Tree_13_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08880561f : 
        0.04463597f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}


class SearchSequence_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchSequence_Tree_14_class_0.score0(fdata);
    preds[2] += SearchSequence_Tree_14_class_1.score0(fdata);
    preds[3] += SearchSequence_Tree_14_class_2.score0(fdata);
    preds[4] += SearchSequence_Tree_14_class_3.score0(fdata);
    preds[5] += SearchSequence_Tree_14_class_4.score0(fdata);
    preds[6] += SearchSequence_Tree_14_class_5.score0(fdata);
  }
}
class SearchSequence_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.011179846f : 
        0.11035867f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_14_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.088567436f : 
        0.042720288f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_14_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.088567436f : 
        0.042720288f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchSequence_Tree_14_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.088567436f : 
        0.042720288f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchSequence_Tree_14_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.088567436f : 
        0.042720288f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchSequence_Tree_14_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.088567436f : 
        0.042720288f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}


class SearchSequence_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchSequence_Tree_15_class_0.score0(fdata);
    preds[2] += SearchSequence_Tree_15_class_1.score0(fdata);
    preds[3] += SearchSequence_Tree_15_class_2.score0(fdata);
    preds[4] += SearchSequence_Tree_15_class_3.score0(fdata);
    preds[5] += SearchSequence_Tree_15_class_4.score0(fdata);
    preds[6] += SearchSequence_Tree_15_class_5.score0(fdata);
  }
}
class SearchSequence_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.012375659f : 
        0.10804646f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_15_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08835163f : 
        0.04106654f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_15_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08835163f : 
        0.04106654f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchSequence_Tree_15_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08835163f : 
        0.04106654f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchSequence_Tree_15_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08835163f : 
        0.04106654f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchSequence_Tree_15_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08835163f : 
        0.04106654f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}


class SearchSequence_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchSequence_Tree_16_class_0.score0(fdata);
    preds[2] += SearchSequence_Tree_16_class_1.score0(fdata);
    preds[3] += SearchSequence_Tree_16_class_2.score0(fdata);
    preds[4] += SearchSequence_Tree_16_class_3.score0(fdata);
    preds[5] += SearchSequence_Tree_16_class_4.score0(fdata);
    preds[6] += SearchSequence_Tree_16_class_5.score0(fdata);
  }
}
class SearchSequence_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        0.0033463861f : 
        0.13603063f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {65, 0, 0, 0};
}

class SearchSequence_Tree_16_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08815359f : 
        0.039632007f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_16_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08815359f : 
        0.039632007f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchSequence_Tree_16_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08815359f : 
        0.039632007f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchSequence_Tree_16_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08815359f : 
        0.039632007f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchSequence_Tree_16_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08815359f : 
        0.039632007f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}


class SearchSequence_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchSequence_Tree_17_class_0.score0(fdata);
    preds[2] += SearchSequence_Tree_17_class_1.score0(fdata);
    preds[3] += SearchSequence_Tree_17_class_2.score0(fdata);
    preds[4] += SearchSequence_Tree_17_class_3.score0(fdata);
    preds[5] += SearchSequence_Tree_17_class_4.score0(fdata);
    preds[6] += SearchSequence_Tree_17_class_5.score0(fdata);
  }
}
class SearchSequence_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.019881943f : 
        0.106587596f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_17_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08754385f : 
        0.034687195f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_17_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08754385f : 
        0.034687195f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchSequence_Tree_17_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08754385f : 
        0.034687195f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchSequence_Tree_17_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08754385f : 
        0.034687195f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchSequence_Tree_17_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08754385f : 
        0.034687195f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}


class SearchSequence_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchSequence_Tree_18_class_0.score0(fdata);
    preds[2] += SearchSequence_Tree_18_class_1.score0(fdata);
    preds[3] += SearchSequence_Tree_18_class_2.score0(fdata);
    preds[4] += SearchSequence_Tree_18_class_3.score0(fdata);
    preds[5] += SearchSequence_Tree_18_class_4.score0(fdata);
    preds[6] += SearchSequence_Tree_18_class_5.score0(fdata);
  }
}
class SearchSequence_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.02045845f : 
        0.10470265f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_18_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0873837f : 
        0.03386736f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_18_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0873837f : 
        0.03386736f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchSequence_Tree_18_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0873837f : 
        0.03386736f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchSequence_Tree_18_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0873837f : 
        0.03386736f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchSequence_Tree_18_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0873837f : 
        0.03386736f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}


class SearchSequence_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchSequence_Tree_19_class_0.score0(fdata);
    preds[2] += SearchSequence_Tree_19_class_1.score0(fdata);
    preds[3] += SearchSequence_Tree_19_class_2.score0(fdata);
    preds[4] += SearchSequence_Tree_19_class_3.score0(fdata);
    preds[5] += SearchSequence_Tree_19_class_4.score0(fdata);
    preds[6] += SearchSequence_Tree_19_class_5.score0(fdata);
  }
}
class SearchSequence_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.020960918f : 
        0.10302261f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_19_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08723316f : 
        0.033145446f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_19_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08723316f : 
        0.033145446f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchSequence_Tree_19_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08723316f : 
        0.033145446f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchSequence_Tree_19_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08723316f : 
        0.033145446f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchSequence_Tree_19_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08723316f : 
        0.033145446f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}


class SearchSequence_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchSequence_Tree_20_class_0.score0(fdata);
    preds[2] += SearchSequence_Tree_20_class_1.score0(fdata);
    preds[3] += SearchSequence_Tree_20_class_2.score0(fdata);
    preds[4] += SearchSequence_Tree_20_class_3.score0(fdata);
    preds[5] += SearchSequence_Tree_20_class_4.score0(fdata);
    preds[6] += SearchSequence_Tree_20_class_5.score0(fdata);
  }
}
class SearchSequence_Tree_20_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.021400375f : 
        0.10151665f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_20_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08709057f : 
        0.032507587f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_20_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08709057f : 
        0.032507587f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchSequence_Tree_20_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08709057f : 
        0.032507587f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchSequence_Tree_20_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08709057f : 
        0.032507587f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchSequence_Tree_20_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08709057f : 
        0.032507587f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}


class SearchSequence_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchSequence_Tree_21_class_0.score0(fdata);
    preds[2] += SearchSequence_Tree_21_class_1.score0(fdata);
    preds[3] += SearchSequence_Tree_21_class_2.score0(fdata);
    preds[4] += SearchSequence_Tree_21_class_3.score0(fdata);
    preds[5] += SearchSequence_Tree_21_class_4.score0(fdata);
    preds[6] += SearchSequence_Tree_21_class_5.score0(fdata);
  }
}
class SearchSequence_Tree_21_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.02178636f : 
        0.10016001f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_21_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08695463f : 
        0.031942412f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_21_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08695463f : 
        0.031942412f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchSequence_Tree_21_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08695463f : 
        0.031942412f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchSequence_Tree_21_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08695463f : 
        0.031942412f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchSequence_Tree_21_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08695463f : 
        0.031942412f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}


class SearchSequence_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchSequence_Tree_22_class_0.score0(fdata);
    preds[2] += SearchSequence_Tree_22_class_1.score0(fdata);
    preds[3] += SearchSequence_Tree_22_class_2.score0(fdata);
    preds[4] += SearchSequence_Tree_22_class_3.score0(fdata);
    preds[5] += SearchSequence_Tree_22_class_4.score0(fdata);
    preds[6] += SearchSequence_Tree_22_class_5.score0(fdata);
  }
}
class SearchSequence_Tree_22_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.022127096f : 
        0.09893254f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_22_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08682436f : 
        0.031440485f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_22_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08682436f : 
        0.031440485f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchSequence_Tree_22_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08682436f : 
        0.031440485f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchSequence_Tree_22_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08682436f : 
        0.031440485f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchSequence_Tree_22_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08682436f : 
        0.031440485f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}


class SearchSequence_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchSequence_Tree_23_class_0.score0(fdata);
    preds[2] += SearchSequence_Tree_23_class_1.score0(fdata);
    preds[3] += SearchSequence_Tree_23_class_2.score0(fdata);
    preds[4] += SearchSequence_Tree_23_class_3.score0(fdata);
    preds[5] += SearchSequence_Tree_23_class_4.score0(fdata);
    preds[6] += SearchSequence_Tree_23_class_5.score0(fdata);
  }
}
class SearchSequence_Tree_23_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.022429602f : 
        0.09781769f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_23_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08669899f : 
        0.030993953f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_23_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08669899f : 
        0.030993953f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchSequence_Tree_23_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08669899f : 
        0.030993953f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchSequence_Tree_23_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08669899f : 
        0.030993953f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchSequence_Tree_23_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08669899f : 
        0.030993953f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}


class SearchSequence_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchSequence_Tree_24_class_0.score0(fdata);
    preds[2] += SearchSequence_Tree_24_class_1.score0(fdata);
    preds[3] += SearchSequence_Tree_24_class_2.score0(fdata);
    preds[4] += SearchSequence_Tree_24_class_3.score0(fdata);
    preds[5] += SearchSequence_Tree_24_class_4.score0(fdata);
    preds[6] += SearchSequence_Tree_24_class_5.score0(fdata);
  }
}
class SearchSequence_Tree_24_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.022699915f : 
        0.09680166f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_24_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08657792f : 
        0.03059624f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_24_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08657792f : 
        0.03059624f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchSequence_Tree_24_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08657792f : 
        0.03059624f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchSequence_Tree_24_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08657792f : 
        0.03059624f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchSequence_Tree_24_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08657792f : 
        0.03059624f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}


class SearchSequence_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchSequence_Tree_25_class_0.score0(fdata);
    preds[2] += SearchSequence_Tree_25_class_1.score0(fdata);
    preds[3] += SearchSequence_Tree_25_class_2.score0(fdata);
    preds[4] += SearchSequence_Tree_25_class_3.score0(fdata);
    preds[5] += SearchSequence_Tree_25_class_4.score0(fdata);
    preds[6] += SearchSequence_Tree_25_class_5.score0(fdata);
  }
}
class SearchSequence_Tree_25_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.022943115f : 
        0.09587293f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_25_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08646071f : 
        0.030241739f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_25_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08646071f : 
        0.030241739f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchSequence_Tree_25_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08646071f : 
        0.030241739f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchSequence_Tree_25_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08646071f : 
        0.030241739f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchSequence_Tree_25_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08646071f : 
        0.030241739f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}


class SearchSequence_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchSequence_Tree_26_class_0.score0(fdata);
    preds[2] += SearchSequence_Tree_26_class_1.score0(fdata);
    preds[3] += SearchSequence_Tree_26_class_2.score0(fdata);
    preds[4] += SearchSequence_Tree_26_class_3.score0(fdata);
    preds[5] += SearchSequence_Tree_26_class_4.score0(fdata);
    preds[6] += SearchSequence_Tree_26_class_5.score0(fdata);
  }
}
class SearchSequence_Tree_26_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.023163516f : 
        0.09502171f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_26_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08634699f : 
        0.029925639f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_26_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08634699f : 
        0.029925639f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchSequence_Tree_26_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08634699f : 
        0.029925639f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchSequence_Tree_26_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08634699f : 
        0.029925639f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchSequence_Tree_26_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08634699f : 
        0.029925639f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}


class SearchSequence_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchSequence_Tree_27_class_0.score0(fdata);
    preds[2] += SearchSequence_Tree_27_class_1.score0(fdata);
    preds[3] += SearchSequence_Tree_27_class_2.score0(fdata);
    preds[4] += SearchSequence_Tree_27_class_3.score0(fdata);
    preds[5] += SearchSequence_Tree_27_class_4.score0(fdata);
    preds[6] += SearchSequence_Tree_27_class_5.score0(fdata);
  }
}
class SearchSequence_Tree_27_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.012332108f : 
        0.108731605f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {65, 0, 0, 0};
}

class SearchSequence_Tree_27_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0862365f : 
        0.02964384f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_27_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0862365f : 
        0.02964384f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchSequence_Tree_27_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0862365f : 
        0.02964384f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchSequence_Tree_27_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0862365f : 
        0.02964384f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchSequence_Tree_27_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0862365f : 
        0.02964384f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}


class SearchSequence_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchSequence_Tree_28_class_0.score0(fdata);
    preds[2] += SearchSequence_Tree_28_class_1.score0(fdata);
    preds[3] += SearchSequence_Tree_28_class_2.score0(fdata);
    preds[4] += SearchSequence_Tree_28_class_3.score0(fdata);
    preds[5] += SearchSequence_Tree_28_class_4.score0(fdata);
    preds[6] += SearchSequence_Tree_28_class_5.score0(fdata);
  }
}
class SearchSequence_Tree_28_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.028560342f : 
        0.09468824f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_28_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.085801885f : 
        0.025465483f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_28_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.085801885f : 
        0.025465483f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchSequence_Tree_28_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.085801885f : 
        0.025465483f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchSequence_Tree_28_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.085801885f : 
        0.025465483f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchSequence_Tree_28_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.085801885f : 
        0.025465483f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}


class SearchSequence_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchSequence_Tree_29_class_0.score0(fdata);
    preds[2] += SearchSequence_Tree_29_class_1.score0(fdata);
    preds[3] += SearchSequence_Tree_29_class_2.score0(fdata);
    preds[4] += SearchSequence_Tree_29_class_3.score0(fdata);
    preds[5] += SearchSequence_Tree_29_class_4.score0(fdata);
    preds[6] += SearchSequence_Tree_29_class_5.score0(fdata);
  }
}
class SearchSequence_Tree_29_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.028515035f : 
        0.09389354f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_29_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08571573f : 
        0.025465f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class SearchSequence_Tree_29_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08571573f : 
        0.025465f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchSequence_Tree_29_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08571573f : 
        0.025465f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0};
}

class SearchSequence_Tree_29_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08571573f : 
        0.025465f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
}

class SearchSequence_Tree_29_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08571573f : 
        0.025465f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 0, 0};
}


