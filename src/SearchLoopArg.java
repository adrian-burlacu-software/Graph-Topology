
/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2020-02-09T20:42:33.405-05:00
  3.24.0.5
  
  Standalone prediction code with sample test data for GBMModel named SearchLoopArg

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://192.168.0.103:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://192.168.0.103:54321/3/Models.java/SearchLoopArg > SearchLoopArg.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m SearchLoopArg.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="SearchLoopArg", algorithm="gbm")
public class SearchLoopArg extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 1; }
  public int nclasses() { return 5; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_SearchLoopArg.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* currentStateIn */ SearchLoopArg_ColInfo_0.VALUES,
    /* argumentOut */ SearchLoopArg_ColInfo_1.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.1,0.2,0.2,0.1,0.4};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {0.1,0.2,0.2,0.1,0.4};

  public SearchLoopArg() { super(NAMES,DOMAINS,"argumentOut"); }
  public String getUUID() { return Long.toString(469548106145278578L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    SearchLoopArg_Forest_0.score0(data,preds);
    SearchLoopArg_Forest_1.score0(data,preds);
    SearchLoopArg_Forest_2.score0(data,preds);
    SearchLoopArg_Forest_3.score0(data,preds);
    SearchLoopArg_Forest_4.score0(data,preds);
    SearchLoopArg_Forest_5.score0(data,preds);
    SearchLoopArg_Forest_6.score0(data,preds);
    SearchLoopArg_Forest_7.score0(data,preds);
    SearchLoopArg_Forest_8.score0(data,preds);
    SearchLoopArg_Forest_9.score0(data,preds);
    SearchLoopArg_Forest_10.score0(data,preds);
    SearchLoopArg_Forest_11.score0(data,preds);
    SearchLoopArg_Forest_12.score0(data,preds);
    SearchLoopArg_Forest_13.score0(data,preds);
    SearchLoopArg_Forest_14.score0(data,preds);
    SearchLoopArg_Forest_15.score0(data,preds);
    SearchLoopArg_Forest_16.score0(data,preds);
    SearchLoopArg_Forest_17.score0(data,preds);
    SearchLoopArg_Forest_18.score0(data,preds);
    SearchLoopArg_Forest_19.score0(data,preds);
    SearchLoopArg_Forest_20.score0(data,preds);
    SearchLoopArg_Forest_21.score0(data,preds);
    SearchLoopArg_Forest_22.score0(data,preds);
    SearchLoopArg_Forest_23.score0(data,preds);
    SearchLoopArg_Forest_24.score0(data,preds);
    SearchLoopArg_Forest_25.score0(data,preds);
    SearchLoopArg_Forest_26.score0(data,preds);
    SearchLoopArg_Forest_27.score0(data,preds);
    SearchLoopArg_Forest_28.score0(data,preds);
    SearchLoopArg_Forest_29.score0(data,preds);
    hex.genmodel.GenModel.GBM_rescale(preds);
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_SearchLoopArg implements java.io.Serializable {
  public static final String[] VALUES = new String[1];
  static {
    NamesHolder_SearchLoopArg_0.fill(VALUES);
  }
  static final class NamesHolder_SearchLoopArg_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "currentStateIn";
    }
  }
}
// The class representing column currentStateIn
class SearchLoopArg_ColInfo_0 implements java.io.Serializable {
  public static final String[] VALUES = new String[10];
  static {
    SearchLoopArg_ColInfo_0_0.fill(VALUES);
  }
  static final class SearchLoopArg_ColInfo_0_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "-1";
      sa[1] = "0";
      sa[2] = "1";
      sa[3] = "2";
      sa[4] = "3";
      sa[5] = "4";
      sa[6] = "5";
      sa[7] = "6";
      sa[8] = "7";
      sa[9] = "8";
    }
  }
}
// The class representing column argumentOut
class SearchLoopArg_ColInfo_1 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    SearchLoopArg_ColInfo_1_0.fill(VALUES);
  }
  static final class SearchLoopArg_ColInfo_1_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "[0]";
      sa[1] = "[1]";
      sa[2] = "[2,1]";
      sa[3] = "[2]";
      sa[4] = "[]";
    }
  }
}

class SearchLoopArg_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchLoopArg_Tree_0_class_0.score0(fdata);
    preds[2] += SearchLoopArg_Tree_0_class_1.score0(fdata);
    preds[3] += SearchLoopArg_Tree_0_class_2.score0(fdata);
    preds[4] += SearchLoopArg_Tree_0_class_3.score0(fdata);
    preds[5] += SearchLoopArg_Tree_0_class_4.score0(fdata);
  }
}
class SearchLoopArg_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.1f : 
        0.40000004f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchLoopArg_Tree_0_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.1f : 
        0.40000004f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {40, 0, 0, 0};
}

class SearchLoopArg_Tree_0_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.1f : 
        0.40000004f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
}

class SearchLoopArg_Tree_0_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.1f : 
        0.40000004f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 0, 0, 0};
}

class SearchLoopArg_Tree_0_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.1f : 
        0.40000004f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {11001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {19, 2, 0, 0};
}


class SearchLoopArg_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchLoopArg_Tree_1_class_0.score0(fdata);
    preds[2] += SearchLoopArg_Tree_1_class_1.score0(fdata);
    preds[3] += SearchLoopArg_Tree_1_class_2.score0(fdata);
    preds[4] += SearchLoopArg_Tree_1_class_3.score0(fdata);
    preds[5] += SearchLoopArg_Tree_1_class_4.score0(fdata);
  }
}
class SearchLoopArg_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09720904f : 
        0.2740898f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchLoopArg_Tree_1_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09720904f : 
        0.2740898f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {40, 0, 0, 0};
}

class SearchLoopArg_Tree_1_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09720904f : 
        0.2740898f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
}

class SearchLoopArg_Tree_1_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09720904f : 
        0.2740898f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 0, 0, 0};
}

class SearchLoopArg_Tree_1_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09720904f : 
        0.2740898f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {11001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {19, 2, 0, 0};
}


class SearchLoopArg_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchLoopArg_Tree_2_class_0.score0(fdata);
    preds[2] += SearchLoopArg_Tree_2_class_1.score0(fdata);
    preds[3] += SearchLoopArg_Tree_2_class_2.score0(fdata);
    preds[4] += SearchLoopArg_Tree_2_class_3.score0(fdata);
    preds[5] += SearchLoopArg_Tree_2_class_4.score0(fdata);
  }
}
class SearchLoopArg_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09484226f : 
        0.21389048f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchLoopArg_Tree_2_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09484226f : 
        0.21389048f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {40, 0, 0, 0};
}

class SearchLoopArg_Tree_2_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09484226f : 
        0.21389048f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
}

class SearchLoopArg_Tree_2_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09484226f : 
        0.21389048f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 0, 0, 0};
}

class SearchLoopArg_Tree_2_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09484226f : 
        0.21389048f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {11001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {19, 2, 0, 0};
}


class SearchLoopArg_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchLoopArg_Tree_3_class_0.score0(fdata);
    preds[2] += SearchLoopArg_Tree_3_class_1.score0(fdata);
    preds[3] += SearchLoopArg_Tree_3_class_2.score0(fdata);
    preds[4] += SearchLoopArg_Tree_3_class_3.score0(fdata);
    preds[5] += SearchLoopArg_Tree_3_class_4.score0(fdata);
  }
}
class SearchLoopArg_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.092790835f : 
        0.17832607f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchLoopArg_Tree_3_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.092790835f : 
        0.17832607f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {40, 0, 0, 0};
}

class SearchLoopArg_Tree_3_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.092790835f : 
        0.17832607f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
}

class SearchLoopArg_Tree_3_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.092790835f : 
        0.17832607f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 0, 0, 0};
}

class SearchLoopArg_Tree_3_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.092790835f : 
        0.17832607f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {11001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {19, 2, 0, 0};
}


class SearchLoopArg_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchLoopArg_Tree_4_class_0.score0(fdata);
    preds[2] += SearchLoopArg_Tree_4_class_1.score0(fdata);
    preds[3] += SearchLoopArg_Tree_4_class_2.score0(fdata);
    preds[4] += SearchLoopArg_Tree_4_class_3.score0(fdata);
    preds[5] += SearchLoopArg_Tree_4_class_4.score0(fdata);
  }
}
class SearchLoopArg_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.091007136f : 
        0.15497632f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchLoopArg_Tree_4_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.091007136f : 
        0.15497632f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {40, 0, 0, 0};
}

class SearchLoopArg_Tree_4_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.091007136f : 
        0.15497632f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
}

class SearchLoopArg_Tree_4_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.091007136f : 
        0.15497632f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 0, 0, 0};
}

class SearchLoopArg_Tree_4_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.091007136f : 
        0.15497632f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {11001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {19, 2, 0, 0};
}


class SearchLoopArg_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchLoopArg_Tree_5_class_0.score0(fdata);
    preds[2] += SearchLoopArg_Tree_5_class_1.score0(fdata);
    preds[3] += SearchLoopArg_Tree_5_class_2.score0(fdata);
    preds[4] += SearchLoopArg_Tree_5_class_3.score0(fdata);
    preds[5] += SearchLoopArg_Tree_5_class_4.score0(fdata);
  }
}
class SearchLoopArg_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0894582f : 
        0.13862662f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchLoopArg_Tree_5_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0894582f : 
        0.13862662f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {40, 0, 0, 0};
}

class SearchLoopArg_Tree_5_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0894582f : 
        0.13862662f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
}

class SearchLoopArg_Tree_5_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0894582f : 
        0.13862662f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 0, 0, 0};
}

class SearchLoopArg_Tree_5_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0894582f : 
        0.13862662f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {11001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {19, 2, 0, 0};
}


class SearchLoopArg_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchLoopArg_Tree_6_class_0.score0(fdata);
    preds[2] += SearchLoopArg_Tree_6_class_1.score0(fdata);
    preds[3] += SearchLoopArg_Tree_6_class_2.score0(fdata);
    preds[4] += SearchLoopArg_Tree_6_class_3.score0(fdata);
    preds[5] += SearchLoopArg_Tree_6_class_4.score0(fdata);
  }
}
class SearchLoopArg_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08811636f : 
        0.12667012f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchLoopArg_Tree_6_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08811636f : 
        0.12667012f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {40, 0, 0, 0};
}

class SearchLoopArg_Tree_6_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08811636f : 
        0.12667012f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
}

class SearchLoopArg_Tree_6_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08811636f : 
        0.12667012f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 0, 0, 0};
}

class SearchLoopArg_Tree_6_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08811636f : 
        0.12667012f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {11001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {19, 2, 0, 0};
}


class SearchLoopArg_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchLoopArg_Tree_7_class_0.score0(fdata);
    preds[2] += SearchLoopArg_Tree_7_class_1.score0(fdata);
    preds[3] += SearchLoopArg_Tree_7_class_2.score0(fdata);
    preds[4] += SearchLoopArg_Tree_7_class_3.score0(fdata);
    preds[5] += SearchLoopArg_Tree_7_class_4.score0(fdata);
  }
}
class SearchLoopArg_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086956844f : 
        0.11764943f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchLoopArg_Tree_7_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086956844f : 
        0.11764943f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {40, 0, 0, 0};
}

class SearchLoopArg_Tree_7_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086956844f : 
        0.11764943f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
}

class SearchLoopArg_Tree_7_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086956844f : 
        0.11764943f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 0, 0, 0};
}

class SearchLoopArg_Tree_7_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086956844f : 
        0.11764943f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {11001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {19, 2, 0, 0};
}


class SearchLoopArg_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchLoopArg_Tree_8_class_0.score0(fdata);
    preds[2] += SearchLoopArg_Tree_8_class_1.score0(fdata);
    preds[3] += SearchLoopArg_Tree_8_class_2.score0(fdata);
    preds[4] += SearchLoopArg_Tree_8_class_3.score0(fdata);
    preds[5] += SearchLoopArg_Tree_8_class_4.score0(fdata);
  }
}
class SearchLoopArg_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08595717f : 
        0.11068308f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchLoopArg_Tree_8_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08595717f : 
        0.11068308f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {40, 0, 0, 0};
}

class SearchLoopArg_Tree_8_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08595717f : 
        0.11068308f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
}

class SearchLoopArg_Tree_8_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08595717f : 
        0.11068308f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 0, 0, 0};
}

class SearchLoopArg_Tree_8_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08595717f : 
        0.11068308f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {11001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {19, 2, 0, 0};
}


class SearchLoopArg_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchLoopArg_Tree_9_class_0.score0(fdata);
    preds[2] += SearchLoopArg_Tree_9_class_1.score0(fdata);
    preds[3] += SearchLoopArg_Tree_9_class_2.score0(fdata);
    preds[4] += SearchLoopArg_Tree_9_class_3.score0(fdata);
    preds[5] += SearchLoopArg_Tree_9_class_4.score0(fdata);
  }
}
class SearchLoopArg_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08509699f : 
        0.10520572f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchLoopArg_Tree_9_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08509699f : 
        0.10520572f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {40, 0, 0, 0};
}

class SearchLoopArg_Tree_9_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08509699f : 
        0.10520572f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
}

class SearchLoopArg_Tree_9_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08509699f : 
        0.10520572f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 0, 0, 0};
}

class SearchLoopArg_Tree_9_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08509699f : 
        0.10520572f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {11001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {19, 2, 0, 0};
}


class SearchLoopArg_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchLoopArg_Tree_10_class_0.score0(fdata);
    preds[2] += SearchLoopArg_Tree_10_class_1.score0(fdata);
    preds[3] += SearchLoopArg_Tree_10_class_2.score0(fdata);
    preds[4] += SearchLoopArg_Tree_10_class_3.score0(fdata);
    preds[5] += SearchLoopArg_Tree_10_class_4.score0(fdata);
  }
}
class SearchLoopArg_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08435808f : 
        0.1008378f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchLoopArg_Tree_10_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08435808f : 
        0.1008378f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {40, 0, 0, 0};
}

class SearchLoopArg_Tree_10_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08435808f : 
        0.1008378f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
}

class SearchLoopArg_Tree_10_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08435808f : 
        0.1008378f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 0, 0, 0};
}

class SearchLoopArg_Tree_10_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08435808f : 
        0.1008378f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {11001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {19, 2, 0, 0};
}


class SearchLoopArg_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchLoopArg_Tree_11_class_0.score0(fdata);
    preds[2] += SearchLoopArg_Tree_11_class_1.score0(fdata);
    preds[3] += SearchLoopArg_Tree_11_class_2.score0(fdata);
    preds[4] += SearchLoopArg_Tree_11_class_3.score0(fdata);
    preds[5] += SearchLoopArg_Tree_11_class_4.score0(fdata);
  }
}
class SearchLoopArg_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0837242f : 
        0.09731499f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchLoopArg_Tree_11_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0837242f : 
        0.09731499f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {40, 0, 0, 0};
}

class SearchLoopArg_Tree_11_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0837242f : 
        0.09731499f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
}

class SearchLoopArg_Tree_11_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0837242f : 
        0.09731499f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 0, 0, 0};
}

class SearchLoopArg_Tree_11_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0837242f : 
        0.09731499f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {11001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {19, 2, 0, 0};
}


class SearchLoopArg_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchLoopArg_Tree_12_class_0.score0(fdata);
    preds[2] += SearchLoopArg_Tree_12_class_1.score0(fdata);
    preds[3] += SearchLoopArg_Tree_12_class_2.score0(fdata);
    preds[4] += SearchLoopArg_Tree_12_class_3.score0(fdata);
    preds[5] += SearchLoopArg_Tree_12_class_4.score0(fdata);
  }
}
class SearchLoopArg_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08318105f : 
        0.09444767f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchLoopArg_Tree_12_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08318105f : 
        0.09444767f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {40, 0, 0, 0};
}

class SearchLoopArg_Tree_12_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08318105f : 
        0.09444767f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
}

class SearchLoopArg_Tree_12_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08318105f : 
        0.09444767f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 0, 0, 0};
}

class SearchLoopArg_Tree_12_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08318105f : 
        0.09444767f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {11001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {19, 2, 0, 0};
}


class SearchLoopArg_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchLoopArg_Tree_13_class_0.score0(fdata);
    preds[2] += SearchLoopArg_Tree_13_class_1.score0(fdata);
    preds[3] += SearchLoopArg_Tree_13_class_2.score0(fdata);
    preds[4] += SearchLoopArg_Tree_13_class_3.score0(fdata);
    preds[5] += SearchLoopArg_Tree_13_class_4.score0(fdata);
  }
}
class SearchLoopArg_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08271608f : 
        0.09209636f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchLoopArg_Tree_13_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08271608f : 
        0.09209636f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {40, 0, 0, 0};
}

class SearchLoopArg_Tree_13_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08271608f : 
        0.09209636f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
}

class SearchLoopArg_Tree_13_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08271608f : 
        0.09209636f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 0, 0, 0};
}

class SearchLoopArg_Tree_13_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08271608f : 
        0.09209636f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {11001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {19, 2, 0, 0};
}


class SearchLoopArg_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchLoopArg_Tree_14_class_0.score0(fdata);
    preds[2] += SearchLoopArg_Tree_14_class_1.score0(fdata);
    preds[3] += SearchLoopArg_Tree_14_class_2.score0(fdata);
    preds[4] += SearchLoopArg_Tree_14_class_3.score0(fdata);
    preds[5] += SearchLoopArg_Tree_14_class_4.score0(fdata);
  }
}
class SearchLoopArg_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08231833f : 
        0.09015628f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchLoopArg_Tree_14_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08231833f : 
        0.09015628f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {40, 0, 0, 0};
}

class SearchLoopArg_Tree_14_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08231833f : 
        0.09015628f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
}

class SearchLoopArg_Tree_14_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08231833f : 
        0.09015628f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 0, 0, 0};
}

class SearchLoopArg_Tree_14_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08231833f : 
        0.09015628f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {11001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {19, 2, 0, 0};
}


class SearchLoopArg_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchLoopArg_Tree_15_class_0.score0(fdata);
    preds[2] += SearchLoopArg_Tree_15_class_1.score0(fdata);
    preds[3] += SearchLoopArg_Tree_15_class_2.score0(fdata);
    preds[4] += SearchLoopArg_Tree_15_class_3.score0(fdata);
    preds[5] += SearchLoopArg_Tree_15_class_4.score0(fdata);
  }
}
class SearchLoopArg_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.081978306f : 
        0.08854732f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchLoopArg_Tree_15_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.081978306f : 
        0.08854732f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {40, 0, 0, 0};
}

class SearchLoopArg_Tree_15_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.081978306f : 
        0.08854732f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
}

class SearchLoopArg_Tree_15_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.081978306f : 
        0.08854732f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 0, 0, 0};
}

class SearchLoopArg_Tree_15_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.081978306f : 
        0.08854732f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {11001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {19, 2, 0, 0};
}


class SearchLoopArg_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchLoopArg_Tree_16_class_0.score0(fdata);
    preds[2] += SearchLoopArg_Tree_16_class_1.score0(fdata);
    preds[3] += SearchLoopArg_Tree_16_class_2.score0(fdata);
    preds[4] += SearchLoopArg_Tree_16_class_3.score0(fdata);
    preds[5] += SearchLoopArg_Tree_16_class_4.score0(fdata);
  }
}
class SearchLoopArg_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08168778f : 
        0.08720728f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchLoopArg_Tree_16_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08168778f : 
        0.08720728f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {40, 0, 0, 0};
}

class SearchLoopArg_Tree_16_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08168778f : 
        0.08720728f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
}

class SearchLoopArg_Tree_16_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08168778f : 
        0.08720728f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 0, 0, 0};
}

class SearchLoopArg_Tree_16_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08168778f : 
        0.08720728f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {11001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {19, 2, 0, 0};
}


class SearchLoopArg_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchLoopArg_Tree_17_class_0.score0(fdata);
    preds[2] += SearchLoopArg_Tree_17_class_1.score0(fdata);
    preds[3] += SearchLoopArg_Tree_17_class_2.score0(fdata);
    preds[4] += SearchLoopArg_Tree_17_class_3.score0(fdata);
    preds[5] += SearchLoopArg_Tree_17_class_4.score0(fdata);
  }
}
class SearchLoopArg_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08143965f : 
        0.08608726f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchLoopArg_Tree_17_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08143965f : 
        0.08608726f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {40, 0, 0, 0};
}

class SearchLoopArg_Tree_17_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08143965f : 
        0.08608726f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
}

class SearchLoopArg_Tree_17_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08143965f : 
        0.08608726f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 0, 0, 0};
}

class SearchLoopArg_Tree_17_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08143965f : 
        0.08608726f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {11001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {19, 2, 0, 0};
}


class SearchLoopArg_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchLoopArg_Tree_18_class_0.score0(fdata);
    preds[2] += SearchLoopArg_Tree_18_class_1.score0(fdata);
    preds[3] += SearchLoopArg_Tree_18_class_2.score0(fdata);
    preds[4] += SearchLoopArg_Tree_18_class_3.score0(fdata);
    preds[5] += SearchLoopArg_Tree_18_class_4.score0(fdata);
  }
}
class SearchLoopArg_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08122782f : 
        0.08514832f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchLoopArg_Tree_18_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08122782f : 
        0.08514832f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {40, 0, 0, 0};
}

class SearchLoopArg_Tree_18_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08122782f : 
        0.08514832f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
}

class SearchLoopArg_Tree_18_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08122782f : 
        0.08514832f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 0, 0, 0};
}

class SearchLoopArg_Tree_18_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08122782f : 
        0.08514832f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {11001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {19, 2, 0, 0};
}


class SearchLoopArg_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchLoopArg_Tree_19_class_0.score0(fdata);
    preds[2] += SearchLoopArg_Tree_19_class_1.score0(fdata);
    preds[3] += SearchLoopArg_Tree_19_class_2.score0(fdata);
    preds[4] += SearchLoopArg_Tree_19_class_3.score0(fdata);
    preds[5] += SearchLoopArg_Tree_19_class_4.score0(fdata);
  }
}
class SearchLoopArg_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08104701f : 
        0.08435922f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchLoopArg_Tree_19_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08104701f : 
        0.08435922f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {40, 0, 0, 0};
}

class SearchLoopArg_Tree_19_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08104701f : 
        0.08435922f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
}

class SearchLoopArg_Tree_19_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08104701f : 
        0.08435922f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 0, 0, 0};
}

class SearchLoopArg_Tree_19_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08104701f : 
        0.08435922f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {11001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {19, 2, 0, 0};
}


class SearchLoopArg_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchLoopArg_Tree_20_class_0.score0(fdata);
    preds[2] += SearchLoopArg_Tree_20_class_1.score0(fdata);
    preds[3] += SearchLoopArg_Tree_20_class_2.score0(fdata);
    preds[4] += SearchLoopArg_Tree_20_class_3.score0(fdata);
    preds[5] += SearchLoopArg_Tree_20_class_4.score0(fdata);
  }
}
class SearchLoopArg_Tree_20_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08089274f : 
        0.08369466f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchLoopArg_Tree_20_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08089274f : 
        0.08369466f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {40, 0, 0, 0};
}

class SearchLoopArg_Tree_20_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08089274f : 
        0.08369466f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
}

class SearchLoopArg_Tree_20_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08089274f : 
        0.08369466f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 0, 0, 0};
}

class SearchLoopArg_Tree_20_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08089274f : 
        0.08369466f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {11001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {19, 2, 0, 0};
}


class SearchLoopArg_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchLoopArg_Tree_21_class_0.score0(fdata);
    preds[2] += SearchLoopArg_Tree_21_class_1.score0(fdata);
    preds[3] += SearchLoopArg_Tree_21_class_2.score0(fdata);
    preds[4] += SearchLoopArg_Tree_21_class_3.score0(fdata);
    preds[5] += SearchLoopArg_Tree_21_class_4.score0(fdata);
  }
}
class SearchLoopArg_Tree_21_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08076113f : 
        0.083133966f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchLoopArg_Tree_21_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08076113f : 
        0.083133966f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {40, 0, 0, 0};
}

class SearchLoopArg_Tree_21_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08076113f : 
        0.083133966f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
}

class SearchLoopArg_Tree_21_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08076113f : 
        0.083133966f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 0, 0, 0};
}

class SearchLoopArg_Tree_21_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08076113f : 
        0.083133966f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {11001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {19, 2, 0, 0};
}


class SearchLoopArg_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchLoopArg_Tree_22_class_0.score0(fdata);
    preds[2] += SearchLoopArg_Tree_22_class_1.score0(fdata);
    preds[3] += SearchLoopArg_Tree_22_class_2.score0(fdata);
    preds[4] += SearchLoopArg_Tree_22_class_3.score0(fdata);
    preds[5] += SearchLoopArg_Tree_22_class_4.score0(fdata);
  }
}
class SearchLoopArg_Tree_22_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08064887f : 
        0.082660206f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchLoopArg_Tree_22_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08064887f : 
        0.082660206f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {40, 0, 0, 0};
}

class SearchLoopArg_Tree_22_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08064887f : 
        0.082660206f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
}

class SearchLoopArg_Tree_22_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08064887f : 
        0.082660206f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 0, 0, 0};
}

class SearchLoopArg_Tree_22_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08064887f : 
        0.082660206f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {11001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {19, 2, 0, 0};
}


class SearchLoopArg_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchLoopArg_Tree_23_class_0.score0(fdata);
    preds[2] += SearchLoopArg_Tree_23_class_1.score0(fdata);
    preds[3] += SearchLoopArg_Tree_23_class_2.score0(fdata);
    preds[4] += SearchLoopArg_Tree_23_class_3.score0(fdata);
    preds[5] += SearchLoopArg_Tree_23_class_4.score0(fdata);
  }
}
class SearchLoopArg_Tree_23_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08055313f : 
        0.082259394f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchLoopArg_Tree_23_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08055313f : 
        0.082259394f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {40, 0, 0, 0};
}

class SearchLoopArg_Tree_23_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08055313f : 
        0.082259394f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
}

class SearchLoopArg_Tree_23_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08055313f : 
        0.082259394f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 0, 0, 0};
}

class SearchLoopArg_Tree_23_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08055313f : 
        0.082259394f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {11001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {19, 2, 0, 0};
}


class SearchLoopArg_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchLoopArg_Tree_24_class_0.score0(fdata);
    preds[2] += SearchLoopArg_Tree_24_class_1.score0(fdata);
    preds[3] += SearchLoopArg_Tree_24_class_2.score0(fdata);
    preds[4] += SearchLoopArg_Tree_24_class_3.score0(fdata);
    preds[5] += SearchLoopArg_Tree_24_class_4.score0(fdata);
  }
}
class SearchLoopArg_Tree_24_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08047149f : 
        0.08191992f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchLoopArg_Tree_24_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08047149f : 
        0.08191992f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {40, 0, 0, 0};
}

class SearchLoopArg_Tree_24_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08047149f : 
        0.08191992f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
}

class SearchLoopArg_Tree_24_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08047149f : 
        0.08191992f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 0, 0, 0};
}

class SearchLoopArg_Tree_24_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08047149f : 
        0.08191992f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {11001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {19, 2, 0, 0};
}


class SearchLoopArg_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchLoopArg_Tree_25_class_0.score0(fdata);
    preds[2] += SearchLoopArg_Tree_25_class_1.score0(fdata);
    preds[3] += SearchLoopArg_Tree_25_class_2.score0(fdata);
    preds[4] += SearchLoopArg_Tree_25_class_3.score0(fdata);
    preds[5] += SearchLoopArg_Tree_25_class_4.score0(fdata);
  }
}
class SearchLoopArg_Tree_25_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08040188f : 
        0.08163214f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchLoopArg_Tree_25_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08040188f : 
        0.08163214f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {40, 0, 0, 0};
}

class SearchLoopArg_Tree_25_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08040188f : 
        0.08163214f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
}

class SearchLoopArg_Tree_25_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08040188f : 
        0.08163214f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 0, 0, 0};
}

class SearchLoopArg_Tree_25_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08040188f : 
        0.08163214f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {11001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {19, 2, 0, 0};
}


class SearchLoopArg_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchLoopArg_Tree_26_class_0.score0(fdata);
    preds[2] += SearchLoopArg_Tree_26_class_1.score0(fdata);
    preds[3] += SearchLoopArg_Tree_26_class_2.score0(fdata);
    preds[4] += SearchLoopArg_Tree_26_class_3.score0(fdata);
    preds[5] += SearchLoopArg_Tree_26_class_4.score0(fdata);
  }
}
class SearchLoopArg_Tree_26_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08034254f : 
        0.08138799f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchLoopArg_Tree_26_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08034254f : 
        0.08138799f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {40, 0, 0, 0};
}

class SearchLoopArg_Tree_26_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08034254f : 
        0.08138799f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
}

class SearchLoopArg_Tree_26_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08034254f : 
        0.08138799f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 0, 0, 0};
}

class SearchLoopArg_Tree_26_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08034254f : 
        0.08138799f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {11001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {19, 2, 0, 0};
}


class SearchLoopArg_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchLoopArg_Tree_27_class_0.score0(fdata);
    preds[2] += SearchLoopArg_Tree_27_class_1.score0(fdata);
    preds[3] += SearchLoopArg_Tree_27_class_2.score0(fdata);
    preds[4] += SearchLoopArg_Tree_27_class_3.score0(fdata);
    preds[5] += SearchLoopArg_Tree_27_class_4.score0(fdata);
  }
}
class SearchLoopArg_Tree_27_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08029195f : 
        0.08118072f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchLoopArg_Tree_27_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08029195f : 
        0.08118072f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {40, 0, 0, 0};
}

class SearchLoopArg_Tree_27_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08029195f : 
        0.08118072f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
}

class SearchLoopArg_Tree_27_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08029195f : 
        0.08118072f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 0, 0, 0};
}

class SearchLoopArg_Tree_27_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08029195f : 
        0.08118072f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {11001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {19, 2, 0, 0};
}


class SearchLoopArg_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchLoopArg_Tree_28_class_0.score0(fdata);
    preds[2] += SearchLoopArg_Tree_28_class_1.score0(fdata);
    preds[3] += SearchLoopArg_Tree_28_class_2.score0(fdata);
    preds[4] += SearchLoopArg_Tree_28_class_3.score0(fdata);
    preds[5] += SearchLoopArg_Tree_28_class_4.score0(fdata);
  }
}
class SearchLoopArg_Tree_28_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.080248825f : 
        0.081004664f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchLoopArg_Tree_28_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.080248825f : 
        0.081004664f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {40, 0, 0, 0};
}

class SearchLoopArg_Tree_28_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.080248825f : 
        0.081004664f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
}

class SearchLoopArg_Tree_28_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.080248825f : 
        0.081004664f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 0, 0, 0};
}

class SearchLoopArg_Tree_28_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.080248825f : 
        0.081004664f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {11001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {19, 2, 0, 0};
}


class SearchLoopArg_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += SearchLoopArg_Tree_29_class_0.score0(fdata);
    preds[2] += SearchLoopArg_Tree_29_class_1.score0(fdata);
    preds[3] += SearchLoopArg_Tree_29_class_2.score0(fdata);
    preds[4] += SearchLoopArg_Tree_29_class_3.score0(fdata);
    preds[5] += SearchLoopArg_Tree_29_class_4.score0(fdata);
  }
}
class SearchLoopArg_Tree_29_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.080212064f : 
        0.08085505f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}

class SearchLoopArg_Tree_29_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.080212064f : 
        0.08085505f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {40, 0, 0, 0};
}

class SearchLoopArg_Tree_29_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.080212064f : 
        0.08085505f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
}

class SearchLoopArg_Tree_29_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.080212064f : 
        0.08085505f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 0, 0, 0};
}

class SearchLoopArg_Tree_29_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.080212064f : 
        0.08085505f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {11001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {19, 2, 0, 0};
}


