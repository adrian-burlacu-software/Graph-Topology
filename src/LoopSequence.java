
/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2020-01-28T22:22:52.478-05:00
  3.24.0.5
  
  Standalone prediction code with sample test data for GBMModel named LoopSequence

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://192.168.0.103:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://192.168.0.103:54321/3/Models.java/LoopSequence > LoopSequence.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m LoopSequence.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="LoopSequence", algorithm="gbm")
public class LoopSequence extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 2; }
  public int nclasses() { return 3; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_LoopSequence.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 3;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* currentStateIn */ LoopSequence_ColInfo_0.VALUES,
    /* errorStateIn */ LoopSequence_ColInfo_1.VALUES,
    /* nextStateOut */ LoopSequence_ColInfo_2.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.625,0.25,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {0.625,0.25,0.125};

  public LoopSequence() { super(NAMES,DOMAINS,"nextStateOut"); }
  public String getUUID() { return Long.toString(9089601929685879724L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    LoopSequence_Forest_0.score0(data,preds);
    LoopSequence_Forest_1.score0(data,preds);
    LoopSequence_Forest_2.score0(data,preds);
    LoopSequence_Forest_3.score0(data,preds);
    LoopSequence_Forest_4.score0(data,preds);
    LoopSequence_Forest_5.score0(data,preds);
    LoopSequence_Forest_6.score0(data,preds);
    LoopSequence_Forest_7.score0(data,preds);
    LoopSequence_Forest_8.score0(data,preds);
    LoopSequence_Forest_9.score0(data,preds);
    LoopSequence_Forest_10.score0(data,preds);
    LoopSequence_Forest_11.score0(data,preds);
    LoopSequence_Forest_12.score0(data,preds);
    LoopSequence_Forest_13.score0(data,preds);
    LoopSequence_Forest_14.score0(data,preds);
    LoopSequence_Forest_15.score0(data,preds);
    LoopSequence_Forest_16.score0(data,preds);
    LoopSequence_Forest_17.score0(data,preds);
    LoopSequence_Forest_18.score0(data,preds);
    LoopSequence_Forest_19.score0(data,preds);
    LoopSequence_Forest_20.score0(data,preds);
    LoopSequence_Forest_21.score0(data,preds);
    LoopSequence_Forest_22.score0(data,preds);
    LoopSequence_Forest_23.score0(data,preds);
    LoopSequence_Forest_24.score0(data,preds);
    LoopSequence_Forest_25.score0(data,preds);
    LoopSequence_Forest_26.score0(data,preds);
    LoopSequence_Forest_27.score0(data,preds);
    LoopSequence_Forest_28.score0(data,preds);
    LoopSequence_Forest_29.score0(data,preds);
    hex.genmodel.GenModel.GBM_rescale(preds);
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_LoopSequence implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    NamesHolder_LoopSequence_0.fill(VALUES);
  }
  static final class NamesHolder_LoopSequence_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "currentStateIn";
      sa[1] = "errorStateIn";
    }
  }
}
// The class representing column currentStateIn
class LoopSequence_ColInfo_0 implements java.io.Serializable {
  public static final String[] VALUES = new String[4];
  static {
    LoopSequence_ColInfo_0_0.fill(VALUES);
  }
  static final class LoopSequence_ColInfo_0_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "-1";
      sa[1] = "0";
      sa[2] = "1";
      sa[3] = "2";
    }
  }
}
// The class representing column errorStateIn
class LoopSequence_ColInfo_1 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    LoopSequence_ColInfo_1_0.fill(VALUES);
  }
  static final class LoopSequence_ColInfo_1_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "FALSE";
      sa[1] = "TRUE";
    }
  }
}
// The class representing column nextStateOut
class LoopSequence_ColInfo_2 implements java.io.Serializable {
  public static final String[] VALUES = new String[3];
  static {
    LoopSequence_ColInfo_2_0.fill(VALUES);
  }
  static final class LoopSequence_ColInfo_2_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "-1";
      sa[1] = "1";
      sa[2] = "2";
    }
  }
}

class LoopSequence_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += LoopSequence_Tree_0_class_0.score0(fdata);
    preds[2] += LoopSequence_Tree_0_class_1.score0(fdata);
    preds[3] += LoopSequence_Tree_0_class_2.score0(fdata);
  }
}
class LoopSequence_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.025000004f : 
        0.19999997f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class LoopSequence_Tree_0_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* currentStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.1f : 
        0.04999999f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {10, 0, 0, 0};
}

class LoopSequence_Tree_0_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.1f : 
        0.04999999f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}


class LoopSequence_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += LoopSequence_Tree_1_class_0.score0(fdata);
    preds[2] += LoopSequence_Tree_1_class_1.score0(fdata);
    preds[3] += LoopSequence_Tree_1_class_2.score0(fdata);
  }
}
class LoopSequence_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.025987001f : 
        0.171412f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class LoopSequence_Tree_1_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.096977465f : 
        0.048478235f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class LoopSequence_Tree_1_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.095563985f : 
        0.045861907f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}


class LoopSequence_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += LoopSequence_Tree_2_class_0.score0(fdata);
    preds[2] += LoopSequence_Tree_2_class_1.score0(fdata);
    preds[3] += LoopSequence_Tree_2_class_2.score0(fdata);
  }
}
class LoopSequence_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.024569169f : 
        0.14847378f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class LoopSequence_Tree_2_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* currentStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09516502f : 
        0.048057668f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {10, 0, 0, 0};
}

class LoopSequence_Tree_2_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09208849f : 
        0.04523475f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}


class LoopSequence_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += LoopSequence_Tree_3_class_0.score0(fdata);
    preds[2] += LoopSequence_Tree_3_class_1.score0(fdata);
    preds[3] += LoopSequence_Tree_3_class_2.score0(fdata);
  }
}
class LoopSequence_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.025095351f : 
        0.13501664f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class LoopSequence_Tree_3_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* currentStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.09245197f : 
        0.044624493f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {10, 0, 0, 0};
}

class LoopSequence_Tree_3_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08920297f : 
        0.041919477f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}


class LoopSequence_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += LoopSequence_Tree_4_class_0.score0(fdata);
    preds[2] += LoopSequence_Tree_4_class_1.score0(fdata);
    preds[3] += LoopSequence_Tree_4_class_2.score0(fdata);
  }
}
class LoopSequence_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.025428807f : 
        0.12487216f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class LoopSequence_Tree_4_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* currentStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.090257876f : 
        0.04174547f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {10, 0, 0, 0};
}

class LoopSequence_Tree_4_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.086893186f : 
        0.039144117f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}


class LoopSequence_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += LoopSequence_Tree_5_class_0.score0(fdata);
    preds[2] += LoopSequence_Tree_5_class_1.score0(fdata);
    preds[3] += LoopSequence_Tree_5_class_2.score0(fdata);
  }
}
class LoopSequence_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.025613587f : 
        0.11701102f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class LoopSequence_Tree_5_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* currentStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08846927f : 
        0.039305173f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {10, 0, 0, 0};
}

class LoopSequence_Tree_5_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.085023f : 
        0.036798473f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}


class LoopSequence_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += LoopSequence_Tree_6_class_0.score0(fdata);
    preds[2] += LoopSequence_Tree_6_class_1.score0(fdata);
    preds[3] += LoopSequence_Tree_6_class_2.score0(fdata);
  }
}
class LoopSequence_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.025683722f : 
        0.110784166f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class LoopSequence_Tree_6_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* currentStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08700084f : 
        0.037218753f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {10, 0, 0, 0};
}

class LoopSequence_Tree_6_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08349514f : 
        0.03480045f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}


class LoopSequence_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += LoopSequence_Tree_7_class_0.score0(fdata);
    preds[2] += LoopSequence_Tree_7_class_1.score0(fdata);
    preds[3] += LoopSequence_Tree_7_class_2.score0(fdata);
  }
}
class LoopSequence_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.0256659f : 
        0.105760925f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class LoopSequence_Tree_7_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.08551656f : 
        0.036221642f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class LoopSequence_Tree_7_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08223761f : 
        0.03308762f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}


class LoopSequence_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += LoopSequence_Tree_8_class_0.score0(fdata);
    preds[2] += LoopSequence_Tree_8_class_1.score0(fdata);
    preds[3] += LoopSequence_Tree_8_class_2.score0(fdata);
  }
}
class LoopSequence_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.023894217f : 
        0.10003659f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class LoopSequence_Tree_8_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* currentStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08693571f : 
        0.038215008f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {10, 0, 0, 0};
}

class LoopSequence_Tree_8_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08086835f : 
        0.03350197f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}


class LoopSequence_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += LoopSequence_Tree_9_class_0.score0(fdata);
    preds[2] += LoopSequence_Tree_9_class_1.score0(fdata);
    preds[3] += LoopSequence_Tree_9_class_2.score0(fdata);
  }
}
class LoopSequence_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.02378934f : 
        0.09680412f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class LoopSequence_Tree_9_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* currentStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08597675f : 
        0.03648542f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {10, 0, 0, 0};
}

class LoopSequence_Tree_9_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.07997113f : 
        0.03194576f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}


class LoopSequence_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += LoopSequence_Tree_10_class_0.score0(fdata);
    preds[2] += LoopSequence_Tree_10_class_1.score0(fdata);
    preds[3] += LoopSequence_Tree_10_class_2.score0(fdata);
  }
}
class LoopSequence_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.023648813f : 
        0.09408172f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class LoopSequence_Tree_10_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* currentStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.085149534f : 
        0.03497293f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {10, 0, 0, 0};
}

class LoopSequence_Tree_10_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.079220705f : 
        0.030598808f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}


class LoopSequence_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += LoopSequence_Tree_11_class_0.score0(fdata);
    preds[2] += LoopSequence_Tree_11_class_1.score0(fdata);
    preds[3] += LoopSequence_Tree_11_class_2.score0(fdata);
  }
}
class LoopSequence_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.023483887f : 
        0.09176165f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class LoopSequence_Tree_11_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* currentStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08442526f : 
        0.033645175f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {10, 0, 0, 0};
}

class LoopSequence_Tree_11_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.07858879f : 
        0.029429758f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}


class LoopSequence_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += LoopSequence_Tree_12_class_0.score0(fdata);
    preds[2] += LoopSequence_Tree_12_class_1.score0(fdata);
    preds[3] += LoopSequence_Tree_12_class_2.score0(fdata);
  }
}
class LoopSequence_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.023303485f : 
        0.08976224f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class LoopSequence_Tree_12_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* currentStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.083780885f : 
        0.032475762f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {10, 0, 0, 0};
}

class LoopSequence_Tree_12_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.0780525f : 
        0.028413003f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}


class LoopSequence_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += LoopSequence_Tree_13_class_0.score0(fdata);
    preds[2] += LoopSequence_Tree_13_class_1.score0(fdata);
    preds[3] += LoopSequence_Tree_13_class_2.score0(fdata);
  }
}
class LoopSequence_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.023114653f : 
        0.08802099f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class LoopSequence_Tree_13_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* currentStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08319805f : 
        0.031442847f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {10, 0, 0, 0};
}

class LoopSequence_Tree_13_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.07759318f : 
        0.027527368f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}


class LoopSequence_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += LoopSequence_Tree_14_class_0.score0(fdata);
    preds[2] += LoopSequence_Tree_14_class_1.score0(fdata);
    preds[3] += LoopSequence_Tree_14_class_2.score0(fdata);
  }
}
class LoopSequence_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.022922931f : 
        0.086489566f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class LoopSequence_Tree_14_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* currentStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08266225f : 
        0.030528244f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {10, 0, 0, 0};
}

class LoopSequence_Tree_14_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.07719558f : 
        0.026755212f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}


class LoopSequence_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += LoopSequence_Tree_15_class_0.score0(fdata);
    preds[2] += LoopSequence_Tree_15_class_1.score0(fdata);
    preds[3] += LoopSequence_Tree_15_class_2.score0(fdata);
  }
}
class LoopSequence_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.022732632f : 
        0.0851304f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class LoopSequence_Tree_15_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* currentStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08216215f : 
        0.029716639f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {10, 0, 0, 0};
}

class LoopSequence_Tree_15_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.07684717f : 
        0.026081635f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}


class LoopSequence_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += LoopSequence_Tree_16_class_0.score0(fdata);
    preds[2] += LoopSequence_Tree_16_class_1.score0(fdata);
    preds[3] += LoopSequence_Tree_16_class_2.score0(fdata);
  }
}
class LoopSequence_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.022547064f : 
        0.083914086f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class LoopSequence_Tree_16_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* currentStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08168902f : 
        0.028995024f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {10, 0, 0, 0};
}

class LoopSequence_Tree_16_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.07653771f : 
        0.025494022f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}


class LoopSequence_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += LoopSequence_Tree_17_class_0.score0(fdata);
    preds[2] += LoopSequence_Tree_17_class_1.score0(fdata);
    preds[3] += LoopSequence_Tree_17_class_2.score0(fdata);
  }
}
class LoopSequence_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.022368716f : 
        0.08281743f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class LoopSequence_Tree_17_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* currentStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08123624f : 
        0.028352337f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {10, 0, 0, 0};
}

class LoopSequence_Tree_17_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.07625878f : 
        0.024981579f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}


class LoopSequence_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += LoopSequence_Tree_18_class_0.score0(fdata);
    preds[2] += LoopSequence_Tree_18_class_1.score0(fdata);
    preds[3] += LoopSequence_Tree_18_class_2.score0(fdata);
  }
}
class LoopSequence_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.006840534f : 
        0.10946636f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class LoopSequence_Tree_18_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* currentStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08079886f : 
        0.027779061f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {10, 0, 0, 0};
}

class LoopSequence_Tree_18_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.076003514f : 
        0.024535006f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}


class LoopSequence_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += LoopSequence_Tree_19_class_0.score0(fdata);
    preds[2] += LoopSequence_Tree_19_class_1.score0(fdata);
    preds[3] += LoopSequence_Tree_19_class_2.score0(fdata);
  }
}
class LoopSequence_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.025557842f : 
        0.08228089f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class LoopSequence_Tree_19_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.07856124f : 
        0.029307617f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class LoopSequence_Tree_19_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.07494763f : 
        0.021614179f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}


class LoopSequence_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += LoopSequence_Tree_20_class_0.score0(fdata);
    preds[2] += LoopSequence_Tree_20_class_1.score0(fdata);
    preds[3] += LoopSequence_Tree_20_class_2.score0(fdata);
  }
}
class LoopSequence_Tree_20_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.023668312f : 
        0.080575764f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class LoopSequence_Tree_20_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* currentStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.08008499f : 
        0.027727596f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {10, 0, 0, 0};
}

class LoopSequence_Tree_20_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.074516445f : 
        0.022454564f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}


class LoopSequence_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += LoopSequence_Tree_21_class_0.score0(fdata);
    preds[2] += LoopSequence_Tree_21_class_1.score0(fdata);
    preds[3] += LoopSequence_Tree_21_class_2.score0(fdata);
  }
}
class LoopSequence_Tree_21_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.023447836f : 
        0.079765745f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class LoopSequence_Tree_21_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* currentStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.07965191f : 
        0.027224818f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {10, 0, 0, 0};
}

class LoopSequence_Tree_21_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.074319765f : 
        0.022181688f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}


class LoopSequence_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += LoopSequence_Tree_22_class_0.score0(fdata);
    preds[2] += LoopSequence_Tree_22_class_1.score0(fdata);
    preds[3] += LoopSequence_Tree_22_class_2.score0(fdata);
  }
}
class LoopSequence_Tree_22_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.023243874f : 
        0.07901664f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class LoopSequence_Tree_22_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* currentStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.07922872f : 
        0.026772123f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {10, 0, 0, 0};
}

class LoopSequence_Tree_22_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.07413296f : 
        0.021948887f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}


class LoopSequence_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += LoopSequence_Tree_23_class_0.score0(fdata);
    preds[2] += LoopSequence_Tree_23_class_1.score0(fdata);
    preds[3] += LoopSequence_Tree_23_class_2.score0(fdata);
  }
}
class LoopSequence_Tree_23_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.010389215f : 
        0.09960087f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class LoopSequence_Tree_23_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* currentStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.07881465f : 
        0.026364045f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {10, 0, 0, 0};
}

class LoopSequence_Tree_23_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.073953524f : 
        0.021751335f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}


class LoopSequence_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += LoopSequence_Tree_24_class_0.score0(fdata);
    preds[2] += LoopSequence_Tree_24_class_1.score0(fdata);
    preds[3] += LoopSequence_Tree_24_class_2.score0(fdata);
  }
}
class LoopSequence_Tree_24_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.026277428f : 
        0.078727864f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class LoopSequence_Tree_24_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.0761752f : 
        0.027360264f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}

class LoopSequence_Tree_24_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.07308087f : 
        0.018997483f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}


class LoopSequence_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += LoopSequence_Tree_25_class_0.score0(fdata);
    preds[2] += LoopSequence_Tree_25_class_1.score0(fdata);
    preds[3] += LoopSequence_Tree_25_class_2.score0(fdata);
  }
}
class LoopSequence_Tree_25_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.024356278f : 
        0.07751146f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class LoopSequence_Tree_25_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* currentStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.07802332f : 
        0.02636948f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {10, 0, 0, 0};
}

class LoopSequence_Tree_25_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.07278726f : 
        0.019852212f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}


class LoopSequence_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += LoopSequence_Tree_26_class_0.score0(fdata);
    preds[2] += LoopSequence_Tree_26_class_1.score0(fdata);
    preds[3] += LoopSequence_Tree_26_class_2.score0(fdata);
  }
}
class LoopSequence_Tree_26_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.024136083f : 
        0.076912515f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class LoopSequence_Tree_26_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* currentStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.07762804f : 
        0.025993647f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {10, 0, 0, 0};
}

class LoopSequence_Tree_26_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.072641216f : 
        0.01978345f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}


class LoopSequence_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += LoopSequence_Tree_27_class_0.score0(fdata);
    preds[2] += LoopSequence_Tree_27_class_1.score0(fdata);
    preds[3] += LoopSequence_Tree_27_class_2.score0(fdata);
  }
}
class LoopSequence_Tree_27_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.02393396f : 
        0.076352976f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class LoopSequence_Tree_27_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* currentStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.07724264f : 
        0.025652267f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {10, 0, 0, 0};
}

class LoopSequence_Tree_27_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.07249833f : 
        0.019733846f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}


class LoopSequence_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += LoopSequence_Tree_28_class_0.score0(fdata);
    preds[2] += LoopSequence_Tree_28_class_1.score0(fdata);
    preds[3] += LoopSequence_Tree_28_class_2.score0(fdata);
  }
}
class LoopSequence_Tree_28_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.023748858f : 
        0.07582948f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class LoopSequence_Tree_28_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* currentStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.076867044f : 
        0.025341982f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {10, 0, 0, 0};
}

class LoopSequence_Tree_28_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.072357744f : 
        0.01970099f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}


class LoopSequence_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += LoopSequence_Tree_29_class_0.score0(fdata);
    preds[2] += LoopSequence_Tree_29_class_1.score0(fdata);
    preds[3] += LoopSequence_Tree_29_class_2.score0(fdata);
  }
}
class LoopSequence_Tree_29_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* errorStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
        -0.02357972f : 
        0.0753391f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}

class LoopSequence_Tree_29_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* currentStateIn */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.07650119f : 
        0.025059767f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {10, 0, 0, 0};
}

class LoopSequence_Tree_29_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* currentStateIn */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
        -0.07221884f : 
        0.019682731f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
}


