
/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2020-01-21T23:23:39.322-05:00
  3.24.0.5
  
  Standalone prediction code with sample test data for GBMModel named TrieEnd40

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://192.168.0.103:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://192.168.0.103:54321/3/Models.java/TrieEnd40 > TrieEnd40.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m TrieEnd40.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="TrieEnd40", algorithm="gbm")
public class TrieEnd40 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Binomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 1; }
  public int nclasses() { return 2; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_TrieEnd40.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 2;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* nodeIdIn */ TrieEnd40_ColInfo_0.VALUES,
    /* isEndOfWordOut */ TrieEnd40_ColInfo_1.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.4529058116232465,0.5470941883767535};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {0.4529058116232465,0.5470941883767535};

  public TrieEnd40() { super(NAMES,DOMAINS,"isEndOfWordOut"); }
  public String getUUID() { return Long.toString(2405704652821676844L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    TrieEnd40_Forest_0.score0(data,preds);
    TrieEnd40_Forest_1.score0(data,preds);
    TrieEnd40_Forest_2.score0(data,preds);
    TrieEnd40_Forest_3.score0(data,preds);
    TrieEnd40_Forest_4.score0(data,preds);
    TrieEnd40_Forest_5.score0(data,preds);
    TrieEnd40_Forest_6.score0(data,preds);
    TrieEnd40_Forest_7.score0(data,preds);
    TrieEnd40_Forest_8.score0(data,preds);
    TrieEnd40_Forest_9.score0(data,preds);
    TrieEnd40_Forest_10.score0(data,preds);
    TrieEnd40_Forest_11.score0(data,preds);
    TrieEnd40_Forest_12.score0(data,preds);
    TrieEnd40_Forest_13.score0(data,preds);
    TrieEnd40_Forest_14.score0(data,preds);
    TrieEnd40_Forest_15.score0(data,preds);
    TrieEnd40_Forest_16.score0(data,preds);
    TrieEnd40_Forest_17.score0(data,preds);
    TrieEnd40_Forest_18.score0(data,preds);
    TrieEnd40_Forest_19.score0(data,preds);
    TrieEnd40_Forest_20.score0(data,preds);
    TrieEnd40_Forest_21.score0(data,preds);
    TrieEnd40_Forest_22.score0(data,preds);
    TrieEnd40_Forest_23.score0(data,preds);
    TrieEnd40_Forest_24.score0(data,preds);
    TrieEnd40_Forest_25.score0(data,preds);
    TrieEnd40_Forest_26.score0(data,preds);
    TrieEnd40_Forest_27.score0(data,preds);
    TrieEnd40_Forest_28.score0(data,preds);
    TrieEnd40_Forest_29.score0(data,preds);
    preds[2] = preds[1] + 0.18893679591267384;
    preds[2] = 1./(1. + Math.min(1e19, Math.exp(-(preds[2]))));
    preds[1] = 1.0-preds[2];
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.9781163308160155);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_TrieEnd40 implements java.io.Serializable {
  public static final String[] VALUES = new String[1];
  static {
    NamesHolder_TrieEnd40_0.fill(VALUES);
  }
  static final class NamesHolder_TrieEnd40_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "nodeIdIn";
    }
  }
}
// The class representing column nodeIdIn
class TrieEnd40_ColInfo_0 implements java.io.Serializable {
  public static final String[] VALUES = new String[499];
  static {
    TrieEnd40_ColInfo_0_0.fill(VALUES);
  }
  static final class TrieEnd40_ColInfo_0_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "10";
      sa[2] = "100";
      sa[3] = "102";
      sa[4] = "104";
      sa[5] = "106";
      sa[6] = "108";
      sa[7] = "110";
      sa[8] = "112";
      sa[9] = "114";
      sa[10] = "116";
      sa[11] = "118";
      sa[12] = "12";
      sa[13] = "120";
      sa[14] = "122";
      sa[15] = "124";
      sa[16] = "126";
      sa[17] = "128";
      sa[18] = "130";
      sa[19] = "132";
      sa[20] = "134";
      sa[21] = "136";
      sa[22] = "138";
      sa[23] = "14";
      sa[24] = "140";
      sa[25] = "142";
      sa[26] = "144";
      sa[27] = "146";
      sa[28] = "148";
      sa[29] = "150";
      sa[30] = "152";
      sa[31] = "154";
      sa[32] = "156";
      sa[33] = "158";
      sa[34] = "16";
      sa[35] = "160";
      sa[36] = "162";
      sa[37] = "164";
      sa[38] = "166";
      sa[39] = "168";
      sa[40] = "170";
      sa[41] = "172";
      sa[42] = "174";
      sa[43] = "176";
      sa[44] = "178";
      sa[45] = "18";
      sa[46] = "180";
      sa[47] = "182";
      sa[48] = "184";
      sa[49] = "186";
      sa[50] = "188";
      sa[51] = "190";
      sa[52] = "192";
      sa[53] = "194";
      sa[54] = "196";
      sa[55] = "198";
      sa[56] = "2";
      sa[57] = "20";
      sa[58] = "200";
      sa[59] = "202";
      sa[60] = "204";
      sa[61] = "206";
      sa[62] = "208";
      sa[63] = "210";
      sa[64] = "212";
      sa[65] = "214";
      sa[66] = "216";
      sa[67] = "218";
      sa[68] = "22";
      sa[69] = "220";
      sa[70] = "222";
      sa[71] = "224";
      sa[72] = "226";
      sa[73] = "228";
      sa[74] = "230";
      sa[75] = "232";
      sa[76] = "234";
      sa[77] = "236";
      sa[78] = "238";
      sa[79] = "24";
      sa[80] = "240";
      sa[81] = "242";
      sa[82] = "244";
      sa[83] = "246";
      sa[84] = "248";
      sa[85] = "250";
      sa[86] = "252";
      sa[87] = "254";
      sa[88] = "256";
      sa[89] = "258";
      sa[90] = "26";
      sa[91] = "260";
      sa[92] = "262";
      sa[93] = "264";
      sa[94] = "266";
      sa[95] = "268";
      sa[96] = "270";
      sa[97] = "272";
      sa[98] = "274";
      sa[99] = "276";
      sa[100] = "278";
      sa[101] = "28";
      sa[102] = "280";
      sa[103] = "282";
      sa[104] = "284";
      sa[105] = "286";
      sa[106] = "288";
      sa[107] = "290";
      sa[108] = "292";
      sa[109] = "294";
      sa[110] = "296";
      sa[111] = "298";
      sa[112] = "30";
      sa[113] = "300";
      sa[114] = "302";
      sa[115] = "304";
      sa[116] = "306";
      sa[117] = "308";
      sa[118] = "310";
      sa[119] = "312";
      sa[120] = "314";
      sa[121] = "316";
      sa[122] = "318";
      sa[123] = "32";
      sa[124] = "320";
      sa[125] = "322";
      sa[126] = "324";
      sa[127] = "326";
      sa[128] = "328";
      sa[129] = "330";
      sa[130] = "332";
      sa[131] = "334";
      sa[132] = "336";
      sa[133] = "338";
      sa[134] = "34";
      sa[135] = "340";
      sa[136] = "342";
      sa[137] = "344";
      sa[138] = "346";
      sa[139] = "348";
      sa[140] = "350";
      sa[141] = "352";
      sa[142] = "354";
      sa[143] = "356";
      sa[144] = "358";
      sa[145] = "36";
      sa[146] = "360";
      sa[147] = "362";
      sa[148] = "364";
      sa[149] = "366";
      sa[150] = "368";
      sa[151] = "370";
      sa[152] = "372";
      sa[153] = "374";
      sa[154] = "376";
      sa[155] = "378";
      sa[156] = "38";
      sa[157] = "380";
      sa[158] = "382";
      sa[159] = "384";
      sa[160] = "386";
      sa[161] = "388";
      sa[162] = "390";
      sa[163] = "392";
      sa[164] = "394";
      sa[165] = "396";
      sa[166] = "398";
      sa[167] = "4";
      sa[168] = "40";
      sa[169] = "400";
      sa[170] = "402";
      sa[171] = "404";
      sa[172] = "406";
      sa[173] = "408";
      sa[174] = "410";
      sa[175] = "412";
      sa[176] = "414";
      sa[177] = "416";
      sa[178] = "418";
      sa[179] = "42";
      sa[180] = "420";
      sa[181] = "422";
      sa[182] = "424";
      sa[183] = "426";
      sa[184] = "428";
      sa[185] = "430";
      sa[186] = "432";
      sa[187] = "434";
      sa[188] = "436";
      sa[189] = "438";
      sa[190] = "44";
      sa[191] = "440";
      sa[192] = "442";
      sa[193] = "444";
      sa[194] = "446";
      sa[195] = "448";
      sa[196] = "450";
      sa[197] = "452";
      sa[198] = "454";
      sa[199] = "456";
      sa[200] = "458";
      sa[201] = "46";
      sa[202] = "460";
      sa[203] = "462";
      sa[204] = "464";
      sa[205] = "466";
      sa[206] = "468";
      sa[207] = "470";
      sa[208] = "472";
      sa[209] = "474";
      sa[210] = "476";
      sa[211] = "478";
      sa[212] = "48";
      sa[213] = "480";
      sa[214] = "482";
      sa[215] = "484";
      sa[216] = "486";
      sa[217] = "488";
      sa[218] = "490";
      sa[219] = "492";
      sa[220] = "494";
      sa[221] = "496";
      sa[222] = "498";
      sa[223] = "50";
      sa[224] = "500";
      sa[225] = "502";
      sa[226] = "504";
      sa[227] = "506";
      sa[228] = "508";
      sa[229] = "510";
      sa[230] = "512";
      sa[231] = "514";
      sa[232] = "516";
      sa[233] = "518";
      sa[234] = "52";
      sa[235] = "520";
      sa[236] = "522";
      sa[237] = "524";
      sa[238] = "526";
      sa[239] = "528";
      sa[240] = "530";
      sa[241] = "532";
      sa[242] = "534";
      sa[243] = "536";
      sa[244] = "538";
      sa[245] = "54";
      sa[246] = "540";
      sa[247] = "542";
      sa[248] = "544";
      sa[249] = "546";
      sa[250] = "548";
      sa[251] = "550";
      sa[252] = "552";
      sa[253] = "554";
      sa[254] = "556";
      sa[255] = "558";
      sa[256] = "56";
      sa[257] = "560";
      sa[258] = "562";
      sa[259] = "564";
      sa[260] = "566";
      sa[261] = "568";
      sa[262] = "570";
      sa[263] = "572";
      sa[264] = "574";
      sa[265] = "576";
      sa[266] = "578";
      sa[267] = "58";
      sa[268] = "580";
      sa[269] = "582";
      sa[270] = "584";
      sa[271] = "586";
      sa[272] = "588";
      sa[273] = "590";
      sa[274] = "592";
      sa[275] = "594";
      sa[276] = "596";
      sa[277] = "598";
      sa[278] = "6";
      sa[279] = "60";
      sa[280] = "600";
      sa[281] = "602";
      sa[282] = "604";
      sa[283] = "606";
      sa[284] = "608";
      sa[285] = "610";
      sa[286] = "612";
      sa[287] = "614";
      sa[288] = "616";
      sa[289] = "618";
      sa[290] = "62";
      sa[291] = "620";
      sa[292] = "622";
      sa[293] = "624";
      sa[294] = "626";
      sa[295] = "628";
      sa[296] = "630";
      sa[297] = "632";
      sa[298] = "634";
      sa[299] = "636";
      sa[300] = "638";
      sa[301] = "64";
      sa[302] = "640";
      sa[303] = "642";
      sa[304] = "644";
      sa[305] = "646";
      sa[306] = "648";
      sa[307] = "650";
      sa[308] = "652";
      sa[309] = "654";
      sa[310] = "656";
      sa[311] = "658";
      sa[312] = "66";
      sa[313] = "660";
      sa[314] = "662";
      sa[315] = "664";
      sa[316] = "666";
      sa[317] = "668";
      sa[318] = "670";
      sa[319] = "672";
      sa[320] = "674";
      sa[321] = "676";
      sa[322] = "678";
      sa[323] = "68";
      sa[324] = "680";
      sa[325] = "682";
      sa[326] = "684";
      sa[327] = "686";
      sa[328] = "688";
      sa[329] = "690";
      sa[330] = "692";
      sa[331] = "694";
      sa[332] = "696";
      sa[333] = "698";
      sa[334] = "70";
      sa[335] = "700";
      sa[336] = "702";
      sa[337] = "704";
      sa[338] = "706";
      sa[339] = "708";
      sa[340] = "710";
      sa[341] = "712";
      sa[342] = "714";
      sa[343] = "716";
      sa[344] = "718";
      sa[345] = "72";
      sa[346] = "720";
      sa[347] = "722";
      sa[348] = "724";
      sa[349] = "726";
      sa[350] = "728";
      sa[351] = "730";
      sa[352] = "732";
      sa[353] = "734";
      sa[354] = "736";
      sa[355] = "738";
      sa[356] = "74";
      sa[357] = "740";
      sa[358] = "742";
      sa[359] = "744";
      sa[360] = "746";
      sa[361] = "748";
      sa[362] = "750";
      sa[363] = "752";
      sa[364] = "754";
      sa[365] = "756";
      sa[366] = "758";
      sa[367] = "76";
      sa[368] = "760";
      sa[369] = "762";
      sa[370] = "764";
      sa[371] = "766";
      sa[372] = "768";
      sa[373] = "770";
      sa[374] = "772";
      sa[375] = "774";
      sa[376] = "776";
      sa[377] = "778";
      sa[378] = "78";
      sa[379] = "780";
      sa[380] = "782";
      sa[381] = "784";
      sa[382] = "786";
      sa[383] = "788";
      sa[384] = "790";
      sa[385] = "792";
      sa[386] = "794";
      sa[387] = "796";
      sa[388] = "798";
      sa[389] = "8";
      sa[390] = "80";
      sa[391] = "800";
      sa[392] = "802";
      sa[393] = "804";
      sa[394] = "806";
      sa[395] = "808";
      sa[396] = "810";
      sa[397] = "812";
      sa[398] = "814";
      sa[399] = "816";
      sa[400] = "818";
      sa[401] = "82";
      sa[402] = "820";
      sa[403] = "822";
      sa[404] = "824";
      sa[405] = "826";
      sa[406] = "828";
      sa[407] = "830";
      sa[408] = "832";
      sa[409] = "834";
      sa[410] = "836";
      sa[411] = "838";
      sa[412] = "84";
      sa[413] = "840";
      sa[414] = "842";
      sa[415] = "844";
      sa[416] = "846";
      sa[417] = "848";
      sa[418] = "850";
      sa[419] = "852";
      sa[420] = "854";
      sa[421] = "856";
      sa[422] = "858";
      sa[423] = "86";
      sa[424] = "860";
      sa[425] = "862";
      sa[426] = "864";
      sa[427] = "866";
      sa[428] = "868";
      sa[429] = "870";
      sa[430] = "872";
      sa[431] = "874";
      sa[432] = "876";
      sa[433] = "878";
      sa[434] = "88";
      sa[435] = "880";
      sa[436] = "882";
      sa[437] = "884";
      sa[438] = "886";
      sa[439] = "888";
      sa[440] = "890";
      sa[441] = "892";
      sa[442] = "894";
      sa[443] = "896";
      sa[444] = "898";
      sa[445] = "90";
      sa[446] = "900";
      sa[447] = "902";
      sa[448] = "904";
      sa[449] = "906";
      sa[450] = "908";
      sa[451] = "910";
      sa[452] = "912";
      sa[453] = "914";
      sa[454] = "916";
      sa[455] = "918";
      sa[456] = "92";
      sa[457] = "920";
      sa[458] = "922";
      sa[459] = "924";
      sa[460] = "926";
      sa[461] = "928";
      sa[462] = "930";
      sa[463] = "932";
      sa[464] = "934";
      sa[465] = "936";
      sa[466] = "938";
      sa[467] = "94";
      sa[468] = "940";
      sa[469] = "942";
      sa[470] = "944";
      sa[471] = "946";
      sa[472] = "948";
      sa[473] = "950";
      sa[474] = "952";
      sa[475] = "954";
      sa[476] = "956";
      sa[477] = "958";
      sa[478] = "96";
      sa[479] = "960";
      sa[480] = "962";
      sa[481] = "964";
      sa[482] = "966";
      sa[483] = "968";
      sa[484] = "970";
      sa[485] = "972";
      sa[486] = "974";
      sa[487] = "976";
      sa[488] = "978";
      sa[489] = "98";
      sa[490] = "980";
      sa[491] = "982";
      sa[492] = "984";
      sa[493] = "986";
      sa[494] = "988";
      sa[495] = "990";
      sa[496] = "992";
      sa[497] = "994";
      sa[498] = "null";
    }
  }
}
// The class representing column isEndOfWordOut
class TrieEnd40_ColInfo_1 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    TrieEnd40_ColInfo_1_0.fill(VALUES);
  }
  static final class TrieEnd40_ColInfo_1_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "FALSE";
      sa[1] = "TRUE";
    }
  }
}

class TrieEnd40_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd40_Tree_0_class_0.score0(fdata);
  }
}
class TrieEnd40_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(499, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 499, 0, data[0])) ? 
        -0.22079645f : 
        0.18278389f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, 85, 41, -21, -2, 72, 63, 39, 73, -19, -90, 74, -19, -107, -59, 86, -118, 76, 99, 119, -25, -83, 106, -34, -108, -93, 100, 41, 81, -67, -51, 119, -76, -101, 123, -108, 18, 19, 81, 115, 85, -43, -44, 70, 127, 87, 44, 45, 91, -92, -105, -10, -65, 91, 110, 42, -75, -21, -100, 85, 114, 60, 1};
}


class TrieEnd40_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd40_Tree_1_class_0.score0(fdata);
  }
}
class TrieEnd40_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(499, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 499, 0, data[0])) ? 
        -0.19686425f : 
        0.16895469f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, 85, 41, -21, -2, 72, 63, 39, 73, -19, -90, 74, -19, -107, -59, 86, -118, 76, 99, 119, -25, -83, 106, -34, -108, -93, 100, 41, 81, -67, -51, 119, -76, -101, 123, -108, 18, 19, 81, 115, 85, -43, -44, 70, 127, 87, 44, 45, 91, -92, -105, -10, -65, 91, 110, 42, -75, -21, -100, 85, 114, 60, 1};
}


class TrieEnd40_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd40_Tree_2_class_0.score0(fdata);
  }
}
class TrieEnd40_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(499, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 499, 0, data[0])) ? 
        -0.17955482f : 
        0.15823548f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, 85, 41, -21, -2, 72, 63, 39, 73, -19, -90, 74, -19, -107, -59, 86, -118, 76, 99, 119, -25, -83, 106, -34, -108, -93, 100, 41, 81, -67, -51, 119, -76, -101, 123, -108, 18, 19, 81, 115, 85, -43, -44, 70, 127, 87, 44, 45, 91, -92, -105, -10, -65, 91, 110, 42, -75, -21, -100, 85, 114, 60, 1};
}


class TrieEnd40_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd40_Tree_3_class_0.score0(fdata);
  }
}
class TrieEnd40_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(499, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 499, 0, data[0])) ? 
        -0.16647935f : 
        0.14971265f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, 85, 41, -21, -2, 72, 63, 39, 73, -19, -90, 74, -19, -107, -59, 86, -118, 76, 99, 119, -25, -83, 106, -34, -108, -93, 100, 41, 81, -67, -51, 119, -76, -101, 123, -108, 18, 19, 81, 115, 85, -43, -44, 70, 127, 87, 44, 45, 91, -92, -105, -10, -65, 91, 110, 42, -75, -21, -100, 85, 114, 60, 1};
}


class TrieEnd40_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd40_Tree_4_class_0.score0(fdata);
  }
}
class TrieEnd40_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(499, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 499, 0, data[0])) ? 
        -0.15628411f : 
        0.14280036f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, 85, 41, -21, -2, 72, 63, 39, 73, -19, -90, 74, -19, -107, -59, 86, -118, 76, 99, 119, -25, -83, 106, -34, -108, -93, 100, 41, 81, -67, -51, 119, -76, -101, 123, -108, 18, 19, 81, 115, 85, -43, -44, 70, 127, 87, 44, 45, 91, -92, -105, -10, -65, 91, 110, 42, -75, -21, -100, 85, 114, 60, 1};
}


class TrieEnd40_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd40_Tree_5_class_0.score0(fdata);
  }
}
class TrieEnd40_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(499, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 499, 0, data[0])) ? 
        -0.1481407f : 
        0.1371048f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, 85, 41, -21, -2, 72, 63, 39, 73, -19, -90, 74, -19, -107, -59, 86, -118, 76, 99, 119, -25, -83, 106, -34, -108, -93, 100, 41, 81, -67, -51, 119, -76, -101, 123, -108, 18, 19, 81, 115, 85, -43, -44, 70, 127, 87, 44, 45, 91, -92, -105, -10, -65, 91, 110, 42, -75, -21, -100, 85, 114, 60, 1};
}


class TrieEnd40_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd40_Tree_6_class_0.score0(fdata);
  }
}
class TrieEnd40_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(499, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 499, 0, data[0])) ? 
        -0.1415122f : 
        0.13235089f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, 85, 41, -21, -2, 72, 63, 39, 73, -19, -90, 74, -19, -107, -59, 86, -118, 76, 99, 119, -25, -83, 106, -34, -108, -93, 100, 41, 81, -67, -51, 119, -76, -101, 123, -108, 18, 19, 81, 115, 85, -43, -44, 70, 127, 87, 44, 45, 91, -92, -105, -10, -65, 91, 110, 42, -75, -21, -100, 85, 114, 60, 1};
}


class TrieEnd40_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd40_Tree_7_class_0.score0(fdata);
  }
}
class TrieEnd40_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(499, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 499, 0, data[0])) ? 
        -0.13603444f : 
        0.12834047f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, 85, 41, -21, -2, 72, 63, 39, 73, -19, -90, 74, -19, -107, -59, 86, -118, 76, 99, 119, -25, -83, 106, -34, -108, -93, 100, 41, 81, -67, -51, 119, -76, -101, 123, -108, 18, 19, 81, 115, 85, -43, -44, 70, 127, 87, 44, 45, 91, -92, -105, -10, -65, 91, 110, 42, -75, -21, -100, 85, 114, 60, 1};
}


class TrieEnd40_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd40_Tree_8_class_0.score0(fdata);
  }
}
class TrieEnd40_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(499, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 499, 0, data[0])) ? 
        -0.13145131f : 
        0.12492697f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, 85, 41, -21, -2, 72, 63, 39, 73, -19, -90, 74, -19, -107, -59, 86, -118, 76, 99, 119, -25, -83, 106, -34, -108, -93, 100, 41, 81, -67, -51, 119, -76, -101, 123, -108, 18, 19, 81, 115, 85, -43, -44, 70, 127, 87, 44, 45, 91, -92, -105, -10, -65, 91, 110, 42, -75, -21, -100, 85, 114, 60, 1};
}


class TrieEnd40_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd40_Tree_9_class_0.score0(fdata);
  }
}
class TrieEnd40_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(499, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 499, 0, data[0])) ? 
        -0.1275772f : 
        0.12199958f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, 85, 41, -21, -2, 72, 63, 39, 73, -19, -90, 74, -19, -107, -59, 86, -118, 76, 99, 119, -25, -83, 106, -34, -108, -93, 100, 41, 81, -67, -51, 119, -76, -101, 123, -108, 18, 19, 81, 115, 85, -43, -44, 70, 127, 87, 44, 45, 91, -92, -105, -10, -65, 91, 110, 42, -75, -21, -100, 85, 114, 60, 1};
}


class TrieEnd40_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd40_Tree_10_class_0.score0(fdata);
  }
}
class TrieEnd40_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(499, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 499, 0, data[0])) ? 
        -0.12427416f : 
        0.1194729f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, 85, 41, -21, -2, 72, 63, 39, 73, -19, -90, 74, -19, -107, -59, 86, -118, 76, 99, 119, -25, -83, 106, -34, -108, -93, 100, 41, 81, -67, -51, 119, -76, -101, 123, -108, 18, 19, 81, 115, 85, -43, -44, 70, 127, 87, 44, 45, 91, -92, -105, -10, -65, 91, 110, 42, -75, -21, -100, 85, 114, 60, 1};
}


class TrieEnd40_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd40_Tree_11_class_0.score0(fdata);
  }
}
class TrieEnd40_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(499, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 499, 0, data[0])) ? 
        -0.12143742f : 
        0.117280014f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, 85, 41, -21, -2, 72, 63, 39, 73, -19, -90, 74, -19, -107, -59, 86, -118, 76, 99, 119, -25, -83, 106, -34, -108, -93, 100, 41, 81, -67, -51, 119, -76, -101, 123, -108, 18, 19, 81, 115, 85, -43, -44, 70, 127, 87, 44, 45, 91, -92, -105, -10, -65, 91, 110, 42, -75, -21, -100, 85, 114, 60, 1};
}


class TrieEnd40_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd40_Tree_12_class_0.score0(fdata);
  }
}
class TrieEnd40_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(499, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 499, 0, data[0])) ? 
        -0.11898597f : 
        0.11536774f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, 85, 41, -21, -2, 72, 63, 39, 73, -19, -90, 74, -19, -107, -59, 86, -118, 76, 99, 119, -25, -83, 106, -34, -108, -93, 100, 41, 81, -67, -51, 119, -76, -101, 123, -108, 18, 19, 81, 115, 85, -43, -44, 70, 127, 87, 44, 45, 91, -92, -105, -10, -65, 91, 110, 42, -75, -21, -100, 85, 114, 60, 1};
}


class TrieEnd40_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd40_Tree_13_class_0.score0(fdata);
  }
}
class TrieEnd40_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(499, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 499, 0, data[0])) ? 
        -0.116856135f : 
        0.11369325f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, 85, 41, -21, -2, 72, 63, 39, 73, -19, -90, 74, -19, -107, -59, 86, -118, 76, 99, 119, -25, -83, 106, -34, -108, -93, 100, 41, 81, -67, -51, 119, -76, -101, 123, -108, 18, 19, 81, 115, 85, -43, -44, 70, 127, 87, 44, 45, 91, -92, -105, -10, -65, 91, 110, 42, -75, -21, -100, 85, 114, 60, 1};
}


class TrieEnd40_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd40_Tree_14_class_0.score0(fdata);
  }
}
class TrieEnd40_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(499, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 499, 0, data[0])) ? 
        -0.114997126f : 
        0.11222166f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, 85, 41, -21, -2, 72, 63, 39, 73, -19, -90, 74, -19, -107, -59, 86, -118, 76, 99, 119, -25, -83, 106, -34, -108, -93, 100, 41, 81, -67, -51, 119, -76, -101, 123, -108, 18, 19, 81, 115, 85, -43, -44, 70, 127, 87, 44, 45, 91, -92, -105, -10, -65, 91, 110, 42, -75, -21, -100, 85, 114, 60, 1};
}


class TrieEnd40_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd40_Tree_15_class_0.score0(fdata);
  }
}
class TrieEnd40_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(499, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 499, 0, data[0])) ? 
        -0.11336797f : 
        0.11092428f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, 85, 41, -21, -2, 72, 63, 39, 73, -19, -90, 74, -19, -107, -59, 86, -118, 76, 99, 119, -25, -83, 106, -34, -108, -93, 100, 41, 81, -67, -51, 119, -76, -101, 123, -108, 18, 19, 81, 115, 85, -43, -44, 70, 127, 87, 44, 45, 91, -92, -105, -10, -65, 91, 110, 42, -75, -21, -100, 85, 114, 60, 1};
}


class TrieEnd40_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd40_Tree_16_class_0.score0(fdata);
  }
}
class TrieEnd40_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(499, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 499, 0, data[0])) ? 
        -0.11193521f : 
        0.1097773f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {01101010 10101010 10010100 11010111 01111111 00010010 11111100 11100100 10010010 10110111 01100101 01010010 10110111 10101001 10100011 01101010 01010001 00110010 11000110 11101110 11100111 10110101 01010110 01111011 00101001 11000101 00100110 10010100 10001010 10111101 10110011 11101110 00101101 11011001 11011110 00101001 01001000 11001000 10001010 11001110 10101010 10101011 00101011 01100010 11111110 11101010 00110100 10110100 11011010 00100101 11101001 01101111 11111101 11011010 01110110 01010100 10101101 11010111 00111001 10101010 01001110 00111100 100}
  public static final byte[] GRPSPLIT0 = new byte[] {86, 85, 41, -21, -2, 72, 63, 39, 73, -19, -90, 74, -19, -107, -59, 86, -118, 76, 99, 119, -25, -83, 106, -34, -108, -93, 100, 41, 81, -67, -51, 119, -76, -101, 123, -108, 18, 19, 81, 115, 85, -43, -44, 70, 127, 87, 44, 45, 91, -92, -105, -10, -65, 91, 110, 42, -75, -21, -100, 85, 114, 60, 1};
}


class TrieEnd40_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd40_Tree_17_class_0.score0(fdata);
  }
}
class TrieEnd40_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(499, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 499, 0, data[0])) ? 
        -0.110671304f : 
        0.1087608f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, 85, 41, -21, -2, 72, 63, 39, 73, -19, -90, 74, -19, -107, -59, 86, -118, 76, 99, 119, -25, -83, 106, -34, -108, -93, 100, 41, 81, -67, -51, 119, -76, -101, 123, -108, 18, 19, 81, 115, 85, -43, -44, 70, 127, 87, 44, 45, 91, -92, -105, -10, -65, 91, 110, 42, -75, -21, -100, 85, 114, 60, 1};
}


class TrieEnd40_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd40_Tree_18_class_0.score0(fdata);
  }
}
class TrieEnd40_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(499, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 499, 0, data[0])) ? 
        -0.1095533f : 
        0.10785795f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, 85, 41, -21, -2, 72, 63, 39, 73, -19, -90, 74, -19, -107, -59, 86, -118, 76, 99, 119, -25, -83, 106, -34, -108, -93, 100, 41, 81, -67, -51, 119, -76, -101, 123, -108, 18, 19, 81, 115, 85, -43, -44, 70, 127, 87, 44, 45, 91, -92, -105, -10, -65, 91, 110, 42, -75, -21, -100, 85, 114, 60, 1};
}


class TrieEnd40_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd40_Tree_19_class_0.score0(fdata);
  }
}
class TrieEnd40_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(499, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 499, 0, data[0])) ? 
        -0.108562f : 
        0.10705452f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, 85, 41, -21, -2, 72, 63, 39, 73, -19, -90, 74, -19, -107, -59, 86, -118, 76, 99, 119, -25, -83, 106, -34, -108, -93, 100, 41, 81, -67, -51, 119, -76, -101, 123, -108, 18, 19, 81, 115, 85, -43, -44, 70, 127, 87, 44, 45, 91, -92, -105, -10, -65, 91, 110, 42, -75, -21, -100, 85, 114, 60, 1};
}


class TrieEnd40_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd40_Tree_20_class_0.score0(fdata);
  }
}
class TrieEnd40_Tree_20_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(499, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 499, 0, data[0])) ? 
        -0.10768117f : 
        0.106338315f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, 85, 41, -21, -2, 72, 63, 39, 73, -19, -90, 74, -19, -107, -59, 86, -118, 76, 99, 119, -25, -83, 106, -34, -108, -93, 100, 41, 81, -67, -51, 119, -76, -101, 123, -108, 18, 19, 81, 115, 85, -43, -44, 70, 127, 87, 44, 45, 91, -92, -105, -10, -65, 91, 110, 42, -75, -21, -100, 85, 114, 60, 1};
}


class TrieEnd40_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd40_Tree_21_class_0.score0(fdata);
  }
}
class TrieEnd40_Tree_21_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(499, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 499, 0, data[0])) ? 
        -0.10689703f : 
        0.10569891f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {01101010 10101010 10010100 11010111 01111111 00010010 11111100 11100100 10010010 10110111 01100101 01010010 10110111 10101001 10100011 01101010 01010001 00110010 11000110 11101110 11100111 10110101 01010110 01111011 00101001 11000101 00100110 10010100 10001010 10111101 10110011 11101110 00101101 11011001 11011110 00101001 01001000 11001000 10001010 11001110 10101010 10101011 00101011 01100010 11111110 11101010 00110100 10110100 11011010 00100101 11101001 01101111 11111101 11011010 01110110 01010100 10101101 11010111 00111001 10101010 01001110 00111100 100}
  public static final byte[] GRPSPLIT0 = new byte[] {86, 85, 41, -21, -2, 72, 63, 39, 73, -19, -90, 74, -19, -107, -59, 86, -118, 76, 99, 119, -25, -83, 106, -34, -108, -93, 100, 41, 81, -67, -51, 119, -76, -101, 123, -108, 18, 19, 81, 115, 85, -43, -44, 70, 127, 87, 44, 45, 91, -92, -105, -10, -65, 91, 110, 42, -75, -21, -100, 85, 114, 60, 1};
}


class TrieEnd40_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd40_Tree_22_class_0.score0(fdata);
  }
}
class TrieEnd40_Tree_22_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(499, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 499, 0, data[0])) ? 
        -0.10619779f : 
        0.10512728f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, 85, 41, -21, -2, 72, 63, 39, 73, -19, -90, 74, -19, -107, -59, 86, -118, 76, 99, 119, -25, -83, 106, -34, -108, -93, 100, 41, 81, -67, -51, 119, -76, -101, 123, -108, 18, 19, 81, 115, 85, -43, -44, 70, 127, 87, 44, 45, 91, -92, -105, -10, -65, 91, 110, 42, -75, -21, -100, 85, 114, 60, 1};
}


class TrieEnd40_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd40_Tree_23_class_0.score0(fdata);
  }
}
class TrieEnd40_Tree_23_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(499, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 499, 0, data[0])) ? 
        -0.10557334f : 
        0.104615636f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, 85, 41, -21, -2, 72, 63, 39, 73, -19, -90, 74, -19, -107, -59, 86, -118, 76, 99, 119, -25, -83, 106, -34, -108, -93, 100, 41, 81, -67, -51, 119, -76, -101, 123, -108, 18, 19, 81, 115, 85, -43, -44, 70, 127, 87, 44, 45, 91, -92, -105, -10, -65, 91, 110, 42, -75, -21, -100, 85, 114, 60, 1};
}


class TrieEnd40_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd40_Tree_24_class_0.score0(fdata);
  }
}
class TrieEnd40_Tree_24_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(499, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 499, 0, data[0])) ? 
        -0.10501494f : 
        0.104157165f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, 85, 41, -21, -2, 72, 63, 39, 73, -19, -90, 74, -19, -107, -59, 86, -118, 76, 99, 119, -25, -83, 106, -34, -108, -93, 100, 41, 81, -67, -51, 119, -76, -101, 123, -108, 18, 19, 81, 115, 85, -43, -44, 70, 127, 87, 44, 45, 91, -92, -105, -10, -65, 91, 110, 42, -75, -21, -100, 85, 114, 60, 1};
}


class TrieEnd40_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd40_Tree_25_class_0.score0(fdata);
  }
}
class TrieEnd40_Tree_25_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(499, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 499, 0, data[0])) ? 
        -0.10451501f : 
        0.10374595f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, 85, 41, -21, -2, 72, 63, 39, 73, -19, -90, 74, -19, -107, -59, 86, -118, 76, 99, 119, -25, -83, 106, -34, -108, -93, 100, 41, 81, -67, -51, 119, -76, -101, 123, -108, 18, 19, 81, 115, 85, -43, -44, 70, 127, 87, 44, 45, 91, -92, -105, -10, -65, 91, 110, 42, -75, -21, -100, 85, 114, 60, 1};
}


class TrieEnd40_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd40_Tree_26_class_0.score0(fdata);
  }
}
class TrieEnd40_Tree_26_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(499, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 499, 0, data[0])) ? 
        -0.104066946f : 
        0.103376806f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, 85, 41, -21, -2, 72, 63, 39, 73, -19, -90, 74, -19, -107, -59, 86, -118, 76, 99, 119, -25, -83, 106, -34, -108, -93, 100, 41, 81, -67, -51, 119, -76, -101, 123, -108, 18, 19, 81, 115, 85, -43, -44, 70, 127, 87, 44, 45, 91, -92, -105, -10, -65, 91, 110, 42, -75, -21, -100, 85, 114, 60, 1};
}


class TrieEnd40_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd40_Tree_27_class_0.score0(fdata);
  }
}
class TrieEnd40_Tree_27_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(499, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 499, 0, data[0])) ? 
        -0.10366499f : 
        0.10304516f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, 85, 41, -21, -2, 72, 63, 39, 73, -19, -90, 74, -19, -107, -59, 86, -118, 76, 99, 119, -25, -83, 106, -34, -108, -93, 100, 41, 81, -67, -51, 119, -76, -101, 123, -108, 18, 19, 81, 115, 85, -43, -44, 70, 127, 87, 44, 45, 91, -92, -105, -10, -65, 91, 110, 42, -75, -21, -100, 85, 114, 60, 1};
}


class TrieEnd40_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd40_Tree_28_class_0.score0(fdata);
  }
}
class TrieEnd40_Tree_28_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(499, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 499, 0, data[0])) ? 
        -0.10330409f : 
        0.10274699f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, 85, 41, -21, -2, 72, 63, 39, 73, -19, -90, 74, -19, -107, -59, 86, -118, 76, 99, 119, -25, -83, 106, -34, -108, -93, 100, 41, 81, -67, -51, 119, -76, -101, 123, -108, 18, 19, 81, 115, 85, -43, -44, 70, 127, 87, 44, 45, 91, -92, -105, -10, -65, 91, 110, 42, -75, -21, -100, 85, 114, 60, 1};
}


class TrieEnd40_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd40_Tree_29_class_0.score0(fdata);
  }
}
class TrieEnd40_Tree_29_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(499, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 499, 0, data[0])) ? 
        -0.1029798f : 
        0.102478765f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {01101010 10101010 10010100 11010111 01111111 00010010 11111100 11100100 10010010 10110111 01100101 01010010 10110111 10101001 10100011 01101010 01010001 00110010 11000110 11101110 11100111 10110101 01010110 01111011 00101001 11000101 00100110 10010100 10001010 10111101 10110011 11101110 00101101 11011001 11011110 00101001 01001000 11001000 10001010 11001110 10101010 10101011 00101011 01100010 11111110 11101010 00110100 10110100 11011010 00100101 11101001 01101111 11111101 11011010 01110110 01010100 10101101 11010111 00111001 10101010 01001110 00111100 100}
  public static final byte[] GRPSPLIT0 = new byte[] {86, 85, 41, -21, -2, 72, 63, 39, 73, -19, -90, 74, -19, -107, -59, 86, -118, 76, 99, 119, -25, -83, 106, -34, -108, -93, 100, 41, 81, -67, -51, 119, -76, -101, 123, -108, 18, 19, 81, 115, 85, -43, -44, 70, 127, 87, 44, 45, 91, -92, -105, -10, -65, 91, 110, 42, -75, -21, -100, 85, 114, 60, 1};
}


