

/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2020-01-21T23:22:59.739-05:00
  3.24.0.5
  
  Standalone prediction code with sample test data for GBMModel named TrieEnd42

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://192.168.0.103:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://192.168.0.103:54321/3/Models.java/TrieEnd42 > TrieEnd42.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m TrieEnd42.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="TrieEnd42", algorithm="gbm")
public class TrieEnd42 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Binomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 1; }
  public int nclasses() { return 2; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_TrieEnd42.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 2;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* nodeIdIn */ TrieEnd42_ColInfo_0.VALUES,
    /* isEndOfWordOut */ TrieEnd42_ColInfo_1.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.34393638170974156,0.6560636182902585};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {0.34393638170974156,0.6560636182902585};

  public TrieEnd42() { super(NAMES,DOMAINS,"isEndOfWordOut"); }
  public String getUUID() { return Long.toString(4442240840147327424L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    TrieEnd42_Forest_0.score0(data,preds);
    TrieEnd42_Forest_1.score0(data,preds);
    TrieEnd42_Forest_2.score0(data,preds);
    TrieEnd42_Forest_3.score0(data,preds);
    TrieEnd42_Forest_4.score0(data,preds);
    TrieEnd42_Forest_5.score0(data,preds);
    TrieEnd42_Forest_6.score0(data,preds);
    TrieEnd42_Forest_7.score0(data,preds);
    TrieEnd42_Forest_8.score0(data,preds);
    TrieEnd42_Forest_9.score0(data,preds);
    TrieEnd42_Forest_10.score0(data,preds);
    TrieEnd42_Forest_11.score0(data,preds);
    TrieEnd42_Forest_12.score0(data,preds);
    TrieEnd42_Forest_13.score0(data,preds);
    TrieEnd42_Forest_14.score0(data,preds);
    TrieEnd42_Forest_15.score0(data,preds);
    TrieEnd42_Forest_16.score0(data,preds);
    TrieEnd42_Forest_17.score0(data,preds);
    TrieEnd42_Forest_18.score0(data,preds);
    TrieEnd42_Forest_19.score0(data,preds);
    TrieEnd42_Forest_20.score0(data,preds);
    TrieEnd42_Forest_21.score0(data,preds);
    TrieEnd42_Forest_22.score0(data,preds);
    TrieEnd42_Forest_23.score0(data,preds);
    TrieEnd42_Forest_24.score0(data,preds);
    TrieEnd42_Forest_25.score0(data,preds);
    TrieEnd42_Forest_26.score0(data,preds);
    TrieEnd42_Forest_27.score0(data,preds);
    TrieEnd42_Forest_28.score0(data,preds);
    TrieEnd42_Forest_29.score0(data,preds);
    preds[2] = preds[1] + 0.6458010599627473;
    preds[2] = 1./(1. + Math.min(1e19, Math.exp(-(preds[2]))));
    preds[1] = 1.0-preds[2];
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.9832280775567885);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_TrieEnd42 implements java.io.Serializable {
  public static final String[] VALUES = new String[1];
  static {
    NamesHolder_TrieEnd42_0.fill(VALUES);
  }
  static final class NamesHolder_TrieEnd42_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "nodeIdIn";
    }
  }
}
// The class representing column nodeIdIn
class TrieEnd42_ColInfo_0 implements java.io.Serializable {
  public static final String[] VALUES = new String[503];
  static {
    TrieEnd42_ColInfo_0_0.fill(VALUES);
  }
  static final class TrieEnd42_ColInfo_0_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1996";
      sa[1] = "1998";
      sa[2] = "2000";
      sa[3] = "2002";
      sa[4] = "2004";
      sa[5] = "2006";
      sa[6] = "2008";
      sa[7] = "2010";
      sa[8] = "2012";
      sa[9] = "2014";
      sa[10] = "2016";
      sa[11] = "2018";
      sa[12] = "2020";
      sa[13] = "2022";
      sa[14] = "2024";
      sa[15] = "2026";
      sa[16] = "2028";
      sa[17] = "2030";
      sa[18] = "2032";
      sa[19] = "2034";
      sa[20] = "2036";
      sa[21] = "2038";
      sa[22] = "2040";
      sa[23] = "2042";
      sa[24] = "2044";
      sa[25] = "2046";
      sa[26] = "2048";
      sa[27] = "2050";
      sa[28] = "2052";
      sa[29] = "2054";
      sa[30] = "2056";
      sa[31] = "2058";
      sa[32] = "2060";
      sa[33] = "2062";
      sa[34] = "2064";
      sa[35] = "2066";
      sa[36] = "2068";
      sa[37] = "2070";
      sa[38] = "2072";
      sa[39] = "2074";
      sa[40] = "2076";
      sa[41] = "2078";
      sa[42] = "2080";
      sa[43] = "2082";
      sa[44] = "2084";
      sa[45] = "2086";
      sa[46] = "2088";
      sa[47] = "2090";
      sa[48] = "2092";
      sa[49] = "2094";
      sa[50] = "2096";
      sa[51] = "2098";
      sa[52] = "2100";
      sa[53] = "2102";
      sa[54] = "2104";
      sa[55] = "2106";
      sa[56] = "2108";
      sa[57] = "2110";
      sa[58] = "2112";
      sa[59] = "2114";
      sa[60] = "2116";
      sa[61] = "2118";
      sa[62] = "2120";
      sa[63] = "2122";
      sa[64] = "2124";
      sa[65] = "2126";
      sa[66] = "2128";
      sa[67] = "2130";
      sa[68] = "2132";
      sa[69] = "2134";
      sa[70] = "2136";
      sa[71] = "2138";
      sa[72] = "2140";
      sa[73] = "2142";
      sa[74] = "2144";
      sa[75] = "2146";
      sa[76] = "2148";
      sa[77] = "2150";
      sa[78] = "2152";
      sa[79] = "2154";
      sa[80] = "2156";
      sa[81] = "2158";
      sa[82] = "2160";
      sa[83] = "2162";
      sa[84] = "2164";
      sa[85] = "2166";
      sa[86] = "2168";
      sa[87] = "2170";
      sa[88] = "2172";
      sa[89] = "2174";
      sa[90] = "2176";
      sa[91] = "2178";
      sa[92] = "2180";
      sa[93] = "2182";
      sa[94] = "2184";
      sa[95] = "2186";
      sa[96] = "2188";
      sa[97] = "2190";
      sa[98] = "2192";
      sa[99] = "2194";
      sa[100] = "2196";
      sa[101] = "2198";
      sa[102] = "2200";
      sa[103] = "2202";
      sa[104] = "2204";
      sa[105] = "2206";
      sa[106] = "2208";
      sa[107] = "2210";
      sa[108] = "2212";
      sa[109] = "2214";
      sa[110] = "2216";
      sa[111] = "2218";
      sa[112] = "2220";
      sa[113] = "2222";
      sa[114] = "2224";
      sa[115] = "2226";
      sa[116] = "2228";
      sa[117] = "2230";
      sa[118] = "2232";
      sa[119] = "2234";
      sa[120] = "2236";
      sa[121] = "2238";
      sa[122] = "2240";
      sa[123] = "2242";
      sa[124] = "2244";
      sa[125] = "2246";
      sa[126] = "2248";
      sa[127] = "2250";
      sa[128] = "2252";
      sa[129] = "2254";
      sa[130] = "2256";
      sa[131] = "2258";
      sa[132] = "2260";
      sa[133] = "2262";
      sa[134] = "2264";
      sa[135] = "2266";
      sa[136] = "2268";
      sa[137] = "2270";
      sa[138] = "2272";
      sa[139] = "2274";
      sa[140] = "2276";
      sa[141] = "2278";
      sa[142] = "2280";
      sa[143] = "2282";
      sa[144] = "2284";
      sa[145] = "2286";
      sa[146] = "2288";
      sa[147] = "2290";
      sa[148] = "2292";
      sa[149] = "2294";
      sa[150] = "2296";
      sa[151] = "2298";
      sa[152] = "2300";
      sa[153] = "2302";
      sa[154] = "2304";
      sa[155] = "2306";
      sa[156] = "2308";
      sa[157] = "2310";
      sa[158] = "2312";
      sa[159] = "2314";
      sa[160] = "2316";
      sa[161] = "2318";
      sa[162] = "2320";
      sa[163] = "2322";
      sa[164] = "2324";
      sa[165] = "2326";
      sa[166] = "2328";
      sa[167] = "2330";
      sa[168] = "2332";
      sa[169] = "2334";
      sa[170] = "2336";
      sa[171] = "2338";
      sa[172] = "2340";
      sa[173] = "2342";
      sa[174] = "2344";
      sa[175] = "2346";
      sa[176] = "2348";
      sa[177] = "2350";
      sa[178] = "2352";
      sa[179] = "2354";
      sa[180] = "2356";
      sa[181] = "2358";
      sa[182] = "2360";
      sa[183] = "2362";
      sa[184] = "2364";
      sa[185] = "2366";
      sa[186] = "2368";
      sa[187] = "2370";
      sa[188] = "2372";
      sa[189] = "2374";
      sa[190] = "2376";
      sa[191] = "2378";
      sa[192] = "2380";
      sa[193] = "2382";
      sa[194] = "2384";
      sa[195] = "2386";
      sa[196] = "2388";
      sa[197] = "2390";
      sa[198] = "2392";
      sa[199] = "2394";
      sa[200] = "2396";
      sa[201] = "2398";
      sa[202] = "2400";
      sa[203] = "2402";
      sa[204] = "2404";
      sa[205] = "2406";
      sa[206] = "2408";
      sa[207] = "2410";
      sa[208] = "2412";
      sa[209] = "2414";
      sa[210] = "2416";
      sa[211] = "2418";
      sa[212] = "2420";
      sa[213] = "2422";
      sa[214] = "2424";
      sa[215] = "2426";
      sa[216] = "2428";
      sa[217] = "2430";
      sa[218] = "2432";
      sa[219] = "2434";
      sa[220] = "2436";
      sa[221] = "2438";
      sa[222] = "2440";
      sa[223] = "2442";
      sa[224] = "2444";
      sa[225] = "2446";
      sa[226] = "2448";
      sa[227] = "2450";
      sa[228] = "2452";
      sa[229] = "2454";
      sa[230] = "2456";
      sa[231] = "2458";
      sa[232] = "2460";
      sa[233] = "2462";
      sa[234] = "2464";
      sa[235] = "2466";
      sa[236] = "2468";
      sa[237] = "2470";
      sa[238] = "2472";
      sa[239] = "2474";
      sa[240] = "2476";
      sa[241] = "2478";
      sa[242] = "2480";
      sa[243] = "2482";
      sa[244] = "2484";
      sa[245] = "2486";
      sa[246] = "2488";
      sa[247] = "2490";
      sa[248] = "2492";
      sa[249] = "2494";
      sa[250] = "2496";
      sa[251] = "2498";
      sa[252] = "2500";
      sa[253] = "2502";
      sa[254] = "2504";
      sa[255] = "2506";
      sa[256] = "2508";
      sa[257] = "2510";
      sa[258] = "2512";
      sa[259] = "2514";
      sa[260] = "2516";
      sa[261] = "2518";
      sa[262] = "2520";
      sa[263] = "2522";
      sa[264] = "2524";
      sa[265] = "2526";
      sa[266] = "2528";
      sa[267] = "2530";
      sa[268] = "2532";
      sa[269] = "2534";
      sa[270] = "2536";
      sa[271] = "2538";
      sa[272] = "2540";
      sa[273] = "2542";
      sa[274] = "2544";
      sa[275] = "2546";
      sa[276] = "2548";
      sa[277] = "2550";
      sa[278] = "2552";
      sa[279] = "2554";
      sa[280] = "2556";
      sa[281] = "2558";
      sa[282] = "2560";
      sa[283] = "2562";
      sa[284] = "2564";
      sa[285] = "2566";
      sa[286] = "2568";
      sa[287] = "2570";
      sa[288] = "2572";
      sa[289] = "2574";
      sa[290] = "2576";
      sa[291] = "2578";
      sa[292] = "2580";
      sa[293] = "2582";
      sa[294] = "2584";
      sa[295] = "2586";
      sa[296] = "2588";
      sa[297] = "2590";
      sa[298] = "2592";
      sa[299] = "2594";
      sa[300] = "2596";
      sa[301] = "2598";
      sa[302] = "2600";
      sa[303] = "2602";
      sa[304] = "2604";
      sa[305] = "2606";
      sa[306] = "2608";
      sa[307] = "2610";
      sa[308] = "2612";
      sa[309] = "2614";
      sa[310] = "2616";
      sa[311] = "2618";
      sa[312] = "2620";
      sa[313] = "2622";
      sa[314] = "2624";
      sa[315] = "2626";
      sa[316] = "2628";
      sa[317] = "2630";
      sa[318] = "2632";
      sa[319] = "2634";
      sa[320] = "2636";
      sa[321] = "2638";
      sa[322] = "2640";
      sa[323] = "2642";
      sa[324] = "2644";
      sa[325] = "2646";
      sa[326] = "2648";
      sa[327] = "2650";
      sa[328] = "2652";
      sa[329] = "2654";
      sa[330] = "2656";
      sa[331] = "2658";
      sa[332] = "2660";
      sa[333] = "2662";
      sa[334] = "2664";
      sa[335] = "2666";
      sa[336] = "2668";
      sa[337] = "2670";
      sa[338] = "2672";
      sa[339] = "2674";
      sa[340] = "2676";
      sa[341] = "2678";
      sa[342] = "2680";
      sa[343] = "2682";
      sa[344] = "2684";
      sa[345] = "2686";
      sa[346] = "2688";
      sa[347] = "2690";
      sa[348] = "2692";
      sa[349] = "2694";
      sa[350] = "2696";
      sa[351] = "2698";
      sa[352] = "2700";
      sa[353] = "2702";
      sa[354] = "2704";
      sa[355] = "2706";
      sa[356] = "2708";
      sa[357] = "2710";
      sa[358] = "2712";
      sa[359] = "2714";
      sa[360] = "2716";
      sa[361] = "2718";
      sa[362] = "2720";
      sa[363] = "2722";
      sa[364] = "2724";
      sa[365] = "2726";
      sa[366] = "2728";
      sa[367] = "2730";
      sa[368] = "2732";
      sa[369] = "2734";
      sa[370] = "2736";
      sa[371] = "2738";
      sa[372] = "2740";
      sa[373] = "2742";
      sa[374] = "2744";
      sa[375] = "2746";
      sa[376] = "2748";
      sa[377] = "2750";
      sa[378] = "2752";
      sa[379] = "2754";
      sa[380] = "2756";
      sa[381] = "2758";
      sa[382] = "2760";
      sa[383] = "2762";
      sa[384] = "2764";
      sa[385] = "2766";
      sa[386] = "2768";
      sa[387] = "2770";
      sa[388] = "2772";
      sa[389] = "2774";
      sa[390] = "2776";
      sa[391] = "2778";
      sa[392] = "2780";
      sa[393] = "2782";
      sa[394] = "2784";
      sa[395] = "2786";
      sa[396] = "2788";
      sa[397] = "2790";
      sa[398] = "2792";
      sa[399] = "2794";
      sa[400] = "2796";
      sa[401] = "2798";
      sa[402] = "2800";
      sa[403] = "2802";
      sa[404] = "2804";
      sa[405] = "2806";
      sa[406] = "2808";
      sa[407] = "2810";
      sa[408] = "2812";
      sa[409] = "2814";
      sa[410] = "2816";
      sa[411] = "2818";
      sa[412] = "2820";
      sa[413] = "2822";
      sa[414] = "2824";
      sa[415] = "2826";
      sa[416] = "2828";
      sa[417] = "2830";
      sa[418] = "2832";
      sa[419] = "2834";
      sa[420] = "2836";
      sa[421] = "2838";
      sa[422] = "2840";
      sa[423] = "2842";
      sa[424] = "2844";
      sa[425] = "2846";
      sa[426] = "2848";
      sa[427] = "2850";
      sa[428] = "2852";
      sa[429] = "2854";
      sa[430] = "2856";
      sa[431] = "2858";
      sa[432] = "2860";
      sa[433] = "2862";
      sa[434] = "2864";
      sa[435] = "2866";
      sa[436] = "2868";
      sa[437] = "2870";
      sa[438] = "2872";
      sa[439] = "2874";
      sa[440] = "2876";
      sa[441] = "2878";
      sa[442] = "2880";
      sa[443] = "2882";
      sa[444] = "2884";
      sa[445] = "2886";
      sa[446] = "2888";
      sa[447] = "2890";
      sa[448] = "2892";
      sa[449] = "2894";
      sa[450] = "2896";
      sa[451] = "2898";
      sa[452] = "2900";
      sa[453] = "2902";
      sa[454] = "2904";
      sa[455] = "2906";
      sa[456] = "2908";
      sa[457] = "2910";
      sa[458] = "2912";
      sa[459] = "2914";
      sa[460] = "2916";
      sa[461] = "2918";
      sa[462] = "2920";
      sa[463] = "2922";
      sa[464] = "2924";
      sa[465] = "2926";
      sa[466] = "2928";
      sa[467] = "2930";
      sa[468] = "2932";
      sa[469] = "2934";
      sa[470] = "2936";
      sa[471] = "2938";
      sa[472] = "2940";
      sa[473] = "2942";
      sa[474] = "2944";
      sa[475] = "2946";
      sa[476] = "2948";
      sa[477] = "2950";
      sa[478] = "2952";
      sa[479] = "2954";
      sa[480] = "2956";
      sa[481] = "2958";
      sa[482] = "2960";
      sa[483] = "2962";
      sa[484] = "2964";
      sa[485] = "2966";
      sa[486] = "2968";
      sa[487] = "2970";
      sa[488] = "2972";
      sa[489] = "2974";
      sa[490] = "2976";
      sa[491] = "2978";
      sa[492] = "2980";
      sa[493] = "2982";
      sa[494] = "2984";
      sa[495] = "2986";
      sa[496] = "2988";
      sa[497] = "2990";
      sa[498] = "2992";
      sa[499] = "2994";
      sa[500] = "2996";
      sa[501] = "2998";
      sa[502] = "3000";
    }
  }
}
// The class representing column isEndOfWordOut
class TrieEnd42_ColInfo_1 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    TrieEnd42_ColInfo_1_0.fill(VALUES);
  }
  static final class TrieEnd42_ColInfo_1_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "FALSE";
      sa[1] = "TRUE";
    }
  }
}

class TrieEnd42_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd42_Tree_0_class_0.score0(fdata);
  }
}
class TrieEnd42_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(503, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 503, 0, data[0])) ? 
        -0.29075146f : 
        0.15242425f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -107, -43, -33, 119, 91, -43, -106, -88, 91, 126, -23, 123, -91, 60, -9, -19, -85, -83, 118, 117, 87, 85, -35, -75, -35, 87, -83, 125, -81, -86, -50, -21, 107, -69, -11, -11, -19, 74, -83, -99, 116, -42, 95, -75, 91, -97, -67, -22, -41, -9, -70, 118, 107, -85, 118, -41, 119, -73, -67, 94, -21, 85};
}


class TrieEnd42_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd42_Tree_1_class_0.score0(fdata);
  }
}
class TrieEnd42_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(503, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 503, 0, data[0])) ? 
        -0.24262515f : 
        0.1450127f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -107, -43, -33, 119, 91, -43, -106, -88, 91, 126, -23, 123, -91, 60, -9, -19, -85, -83, 118, 117, 87, 85, -35, -75, -35, 87, -83, 125, -81, -86, -50, -21, 107, -69, -11, -11, -19, 74, -83, -99, 116, -42, 95, -75, 91, -97, -67, -22, -41, -9, -70, 118, 107, -85, 118, -41, 119, -73, -67, 94, -21, 85};
}


class TrieEnd42_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd42_Tree_2_class_0.score0(fdata);
  }
}
class TrieEnd42_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(503, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 503, 0, data[0])) ? 
        -0.21189876f : 
        0.1389365f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -107, -43, -33, 119, 91, -43, -106, -88, 91, 126, -23, 123, -91, 60, -9, -19, -85, -83, 118, 117, 87, 85, -35, -75, -35, 87, -83, 125, -81, -86, -50, -21, 107, -69, -11, -11, -19, 74, -83, -99, 116, -42, 95, -75, 91, -97, -67, -22, -41, -9, -70, 118, 107, -85, 118, -41, 119, -73, -67, 94, -21, 85};
}


class TrieEnd42_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd42_Tree_3_class_0.score0(fdata);
  }
}
class TrieEnd42_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(503, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 503, 0, data[0])) ? 
        -0.19053133f : 
        0.13388579f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -107, -43, -33, 119, 91, -43, -106, -88, 91, 126, -23, 123, -91, 60, -9, -19, -85, -83, 118, 117, 87, 85, -35, -75, -35, 87, -83, 125, -81, -86, -50, -21, 107, -69, -11, -11, -19, 74, -83, -99, 116, -42, 95, -75, 91, -97, -67, -22, -41, -9, -70, 118, 107, -85, 118, -41, 119, -73, -67, 94, -21, 85};
}


class TrieEnd42_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd42_Tree_4_class_0.score0(fdata);
  }
}
class TrieEnd42_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(503, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 503, 0, data[0])) ? 
        -0.17482594f : 
        0.12963957f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {01100110 10101001 10101011 11111011 11101110 11011010 10101011 01101001 00010101 11011010 01111110 10010111 11011110 10100101 00111100 11101111 10110111 11010101 10110101 01101110 10101110 11101010 10101010 10111011 10101101 10111011 11101010 10110101 10111110 11110101 01010101 01110011 11010111 11010110 11011101 10101111 10101111 10110111 01010010 10110101 10111001 00101110 01101011 11111010 10101101 11011010 11111001 10111101 01010111 11101011 11101111 01011101 01101110 11010110 11010101 01101110 11101011 11101110 11101101 10111101 01111010 11010111 1010101}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -107, -43, -33, 119, 91, -43, -106, -88, 91, 126, -23, 123, -91, 60, -9, -19, -85, -83, 118, 117, 87, 85, -35, -75, -35, 87, -83, 125, -81, -86, -50, -21, 107, -69, -11, -11, -19, 74, -83, -99, 116, -42, 95, -75, 91, -97, -67, -22, -41, -9, -70, 118, 107, -85, 118, -41, 119, -73, -67, 94, -21, 85};
}


class TrieEnd42_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd42_Tree_5_class_0.score0(fdata);
  }
}
class TrieEnd42_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(503, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 503, 0, data[0])) ? 
        -0.1628241f : 
        0.12603575f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -107, -43, -33, 119, 91, -43, -106, -88, 91, 126, -23, 123, -91, 60, -9, -19, -85, -83, 118, 117, 87, 85, -35, -75, -35, 87, -83, 125, -81, -86, -50, -21, 107, -69, -11, -11, -19, 74, -83, -99, 116, -42, 95, -75, 91, -97, -67, -22, -41, -9, -70, 118, 107, -85, 118, -41, 119, -73, -67, 94, -21, 85};
}


class TrieEnd42_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd42_Tree_6_class_0.score0(fdata);
  }
}
class TrieEnd42_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(503, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 503, 0, data[0])) ? 
        -0.1533842f : 
        0.12295268f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -107, -43, -33, 119, 91, -43, -106, -88, 91, 126, -23, 123, -91, 60, -9, -19, -85, -83, 118, 117, 87, 85, -35, -75, -35, 87, -83, 125, -81, -86, -50, -21, 107, -69, -11, -11, -19, 74, -83, -99, 116, -42, 95, -75, 91, -97, -67, -22, -41, -9, -70, 118, 107, -85, 118, -41, 119, -73, -67, 94, -21, 85};
}


class TrieEnd42_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd42_Tree_7_class_0.score0(fdata);
  }
}
class TrieEnd42_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(503, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 503, 0, data[0])) ? 
        -0.14579296f : 
        0.12029718f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -107, -43, -33, 119, 91, -43, -106, -88, 91, 126, -23, 123, -91, 60, -9, -19, -85, -83, 118, 117, 87, 85, -35, -75, -35, 87, -83, 125, -81, -86, -50, -21, 107, -69, -11, -11, -19, 74, -83, -99, 116, -42, 95, -75, 91, -97, -67, -22, -41, -9, -70, 118, 107, -85, 118, -41, 119, -73, -67, 94, -21, 85};
}


class TrieEnd42_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd42_Tree_8_class_0.score0(fdata);
  }
}
class TrieEnd42_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(503, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 503, 0, data[0])) ? 
        -0.13958053f : 
        0.11799663f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -107, -43, -33, 119, 91, -43, -106, -88, 91, 126, -23, 123, -91, 60, -9, -19, -85, -83, 118, 117, 87, 85, -35, -75, -35, 87, -83, 125, -81, -86, -50, -21, 107, -69, -11, -11, -19, 74, -83, -99, 116, -42, 95, -75, 91, -97, -67, -22, -41, -9, -70, 118, 107, -85, 118, -41, 119, -73, -67, 94, -21, 85};
}


class TrieEnd42_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd42_Tree_9_class_0.score0(fdata);
  }
}
class TrieEnd42_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(503, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 503, 0, data[0])) ? 
        -0.1344241f : 
        0.11599359f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -107, -43, -33, 119, 91, -43, -106, -88, 91, 126, -23, 123, -91, 60, -9, -19, -85, -83, 118, 117, 87, 85, -35, -75, -35, 87, -83, 125, -81, -86, -50, -21, 107, -69, -11, -11, -19, 74, -83, -99, 116, -42, 95, -75, 91, -97, -67, -22, -41, -9, -70, 118, 107, -85, 118, -41, 119, -73, -67, 94, -21, 85};
}


class TrieEnd42_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd42_Tree_10_class_0.score0(fdata);
  }
}
class TrieEnd42_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(503, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 503, 0, data[0])) ? 
        -0.13009422f : 
        0.11424199f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -107, -43, -33, 119, 91, -43, -106, -88, 91, 126, -23, 123, -91, 60, -9, -19, -85, -83, 118, 117, 87, 85, -35, -75, -35, 87, -83, 125, -81, -86, -50, -21, 107, -69, -11, -11, -19, 74, -83, -99, 116, -42, 95, -75, 91, -97, -67, -22, -41, -9, -70, 118, 107, -85, 118, -41, 119, -73, -67, 94, -21, 85};
}


class TrieEnd42_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd42_Tree_11_class_0.score0(fdata);
  }
}
class TrieEnd42_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(503, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 503, 0, data[0])) ? 
        -0.1264231f : 
        0.112704456f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {01100110 10101001 10101011 11111011 11101110 11011010 10101011 01101001 00010101 11011010 01111110 10010111 11011110 10100101 00111100 11101111 10110111 11010101 10110101 01101110 10101110 11101010 10101010 10111011 10101101 10111011 11101010 10110101 10111110 11110101 01010101 01110011 11010111 11010110 11011101 10101111 10101111 10110111 01010010 10110101 10111001 00101110 01101011 11111010 10101101 11011010 11111001 10111101 01010111 11101011 11101111 01011101 01101110 11010110 11010101 01101110 11101011 11101110 11101101 10111101 01111010 11010111 1010101}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -107, -43, -33, 119, 91, -43, -106, -88, 91, 126, -23, 123, -91, 60, -9, -19, -85, -83, 118, 117, 87, 85, -35, -75, -35, 87, -83, 125, -81, -86, -50, -21, 107, -69, -11, -11, -19, 74, -83, -99, 116, -42, 95, -75, 91, -97, -67, -22, -41, -9, -70, 118, 107, -85, 118, -41, 119, -73, -67, 94, -21, 85};
}


class TrieEnd42_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd42_Tree_12_class_0.score0(fdata);
  }
}
class TrieEnd42_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(503, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 503, 0, data[0])) ? 
        -0.123285145f : 
        0.11135034f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -107, -43, -33, 119, 91, -43, -106, -88, 91, 126, -23, 123, -91, 60, -9, -19, -85, -83, 118, 117, 87, 85, -35, -75, -35, 87, -83, 125, -81, -86, -50, -21, 107, -69, -11, -11, -19, 74, -83, -99, 116, -42, 95, -75, 91, -97, -67, -22, -41, -9, -70, 118, 107, -85, 118, -41, 119, -73, -67, 94, -21, 85};
}


class TrieEnd42_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd42_Tree_13_class_0.score0(fdata);
  }
}
class TrieEnd42_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(503, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 503, 0, data[0])) ? 
        -0.12058434f : 
        0.11015431f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -107, -43, -33, 119, 91, -43, -106, -88, 91, 126, -23, 123, -91, 60, -9, -19, -85, -83, 118, 117, 87, 85, -35, -75, -35, 87, -83, 125, -81, -86, -50, -21, 107, -69, -11, -11, -19, 74, -83, -99, 116, -42, 95, -75, 91, -97, -67, -22, -41, -9, -70, 118, 107, -85, 118, -41, 119, -73, -67, 94, -21, 85};
}


class TrieEnd42_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd42_Tree_14_class_0.score0(fdata);
  }
}
class TrieEnd42_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(503, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 503, 0, data[0])) ? 
        -0.118246004f : 
        0.10909517f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -107, -43, -33, 119, 91, -43, -106, -88, 91, 126, -23, 123, -91, 60, -9, -19, -85, -83, 118, 117, 87, 85, -35, -75, -35, 87, -83, 125, -81, -86, -50, -21, 107, -69, -11, -11, -19, 74, -83, -99, 116, -42, 95, -75, 91, -97, -67, -22, -41, -9, -70, 118, 107, -85, 118, -41, 119, -73, -67, 94, -21, 85};
}


class TrieEnd42_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd42_Tree_15_class_0.score0(fdata);
  }
}
class TrieEnd42_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(503, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 503, 0, data[0])) ? 
        -0.11621116f : 
        0.10815514f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -107, -43, -33, 119, 91, -43, -106, -88, 91, 126, -23, 123, -91, 60, -9, -19, -85, -83, 118, 117, 87, 85, -35, -75, -35, 87, -83, 125, -81, -86, -50, -21, 107, -69, -11, -11, -19, 74, -83, -99, 116, -42, 95, -75, 91, -97, -67, -22, -41, -9, -70, 118, 107, -85, 118, -41, 119, -73, -67, 94, -21, 85};
}


class TrieEnd42_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd42_Tree_16_class_0.score0(fdata);
  }
}
class TrieEnd42_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(503, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 503, 0, data[0])) ? 
        -0.11443259f : 
        0.10731914f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -107, -43, -33, 119, 91, -43, -106, -88, 91, 126, -23, 123, -91, 60, -9, -19, -85, -83, 118, 117, 87, 85, -35, -75, -35, 87, -83, 125, -81, -86, -50, -21, 107, -69, -11, -11, -19, 74, -83, -99, 116, -42, 95, -75, 91, -97, -67, -22, -41, -9, -70, 118, 107, -85, 118, -41, 119, -73, -67, 94, -21, 85};
}


class TrieEnd42_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd42_Tree_17_class_0.score0(fdata);
  }
}
class TrieEnd42_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(503, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 503, 0, data[0])) ? 
        -0.11287203f : 
        0.106574334f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -107, -43, -33, 119, 91, -43, -106, -88, 91, 126, -23, 123, -91, 60, -9, -19, -85, -83, 118, 117, 87, 85, -35, -75, -35, 87, -83, 125, -81, -86, -50, -21, 107, -69, -11, -11, -19, 74, -83, -99, 116, -42, 95, -75, 91, -97, -67, -22, -41, -9, -70, 118, 107, -85, 118, -41, 119, -73, -67, 94, -21, 85};
}


class TrieEnd42_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd42_Tree_18_class_0.score0(fdata);
  }
}
class TrieEnd42_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(503, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 503, 0, data[0])) ? 
        -0.111498125f : 
        0.10590973f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {01100110 10101001 10101011 11111011 11101110 11011010 10101011 01101001 00010101 11011010 01111110 10010111 11011110 10100101 00111100 11101111 10110111 11010101 10110101 01101110 10101110 11101010 10101010 10111011 10101101 10111011 11101010 10110101 10111110 11110101 01010101 01110011 11010111 11010110 11011101 10101111 10101111 10110111 01010010 10110101 10111001 00101110 01101011 11111010 10101101 11011010 11111001 10111101 01010111 11101011 11101111 01011101 01101110 11010110 11010101 01101110 11101011 11101110 11101101 10111101 01111010 11010111 1010101}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -107, -43, -33, 119, 91, -43, -106, -88, 91, 126, -23, 123, -91, 60, -9, -19, -85, -83, 118, 117, 87, 85, -35, -75, -35, 87, -83, 125, -81, -86, -50, -21, 107, -69, -11, -11, -19, 74, -83, -99, 116, -42, 95, -75, 91, -97, -67, -22, -41, -9, -70, 118, 107, -85, 118, -41, 119, -73, -67, 94, -21, 85};
}


class TrieEnd42_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd42_Tree_19_class_0.score0(fdata);
  }
}
class TrieEnd42_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(503, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 503, 0, data[0])) ? 
        -0.11028499f : 
        0.105315834f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {01100110 10101001 10101011 11111011 11101110 11011010 10101011 01101001 00010101 11011010 01111110 10010111 11011110 10100101 00111100 11101111 10110111 11010101 10110101 01101110 10101110 11101010 10101010 10111011 10101101 10111011 11101010 10110101 10111110 11110101 01010101 01110011 11010111 11010110 11011101 10101111 10101111 10110111 01010010 10110101 10111001 00101110 01101011 11111010 10101101 11011010 11111001 10111101 01010111 11101011 11101111 01011101 01101110 11010110 11010101 01101110 11101011 11101110 11101101 10111101 01111010 11010111 1010101}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -107, -43, -33, 119, 91, -43, -106, -88, 91, 126, -23, 123, -91, 60, -9, -19, -85, -83, 118, 117, 87, 85, -35, -75, -35, 87, -83, 125, -81, -86, -50, -21, 107, -69, -11, -11, -19, 74, -83, -99, 116, -42, 95, -75, 91, -97, -67, -22, -41, -9, -70, 118, 107, -85, 118, -41, 119, -73, -67, 94, -21, 85};
}


class TrieEnd42_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd42_Tree_20_class_0.score0(fdata);
  }
}
class TrieEnd42_Tree_20_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(503, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 503, 0, data[0])) ? 
        -0.10921102f : 
        0.10478447f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -107, -43, -33, 119, 91, -43, -106, -88, 91, 126, -23, 123, -91, 60, -9, -19, -85, -83, 118, 117, 87, 85, -35, -75, -35, 87, -83, 125, -81, -86, -50, -21, 107, -69, -11, -11, -19, 74, -83, -99, 116, -42, 95, -75, 91, -97, -67, -22, -41, -9, -70, 118, 107, -85, 118, -41, 119, -73, -67, 94, -21, 85};
}


class TrieEnd42_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd42_Tree_21_class_0.score0(fdata);
  }
}
class TrieEnd42_Tree_21_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(503, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 503, 0, data[0])) ? 
        -0.10825806f : 
        0.1043085f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -107, -43, -33, 119, 91, -43, -106, -88, 91, 126, -23, 123, -91, 60, -9, -19, -85, -83, 118, 117, 87, 85, -35, -75, -35, 87, -83, 125, -81, -86, -50, -21, 107, -69, -11, -11, -19, 74, -83, -99, 116, -42, 95, -75, 91, -97, -67, -22, -41, -9, -70, 118, 107, -85, 118, -41, 119, -73, -67, 94, -21, 85};
}


class TrieEnd42_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd42_Tree_22_class_0.score0(fdata);
  }
}
class TrieEnd42_Tree_22_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(503, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 503, 0, data[0])) ? 
        -0.10741075f : 
        0.10388173f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {01100110 10101001 10101011 11111011 11101110 11011010 10101011 01101001 00010101 11011010 01111110 10010111 11011110 10100101 00111100 11101111 10110111 11010101 10110101 01101110 10101110 11101010 10101010 10111011 10101101 10111011 11101010 10110101 10111110 11110101 01010101 01110011 11010111 11010110 11011101 10101111 10101111 10110111 01010010 10110101 10111001 00101110 01101011 11111010 10101101 11011010 11111001 10111101 01010111 11101011 11101111 01011101 01101110 11010110 11010101 01101110 11101011 11101110 11101101 10111101 01111010 11010111 1010101}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -107, -43, -33, 119, 91, -43, -106, -88, 91, 126, -23, 123, -91, 60, -9, -19, -85, -83, 118, 117, 87, 85, -35, -75, -35, 87, -83, 125, -81, -86, -50, -21, 107, -69, -11, -11, -19, 74, -83, -99, 116, -42, 95, -75, 91, -97, -67, -22, -41, -9, -70, 118, 107, -85, 118, -41, 119, -73, -67, 94, -21, 85};
}


class TrieEnd42_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd42_Tree_23_class_0.score0(fdata);
  }
}
class TrieEnd42_Tree_23_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(503, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 503, 0, data[0])) ? 
        -0.106656015f : 
        0.10349873f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -107, -43, -33, 119, 91, -43, -106, -88, 91, 126, -23, 123, -91, 60, -9, -19, -85, -83, 118, 117, 87, 85, -35, -75, -35, 87, -83, 125, -81, -86, -50, -21, 107, -69, -11, -11, -19, 74, -83, -99, 116, -42, 95, -75, 91, -97, -67, -22, -41, -9, -70, 118, 107, -85, 118, -41, 119, -73, -67, 94, -21, 85};
}


class TrieEnd42_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd42_Tree_24_class_0.score0(fdata);
  }
}
class TrieEnd42_Tree_24_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(503, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 503, 0, data[0])) ? 
        -0.10598266f : 
        0.10315472f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -107, -43, -33, 119, 91, -43, -106, -88, 91, 126, -23, 123, -91, 60, -9, -19, -85, -83, 118, 117, 87, 85, -35, -75, -35, 87, -83, 125, -81, -86, -50, -21, 107, -69, -11, -11, -19, 74, -83, -99, 116, -42, 95, -75, 91, -97, -67, -22, -41, -9, -70, 118, 107, -85, 118, -41, 119, -73, -67, 94, -21, 85};
}


class TrieEnd42_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd42_Tree_25_class_0.score0(fdata);
  }
}
class TrieEnd42_Tree_25_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(503, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 503, 0, data[0])) ? 
        -0.10538105f : 
        0.10284552f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -107, -43, -33, 119, 91, -43, -106, -88, 91, 126, -23, 123, -91, 60, -9, -19, -85, -83, 118, 117, 87, 85, -35, -75, -35, 87, -83, 125, -81, -86, -50, -21, 107, -69, -11, -11, -19, 74, -83, -99, 116, -42, 95, -75, 91, -97, -67, -22, -41, -9, -70, 118, 107, -85, 118, -41, 119, -73, -67, 94, -21, 85};
}


class TrieEnd42_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd42_Tree_26_class_0.score0(fdata);
  }
}
class TrieEnd42_Tree_26_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(503, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 503, 0, data[0])) ? 
        -0.10484284f : 
        0.10256742f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -107, -43, -33, 119, 91, -43, -106, -88, 91, 126, -23, 123, -91, 60, -9, -19, -85, -83, 118, 117, 87, 85, -35, -75, -35, 87, -83, 125, -81, -86, -50, -21, 107, -69, -11, -11, -19, 74, -83, -99, 116, -42, 95, -75, 91, -97, -67, -22, -41, -9, -70, 118, 107, -85, 118, -41, 119, -73, -67, 94, -21, 85};
}


class TrieEnd42_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd42_Tree_27_class_0.score0(fdata);
  }
}
class TrieEnd42_Tree_27_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(503, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 503, 0, data[0])) ? 
        -0.10436081f : 
        0.10231714f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -107, -43, -33, 119, 91, -43, -106, -88, 91, 126, -23, 123, -91, 60, -9, -19, -85, -83, 118, 117, 87, 85, -35, -75, -35, 87, -83, 125, -81, -86, -50, -21, 107, -69, -11, -11, -19, 74, -83, -99, 116, -42, 95, -75, 91, -97, -67, -22, -41, -9, -70, 118, 107, -85, 118, -41, 119, -73, -67, 94, -21, 85};
}


class TrieEnd42_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd42_Tree_28_class_0.score0(fdata);
  }
}
class TrieEnd42_Tree_28_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(503, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 503, 0, data[0])) ? 
        -0.103928655f : 
        0.10209178f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -107, -43, -33, 119, 91, -43, -106, -88, 91, 126, -23, 123, -91, 60, -9, -19, -85, -83, 118, 117, 87, 85, -35, -75, -35, 87, -83, 125, -81, -86, -50, -21, 107, -69, -11, -11, -19, 74, -83, -99, 116, -42, 95, -75, 91, -97, -67, -22, -41, -9, -70, 118, 107, -85, 118, -41, 119, -73, -67, 94, -21, 85};
}


class TrieEnd42_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += TrieEnd42_Tree_29_class_0.score0(fdata);
  }
}
class TrieEnd42_Tree_29_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* nodeIdIn */]) && (GenModel.bitSetIsInRange(503, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 503, 0, data[0])) ? 
        -0.10354086f : 
        0.10188877f);
    return pred;
  } // constant pool size = 70B, number of visited nodes = 1, static init size = 384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -107, -43, -33, 119, 91, -43, -106, -88, 91, 126, -23, 123, -91, 60, -9, -19, -85, -83, 118, 117, 87, 85, -35, -75, -35, 87, -83, 125, -81, -86, -50, -21, 107, -69, -11, -11, -19, 74, -83, -99, 116, -42, 95, -75, 91, -97, -67, -22, -41, -9, -70, 118, 107, -85, 118, -41, 119, -73, -67, 94, -21, 85};
}


